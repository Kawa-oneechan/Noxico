//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Noxico.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Noxico.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Icon app {
            get {
                object obj = ResourceManager.GetObject("app", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap CharacterGenerator {
            get {
                object obj = ResourceManager.GetObject("CharacterGenerator", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;cultures&gt;
        ///	&lt;culture id=&quot;human&quot;&gt;
        ///		&lt;!-- We could specify a whole lot of extra information per culture here. Perhaps leverage the token system for easy lookup. Question is, what info should it contain? Month names? Interests? --&gt;
        ///		&lt;!-- One obvious thing would be what kind of creatures would/could have this culture. For this one psecifically, that&apos;d be human, so let&apos;s do that... --&gt;
        ///		&lt;cultureinfo&gt;
        ///			&lt;!-- Okay, this part is pure token. All the usual rules apply. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cultures {
            get {
                return ResourceManager.GetString("Cultures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; This is the default configuration for Noxico. Feel free to adjust this as you see fit.
        ///
        ///[video]
        ///;     tileset: Specifies which PNG file to use for the regular 256 characters.
        ///;              Should be a tileset with 32 glyphs per row, 8 rows. Actual window
        ///;              size is directly affected by this file. If the file doesn&apos;t exist,
        ///;              a built-in tileset is used.
        ///;     extiles: Basically the same deal as the tileset value, but for extra characters
        ///;              beyond the usual ran [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultSettings {
            get {
                return ResourceManager.GetString("DefaultSettings", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap ExtendedTiles {
            get {
                object obj = ResourceManager.GetObject("ExtendedTiles", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static byte[] GraveMarker {
            get {
                object obj = ResourceManager.GetObject("GraveMarker", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to play Noxico
        ///&lt;c15,8&gt; Keys &lt;c&gt;
        ///
        ///Arrow keys are obvious - they move your character.
        ///
        ///&lt;c0,7&gt;&lt;gDD&gt;L&lt;gDE&gt;&lt;c&gt;  - Look at another character, also identify them. While the
        ///       &lt;b&gt;+&lt;b&gt; targeting cursor is in view, you can press &lt;c0,7&gt;&lt;gDD&gt;Enter&lt;gDE&gt;&lt;c&gt; to
        ///       examine the targeted character or &lt;c0,7&gt;&lt;gDD&gt;Escape&lt;gDE&gt;&lt;c&gt; to cancel.
        ///
        ///&lt;c0,7&gt;&lt;gDD&gt;F1&lt;gDE&gt;&lt;c&gt; - This screen. While in a text scroller like this one, you
        ///       can press the &lt;c0,7&gt;&lt;gDD&gt;&lt;g18&gt;&lt;gDE&gt;&lt;c&gt; and &lt;c0,7&gt;&lt;gDD&gt;&lt;g19&gt;&lt;gDE&gt;&lt;c&gt; arrow keys  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HelpText {
            get {
                return ResourceManager.GetString("HelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;colortable&gt;
        ///	&lt;!-- Skintones --&gt;
        ///	&lt;color name=&quot;Light&quot; rgb=&quot;246,225,214&quot; cga=&quot;15&quot; /&gt;
        ///	&lt;color name=&quot;Dark&quot; rgb=&quot;133,69,67&quot; cga=&quot;6&quot; /&gt;
        ///	&lt;color name=&quot;Ebony&quot; rgb=&quot;23,11,11&quot; cga=&quot;0&quot; /&gt;
        ///
        ///	&lt;!-- Hair colors --&gt;
        ///	&lt;color name=&quot;Blond&quot; rgb=&quot;111,53,26&quot; cga=&quot;6&quot; /&gt; &lt;!-- FIXME --&gt;
        ///	&lt;color name=&quot;Auburn&quot; rgb=&quot;111,53,26&quot; cga=&quot;6&quot; /&gt;
        ///
        ///	&lt;!-- System.Drawing.KnownColor, with CGA approximation for display --&gt;
        ///  &lt;color name=&quot;AliceBlue&quot; rgb=&quot;240,248,255&quot; cga=&quot;9&quot; /&gt;
        ///  &lt;color name=&quot;AntiqueWhite&quot; rgb=&quot;250,235,215&quot; cga=&quot;14&quot; /&gt;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KnownColors {
            get {
                return ResourceManager.GetString("KnownColors", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap Tileset {
            get {
                object obj = ResourceManager.GetObject("Tileset", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap TitleScreen {
            get {
                object obj = ResourceManager.GetObject("TitleScreen", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static byte[] WallLookup {
            get {
                object obj = ResourceManager.GetObject("WallLookup", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
