//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Noxico.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Noxico.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Icon app {
            get {
                object obj = ResourceManager.GetObject("app", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE biomes [
        ///	&lt;!ELEMENT biomes (realm+)&gt;
        ///	&lt;!ELEMENT realm (biome+)&gt;
        ///	&lt;!ELEMENT biome ANY&gt;
        ///
        ///	&lt;!ELEMENT groundGlyphs (#PCDATA)&gt;
        ///	&lt;!ELEMENT encounters (#PCDATA)&gt;
        ///	&lt;!ELEMENT cultures (#PCDATA)&gt;
        ///	&lt;!ELEMENT darken EMPTY&gt;
        ///
        ///	&lt;!ATTLIST realm
        ///		id ID #REQUIRED
        ///		waterLevel CDATA #REQUIRED
        ///	&gt;
        ///	&lt;!ATTLIST biome
        ///		name CDATA #REQUIRED
        ///		rect CDATA #REQUIRED
        ///		color CDATA #REQUIRED
        ///		music CDATA #IMPLIED
        ///		isWater CDATA #IMPLIED
        ///		canBurn CDATA #IMPLIED
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Biomes {
            get {
                return ResourceManager.GetString("Biomes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;boards&gt;
        ///	&lt;board id=&quot;Silky Room&quot; base=&quot;inside&quot; music=&quot;Fusion.xm&quot;&gt;
        ///		
        ///		&lt;building left=&quot;10&quot; top=&quot;4&quot; right=&quot;70&quot; bottom=&quot;20&quot; id=&quot;Main Chamber&quot;&gt;
        ///			&lt;exit direction=&quot;south&quot; /&gt;
        ///		&lt;/building&gt;
        ///
        ///		&lt;warp id=&quot;exit&quot; left=&quot;40&quot; top=&quot;20&quot; target=&quot;Field&quot; warp=&quot;corner&quot;&gt;
        ///			&lt;tile character=&quot;240&quot; /&gt;
        ///		&lt;/warp&gt;
        ///
        ///		&lt;!--
        ///		&lt;patch left=&quot;11&quot; right=&quot;69&quot; top=&quot;4&quot; bottom=&quot;4&quot; character=&quot;176&quot; forecolor=&quot;1&quot; solid=&quot;true&quot; /&gt;
        ///		&lt;patch left=&quot;70&quot; right=&quot;70&quot; top=&quot;5&quot; bottom=&quot;19&quot; character=&quot;176 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Boards {
            get {
                return ResourceManager.GetString("Boards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE bodyplans [
        ///	&lt;!ELEMENT bodyplans (bodyplan+)&gt;
        ///	&lt;!ELEMENT bodyplan (#PCDATA)&gt;
        ///	&lt;!ATTLIST bodyplan id ID #REQUIRED&gt;
        ///]&gt;
        ///&lt;bodyplans&gt;
        ///	&lt;bodyplan id=&quot;human&quot;&gt;
        ///		&lt;![CDATA[
        ///playable
        ///culture
        ///	human
        ///normalgenders
        ///explicitgender
        ///terms
        ///	generic: &quot;human&quot;
        ///	male: &quot;man&quot;
        ///	female: &quot;woman&quot;
        ///bestiary: &quot;A typical human of northern stock.&quot;
        ///ascii
        ///	char: U+0068
        ///tallness: roll 1d50+150
        ///hair
        ///	length: roll 1d4+5
        ///	color: oneof blond, brown, black,red, gray, white, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BodyPlans {
            get {
                return ResourceManager.GetString("BodyPlans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; ?&gt;
        ///&lt;bonustraits&gt;
        ///	&lt;trait name=&quot;Charismatic&quot;&gt;
        ///		&lt;stat id=&quot;charisma&quot; value=&quot;15%&quot; /&gt;
        ///		&lt;skill name=&quot;Bartering&quot; /&gt;
        ///		(Only stat bonus works) Gives a 15% bonus on Charisma, and a level in bartering.
        ///	&lt;/trait&gt;
        ///	&lt;trait name=&quot;Cunning Bastard&quot;&gt;
        ///		&lt;stat id=&quot;cunning&quot; /&gt;
        ///		&lt;skill name=&quot;Trap Disarming&quot; /&gt;
        ///		(Only stat bonus works) Gives a 20% bonus on Cunning, and a level in trap disarming.
        ///	&lt;/trait&gt;
        ///	&lt;trait name=&quot;Fast Food&quot;&gt;
        ///		&lt;stat id=&quot;speed&quot; /&gt;
        ///		&lt;skill name=&quot;Swimming&quot; /&gt;
        ///		(Only st [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BonusTraits {
            get {
                return ResourceManager.GetString("BonusTraits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;templates&gt;
        ///	&lt;!-- view with preserved line endings for best effect --&gt;
        ///	&lt;template name=&quot;simple test&quot; inhabitants=&quot;1&quot;&gt;
        ///		&lt;map&gt;
        ///			&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;
        ///			&apos;+---+&apos;&apos;&apos;
        ///			&apos;|Tc.|&apos;&apos;&apos;
        ///			&apos;|c..\&apos;&apos;&apos;
        ///			&apos;|~.~+-+&apos;
        ///			&apos;|A...C|&apos;
        ///			&apos;|B..ab|&apos;
        ///			&apos;+-----+&apos;
        ///		&lt;/map&gt;
        ///		&lt;markings&gt;
        ///			&lt;marking char=&quot;A&quot; type=&quot;bed&quot; owner=&quot;1&quot; /&gt;
        ///			&lt;marking char=&quot;a&quot; type=&quot;bed&quot; owner=&quot;2&quot; /&gt;
        ///			&lt;marking char=&quot;B&quot; type=&quot;container,clothes,&amp;#x00C6;&quot; owner=&quot;1&quot; /&gt;
        ///			&lt;marking char=&quot;b&quot; type=&quot;container,clothes,&amp;#x00C6;&quot; owner=&quot;2&quot; /&gt;
        ///			&lt;marking char [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string buildings {
            get {
                return ResourceManager.GetString("buildings", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap CharacterGenerator {
            get {
                object obj = ResourceManager.GetObject("CharacterGenerator", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE cultures [
        ///	&lt;!ELEMENT cultures (culture+)&gt;
        ///	&lt;!ELEMENT culture (cultureinfo|namegen)*&gt;
        ///	&lt;!ELEMENT cultureinfo (bodyplans|monogamous|marriage)*&gt;
        ///	&lt;!ELEMENT bodyplans (plan+)&gt;
        ///	&lt;!ELEMENT plan EMPTY&gt;
        ///	&lt;!ELEMENT monogamous (#PCDATA)&gt;
        ///	&lt;!ELEMENT marriage (#PCDATA)&gt;
        ///	&lt;!ELEMENT namegen (set|male|female|surname|town)*&gt;
        ///	&lt;!ELEMENT set (#PCDATA)&gt;
        ///	&lt;!ELEMENT male (illegal|rules)*&gt;
        ///	&lt;!ELEMENT female (illegal|rules)*&gt;
        ///	&lt;!ELEMENT surname (patronymic|illegal|ru [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Cultures {
            get {
                return ResourceManager.GetString("Cultures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; This is the default configuration for Noxico. Feel free to adjust this as you see fit.
        ///
        ///[font]
        ///;    family: The font family name, like &quot;Consolas&quot;, &quot;DejaVu Sans Mono&quot;, or &quot;Fixedsys&quot;.
        ///;            If the font can&apos;t be loaded, the system&apos;s default monospace font is used.
        ///;      size: The size in points.
        ///;      bold: Obvious.
        ///;  x-adjust: Some fonts may need to be nudged. This and y-adjust will allow that.
        ///;            Don&apos;t use too large values or things&apos;ll go wonky.
        ///; cellwidth: This and cellheight [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultSettings {
            get {
                return ResourceManager.GetString("DefaultSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Acid Advertisement Age Alloy Alternation Ambiance Amusement Angels Annoyance Apathy Art Ascent Ash Atoll Autumn
        ///Backstabbing Bamboo Bastille Beauty Blankness Blaze Boil Bone Books Braille Brains Brick Bridges Bronze Brooks Bubbles Bulge Burlap Butterflies
        ///Cacophony Cacti Cages Canopy Canyons Carbon Carpet Cathedrals Caves Chains Change Charge Chemicals Chocolate Circuitry Clay Cliffs Clockwork Clouds Cobalt Cobblestone Concrete Construction Contact Contrast Copper Coral Cotton Crossroads Crystal Cubes Cur [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Homestuck {
            get {
                return ResourceManager.GetString("Homestuck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE itemdata [
        ///	&lt;!ELEMENT itemdata (items,costumes)&gt;
        ///	&lt;!ELEMENT items (item+)&gt;
        ///	&lt;!ELEMENT item (#PCDATA|script)*&gt;
        ///	&lt;!ELEMENT script (#PCDATA)&gt;
        ///	&lt;!ATTLIST script language CDATA #FIXED &quot;text/noxicobotic&quot;&gt;
        ///	&lt;!ATTLIST item
        ///		id ID #REQUIRED
        ///		name CDATA #REQUIRED
        ///		unknown CDATA #IMPLIED
        ///		proper (true|false) &quot;false&quot;
        ///		a CDATA #IMPLIED
        ///		the CDATA #IMPLIED
        ///	&gt;
        ///	&lt;!ELEMENT costumes ANY&gt;
        ///	&lt;!ELEMENT costume (#PCDATA)&gt;
        ///	&lt;!ATTLIST costume id ID #REQUIRED&gt;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Items {
            get {
                return ResourceManager.GetString("Items", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE colortable [
        ///	&lt;!ELEMENT colortable (color*)&gt;
        ///	&lt;!ELEMENT color EMPTY&gt;
        ///	&lt;!ATTLIST color name ID #REQUIRED rgb CDATA #REQUIRED cga CDATA #IMPLIED&gt;
        ///]&gt;
        ///&lt;colortable&gt;
        ///	&lt;!-- Skintones --&gt;
        ///	&lt;color name=&quot;Light&quot; rgb=&quot;246,225,214&quot; cga=&quot;15&quot; /&gt;
        ///	&lt;color name=&quot;Dark&quot; rgb=&quot;133,69,67&quot; cga=&quot;6&quot; /&gt;
        ///	&lt;color name=&quot;Ebony&quot; rgb=&quot;23,11,11&quot; cga=&quot;0&quot; /&gt;
        ///	&lt;color name=&quot;Pale&quot; rgb=&quot;246,245,224&quot; cga=&quot;15&quot; /&gt;
        ///
        ///	&lt;!-- Hair colors --&gt;
        ///	&lt;color name=&quot;Blond&quot; rgb=&quot;198,167,94&quot; cga=&quot;6&quot; /&gt;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KnownColors {
            get {
                return ResourceManager.GetString("KnownColors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;books.xsl&quot; ?&gt;
        ///&lt;!DOCTYPE library [
        ///	&lt;!ELEMENT library (book*)&gt;
        ///	&lt;!ELEMENT book (#PCDATA|p)*&gt;
        ///	&lt;!ELEMENT p (#PCDATA|br|b)*&gt;
        ///	&lt;!ELEMENT br EMPTY&gt;
        ///	&lt;!ELEMENT b (#PCDATA)&gt;
        ///	&lt;!ATTLIST book
        ///		id CDATA #REQUIRED
        ///		title CDATA #REQUIRED
        ///		author CDATA #IMPLIED
        ///	&gt;
        ///]&gt;
        ///&lt;library&gt;
        ///	&lt;book id=&quot;1&quot; title=&quot;The Lusty Argonian Maid I&quot; author=&quot;Crassius Curio&quot;&gt;
        ///		&lt;p&gt;
        ///			The Lusty Argonian Maid, Part I&lt;br /&gt;
        ///			Crassius Curio
        ///		&lt;/p&gt;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Library {
            get {
                return ResourceManager.GetString("Library", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE stuff [
        ///	&lt;!ELEMENT stuff (uniques)&gt;
        ///	&lt;!ELEMENT uniques (character+)&gt;
        ///	&lt;!ELEMENT script (#PCDATA)&gt;
        ///	&lt;!ATTLIST script language CDATA #FIXED &quot;text/noxicobotic&quot;&gt;
        ///	&lt;!ELEMENT character (#PCDATA|script)*&gt;
        ///	&lt;!ATTLIST character
        ///		id ID #REQUIRED
        ///		name CDATA #IMPLIED
        ///		proper (true|false) &quot;true&quot;
        ///		a CDATA #IMPLIED
        ///	&gt;
        ///]&gt;
        ///&lt;stuff&gt;
        ///	&lt;uniques&gt;
        ///		&lt;character id=&quot;Chelsie&quot; name=&quot;Chelsie&quot; proper=&quot;true&quot;&gt;
        ///			&lt;![CDATA[
        ///culture
        ///	japanese
        ///invisiblegender
        ///female [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Main {
            get {
                return ResourceManager.GetString("Main", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap MakeCave {
            get {
                object obj = ResourceManager.GetObject("MakeCave", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap MakeDemonRealm {
            get {
                object obj = ResourceManager.GetObject("MakeDemonRealm", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE music [
        ///	&lt;!ELEMENT music (set+)&gt;
        ///	&lt;!ELEMENT set (song+)&gt;
        ///	&lt;!ELEMENT song EMPTY&gt;
        ///	&lt;!ATTLIST set name ID #REQUIRED&gt;
        ///	&lt;!ATTLIST song href CDATA #REQUIRED&gt;
        ///]&gt;
        ///&lt;music&gt;
        ///	&lt;!-- Okay. To use these, I plan to have PlayMusic() or whatever I called it take &quot;set://&quot; as a parameter, and return the actual file chosen.
        ///	
        ///	That way, if a board is supposed to have a constant song, it can have its Music property changed.
        ///	That is, if the board&apos;s Music property is &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Music {
            get {
                return ResourceManager.GetString("Music", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;!DOCTYPE scenes [
        ///	&lt;!ELEMENT scenes (scene+)&gt;
        ///	&lt;!ELEMENT scene (filter*,(p|script)*,action*)&gt;
        ///	&lt;!ELEMENT filter EMPTY&gt;
        ///	&lt;!ELEMENT p (#PCDATA)&gt;
        ///	&lt;!ELEMENT script (#PCDATA)&gt;
        ///	&lt;!ELEMENT action EMPTY&gt;
        ///	&lt;!ATTLIST scene
        ///		id CDATA #REQUIRED
        ///		name CDATA #REQUIRED
        ///		list CDATA #IMPLIED
        ///	&gt;
        ///	&lt;!ATTLIST filter
        ///		target (top|bottom) #REQUIRED
        ///		type CDATA #REQUIRED
        ///		name CDATA #IMPLIED
        ///		value CDATA #IMPLIED
        ///	&gt;
        ///	&lt;!ATTLIST script type CDATA #FIXED &quot;text/noxico [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string scenesDlg {
            get {
                return ResourceManager.GetString("scenesDlg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;!DOCTYPE scenes [
        ///	&lt;!ELEMENT scenes (scene+)&gt;
        ///	&lt;!ELEMENT scene (filter*,(p|script)*,action*)&gt;
        ///	&lt;!ELEMENT filter EMPTY&gt;
        ///	&lt;!ELEMENT p (#PCDATA)&gt;
        ///	&lt;!ELEMENT script (#PCDATA)&gt;
        ///	&lt;!ELEMENT action EMPTY&gt;
        ///	&lt;!ATTLIST scene
        ///		id CDATA #REQUIRED
        ///		name CDATA #REQUIRED
        ///		list CDATA #IMPLIED
        ///	&gt;
        ///	&lt;!ATTLIST filter
        ///		target (top|bottom) #REQUIRED
        ///		type CDATA #REQUIRED
        ///		name CDATA #IMPLIED
        ///		value CDATA #IMPLIED
        ///	&gt;
        ///	&lt;!ATTLIST script type CDATA #FIXED &quot;text/noxicob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string scenesSex {
            get {
                return ResourceManager.GetString("scenesSex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;null&gt;:First entry, should never appear.
        ///cave wall:Rough hewn stone separates you from whatever is behind it.
        ///cave wall:Rough wooden paneling covers the cave walls, providing a hiding place for all sorts of bugs on one side, and something to hang things from on the other..
        /// </summary>
        internal static string TileSpecialDescriptions {
            get {
                return ResourceManager.GetString("TileSpecialDescriptions", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap TitleScreen {
            get {
                object obj = ResourceManager.GetObject("TitleScreen", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
