Content-Type: multipart/related; start=<op.mhtml.1325160395333.222b72236d5473c4@192.168.178.10>; boundary=----------RPkjCkfDWDAV4LCyfrdDEV
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php/Roguelike_Dev_FAQ
Subject: =?utf-8?Q?Roguelike=20Dev=20FAQ=20-=20RogueBasin?=
MIME-Version: 1.0

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=Roguelike_Dev_FAQ.htm
Content-Type: text/html; charset=UTF-8; name=Roguelike_Dev_FAQ.htm
Content-ID: <op.mhtml.1325160395333.222b72236d5473c4@192.168.178.10>
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php/Roguelike_Dev_FAQ
Content-Transfer-Encoding: 8bit

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" dir="ltr">
<head>
<title>Roguelike Dev FAQ - RogueBasin</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="generator" content="MediaWiki 1.16.5" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="RogueBasin (en)" />
<link rel="alternate" type="application/atom+xml" title="RogueBasin Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="/skins/common/shared.css?270" media="screen" />
<link rel="stylesheet" href="/skins/common/commonPrint.css?270" media="print" />
<link rel="stylesheet" href="/skins/monobook/main.css?270" media="screen" />
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?270" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?270" media="screen" /><![endif]-->
<link rel="stylesheet" href="/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" />
<link rel="stylesheet" href="/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" media="print" />
<link rel="stylesheet" href="/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" />
<link rel="stylesheet" href="/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css" />
<script>
var skin="monobook",
stylepath="/skins",
wgUrlProtocols="http\\:\\/\\/|https\\:\\/\\/|ftp\\:\\/\\/|irc\\:\\/\\/|gopher\\:\\/\\/|telnet\\:\\/\\/|nntp\\:\\/\\/|worldwind\\:\\/\\/|mailto\\:|news\\:|svn\\:\\/\\/",
wgArticlePath="/index.php/$1",
wgScriptPath="",
wgScriptExtension=".php",
wgScript="/index.php",
wgVariantArticlePath=false,
wgActionPaths={},
wgServer="http://roguebasin.roguelikedevelopment.org",
wgCanonicalNamespace="",
wgCanonicalSpecialPageName=false,
wgNamespaceNumber=0,
wgPageName="Roguelike_Dev_FAQ",
wgTitle="Roguelike Dev FAQ",
wgAction="view",
wgArticleId=1452,
wgIsArticle=true,
wgUserName=null,
wgUserGroups=null,
wgUserLanguage="en",
wgContentLanguage="en",
wgBreakFrames=false,
wgCurRevisionId=21721,
wgVersion="1.16.5",
wgEnableAPI=true,
wgEnableWriteAPI=true,
wgSeparatorTransformTable=["", ""],
wgDigitTransformTable=["", ""],
wgMainPageTitle="Main Page",
wgFormattedNamespaces={"-2": "Media", "-1": "Special", "0": "", "1": "Talk", "2": "User", "3": "User talk", "4": "RogueBasin", "5": "RogueBasin talk", "6": "File", "7": "File talk", "8": "MediaWiki", "9": "MediaWiki talk", "10": "Template", "11": "Template talk", "12": "Help", "13": "Help talk", "14": "Category", "15": "Category talk"},
wgNamespaceIds={"media": -2, "special": -1, "": 0, "talk": 1, "user": 2, "user_talk": 3, "roguebasin": 4, "roguebasin_talk": 5, "file": 6, "file_talk": 7, "mediawiki": 8, "mediawiki_talk": 9, "template": 10, "template_talk": 11, "help": 12, "help_talk": 13, "category": 14, "category_talk": 15, "image": 6, "image_talk": 7},
wgSiteName="RogueBasin",
wgCategories=["Articles"],
wgRestrictionEdit=[],
wgRestrictionMove=[];
</script><script src="/skins/common/wikibits.js?270"></script>
<script src="/skins/common/ajax.js?270"></script>
<script src="/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook&amp;270"></script>

</head>
<body class="mediawiki ltr ns-0 ns-subject page-Roguelike_Dev_FAQ skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content" >
	<a id="top"></a>
	
	<h1 id="firstHeading" class="firstHeading">Roguelike Dev FAQ</h1>
	<div id="bodyContent">
		<h3 id="siteSub">From RogueBasin</h3>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>
		<!-- start content -->
<pre>                     #                 #              ##           #
###         ##      ##    ##   ##    ###    ##    ##   #         ###
 ####     ## ##     #      #   ##   ##      ##     #   #  ###   ##
 #  ###  ##    ##  ## ##   #   ## ###       #      #   ####   ###
 # ##    ##   ##  ## #### ##   ## ######   ##      #   ##     #######
 ###      ## ##   ##   ##  ##  ##   ##     ##      #   ####    ###
 #  ##     ###      ####    #####     ##   ###     ##  ## ###    ##
##  ##      ##       ###      ##       #   ######  ##  ##  ##     ##
                                                                   ##
     ##          ###        ###        ###           ##             #
     ####       ##   ##    ##           ######      ###    ###
     ## ##     ##     ##   #            #    ##    ## #   ## ###
     ##  ##  #######  ##  ##            ###       ##  #  ##    #
     ##   ## ###       # ##             #####    #### #  ##   ##
     ## ###     ##     ###              ##      ##   ##   ## ##
     ####        ###   ###              ###    ##     ##   #####
     ##                                               ##       ###
     #                    Roguelike Dev FAQ                     ##
    #                         v. 0.0.3
</pre>
<p>By Damjan Jovanovic and many contributors on Roguebasin
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#GENERAL"><span class="tocnumber">1</span> <span class="toctext">GENERAL</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#What_is_Rogue.3F"><span class="tocnumber">1.1</span> <span class="toctext">What is Rogue?</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#What_is_a_roguelike.3F"><span class="tocnumber">1.2</span> <span class="toctext">What is a roguelike?</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#What_are_the_major_roguelikes_today.3F"><span class="tocnumber">1.3</span> <span class="toctext">What are the major roguelikes today?</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="#ADOM"><span class="tocnumber">1.3.1</span> <span class="toctext">ADOM</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#Moria"><span class="tocnumber">1.3.2</span> <span class="toctext">Moria</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#Angband"><span class="tocnumber">1.3.3</span> <span class="toctext">Angband</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#NetHack"><span class="tocnumber">1.3.4</span> <span class="toctext">NetHack</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#Dungeon_Crawl"><span class="tocnumber">1.3.5</span> <span class="toctext">Dungeon Crawl</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="#What_roguelike_websites_.2F_newsgroups_are_there.3F"><span class="tocnumber">1.4</span> <span class="toctext">What roguelike websites / newsgroups are there?</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#What_should_I_know_when_first_posting_to_r.g.r.d.3F"><span class="tocnumber">1.5</span> <span class="toctext">What should I know when first posting to r.g.r.d?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#GENERAL_DEVELOPMENT_QUESTIONS"><span class="tocnumber">2</span> <span class="toctext">GENERAL DEVELOPMENT QUESTIONS</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="#How_and_by_whom_are_roguelikes_generally_made.3F"><span class="tocnumber">2.1</span> <span class="toctext">How and by whom are roguelikes generally made?</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Which_programming_language_are_roguelikes_generally_made_in.3F"><span class="tocnumber">2.2</span> <span class="toctext">Which programming language are roguelikes generally made in?</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Do_you_have_to_know_programming_to_make_your_own_roguelike.3F"><span class="tocnumber">2.3</span> <span class="toctext">Do you have to know programming to make your own roguelike?</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#How_do_you_make_a_variant_to_a_roguelike.3F"><span class="tocnumber">2.4</span> <span class="toctext">How do you make a variant to a roguelike?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="#DESIGN_ISSUES"><span class="tocnumber">3</span> <span class="toctext">DESIGN ISSUES</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="#Do_you_have_to_design_a_roguelike_before_you_program_it.3F"><span class="tocnumber">3.1</span> <span class="toctext">Do you have to design a roguelike before you program it?</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Why_do_many_roguelikes_later_undergo_a_major_rewrite.3F"><span class="tocnumber">3.2</span> <span class="toctext">Why do many roguelikes later undergo a major rewrite?</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#What_needs_to_be_planned_in_advance.3F"><span class="tocnumber">3.3</span> <span class="toctext">What needs to be planned in advance?</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#What_do_people_like_about_roguelikes.3F"><span class="tocnumber">3.4</span> <span class="toctext">What do people like about roguelikes?</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#How_do_you_finish_making_your_roguelike.3F"><span class="tocnumber">3.5</span> <span class="toctext">How do you finish making your roguelike?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-23"><a href="#OUTPUT_AND_REPRESENTATION"><span class="tocnumber">4</span> <span class="toctext">OUTPUT AND REPRESENTATION</span></a>
<ul>
<li class="toclevel-2 tocsection-24"><a href="#Do_roguelikes_have_to_be_done_in_ASCII_text.3F"><span class="tocnumber">4.1</span> <span class="toctext">Do roguelikes have to be done in ASCII text?</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#How_do_you_add_graphics.3F"><span class="tocnumber">4.2</span> <span class="toctext">How do you add graphics?</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="#How_do_you_make_a_3D_roguelike.3F"><span class="tocnumber">4.3</span> <span class="toctext">How do you make a 3D roguelike?</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#Which_libraries_let_you_position_the_cursor_and_change_text_colours.3F"><span class="tocnumber">4.4</span> <span class="toctext">Which libraries let you position the cursor and change text colours?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="#STORY_AND_SETTING"><span class="tocnumber">5</span> <span class="toctext">STORY AND SETTING</span></a>
<ul>
<li class="toclevel-2 tocsection-29"><a href="#Which_stories_are_possible_for_a_roguelike.3F"><span class="tocnumber">5.1</span> <span class="toctext">Which stories are possible for a roguelike?</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="#What_themes_and_settings_are_possible_for_a_roguelike.3F"><span class="tocnumber">5.2</span> <span class="toctext">What themes and settings are possible for a roguelike?</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="#What_is_.2F_how_do_I_make_a_good_atmosphere.3F"><span class="tocnumber">5.3</span> <span class="toctext">What is / how do I make a good atmosphere?</span></a></li>
<li class="toclevel-2 tocsection-32"><a href="#What_are_quests_and_how_are_they_different_from_other_forms_of_plot.3F"><span class="tocnumber">5.4</span> <span class="toctext">What are quests and how are they different from other forms of plot?</span></a></li>
<li class="toclevel-2 tocsection-33"><a href="#What_are_the_standard_types_of_quests.3F"><span class="tocnumber">5.5</span> <span class="toctext">What are the standard types of quests?</span></a></li>
<li class="toclevel-2 tocsection-34"><a href="#How_do_I_make_good_quests.3F"><span class="tocnumber">5.6</span> <span class="toctext">How do I make good quests?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-35"><a href="#DUNGEON_MECHANICS"><span class="tocnumber">6</span> <span class="toctext">DUNGEON MECHANICS</span></a>
<ul>
<li class="toclevel-2 tocsection-36"><a href="#How_are_dungeons_represented.3F"><span class="tocnumber">6.1</span> <span class="toctext">How are dungeons represented?</span></a>
<ul>
<li class="toclevel-3 tocsection-37"><a href="#How_does_this_work.3F"><span class="tocnumber">6.1.1</span> <span class="toctext">How does this work?</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-38"><a href="#How_are_dungeons_generated.3F"><span class="tocnumber">6.2</span> <span class="toctext">How are dungeons generated?</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="#How_do_you_make_dungeons_with_a_theme.3F"><span class="tocnumber">6.3</span> <span class="toctext">How do you make dungeons with a theme?</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="#How_do_you_make_sure_all_your_rooms_and_passages_are_reachable.3F"><span class="tocnumber">6.4</span> <span class="toctext">How do you make sure all your rooms and passages are reachable?</span></a></li>
<li class="toclevel-2 tocsection-41"><a href="#How_do_you_make_a_town.3F"><span class="tocnumber">6.5</span> <span class="toctext">How do you make a town?</span></a></li>
<li class="toclevel-2 tocsection-42"><a href="#How_do_you_make_wilderness.3F"><span class="tocnumber">6.6</span> <span class="toctext">How do you make wilderness?</span></a></li>
<li class="toclevel-2 tocsection-43"><a href="#How_do_you_make_persistent_dungeons_.2F_worlds.3F"><span class="tocnumber">6.7</span> <span class="toctext">How do you make persistent dungeons / worlds?</span></a></li>
<li class="toclevel-2 tocsection-44"><a href="#How_do_you_store_a_really_BIG_world.3F"><span class="tocnumber">6.8</span> <span class="toctext">How do you store a really BIG world?</span></a></li>
<li class="toclevel-2 tocsection-45"><a href="#How_Should_I_Make_Random_Numbers.3F"><span class="tocnumber">6.9</span> <span class="toctext">How Should I Make Random Numbers?</span></a></li>
<li class="toclevel-2 tocsection-46"><a href="#How_do_you_deal_with_stuff_happening_far_from_the_player.3F"><span class="tocnumber">6.10</span> <span class="toctext">How do you deal with stuff happening far from the player?</span></a>
<ul>
<li class="toclevel-3 tocsection-47"><a href="#Monsters"><span class="tocnumber">6.10.1</span> <span class="toctext">Monsters</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-48"><a href="#What_is_LoS.2C_and_why_and_how_do_you_do_it.3F"><span class="tocnumber">6.11</span> <span class="toctext">What is LoS, and why and how do you do it?</span></a></li>
<li class="toclevel-2 tocsection-49"><a href="#How_do_you_store_the_list_of_all_the_items_in_the_game.3F"><span class="tocnumber">6.12</span> <span class="toctext">How do you store the list of all the items in the game?</span></a></li>
<li class="toclevel-2 tocsection-50"><a href="#How_do_you_store_the_items_in_the_player.27s_inventory.3F"><span class="tocnumber">6.13</span> <span class="toctext">How do you store the items in the player's inventory?</span></a></li>
<li class="toclevel-2 tocsection-51"><a href="#How_do_you_make_randomly_generated_items.3F"><span class="tocnumber">6.14</span> <span class="toctext">How do you make randomly generated items?</span></a></li>
<li class="toclevel-2 tocsection-52"><a href="#Which_kinds_of_monsters_should_I_use_in_my_roguelike.3F"><span class="tocnumber">6.15</span> <span class="toctext">Which kinds of monsters should I use in my roguelike?</span></a></li>
<li class="toclevel-2 tocsection-53"><a href="#How_do_you_create_a_monster_AI.3F"><span class="tocnumber">6.16</span> <span class="toctext">How do you create a monster AI?</span></a></li>
<li class="toclevel-2 tocsection-54"><a href="#How_do_you_create_a_good_monster_AI.3F"><span class="tocnumber">6.17</span> <span class="toctext">How do you create a good monster AI?</span></a></li>
<li class="toclevel-2 tocsection-55"><a href="#How_do_they_find_.2F_follow_the_player.3F"><span class="tocnumber">6.18</span> <span class="toctext">How do they find / follow the player?</span></a></li>
<li class="toclevel-2 tocsection-56"><a href="#How_do_you_add_variety_to_your_monsters.3F"><span class="tocnumber">6.19</span> <span class="toctext">How do you add variety to your monsters?</span></a></li>
<li class="toclevel-2 tocsection-57"><a href="#How_do_you_make_your_battle_system.3F"><span class="tocnumber">6.20</span> <span class="toctext">How do you make your battle system?</span></a></li>
<li class="toclevel-2 tocsection-58"><a href="#How_do_you_represent.2C_store_and_process_monsters.3F"><span class="tocnumber">6.21</span> <span class="toctext">How do you represent, store and process monsters?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-59"><a href="#SPELLS"><span class="tocnumber">7</span> <span class="toctext">SPELLS</span></a>
<ul>
<li class="toclevel-2 tocsection-60"><a href="#How_do_you_represent_a_magic_system.3F"><span class="tocnumber">7.1</span> <span class="toctext">How do you represent a magic system?</span></a></li>
<li class="toclevel-2 tocsection-61"><a href="#What_is_a_good_magic_system_to_use.3F"><span class="tocnumber">7.2</span> <span class="toctext">What is a good magic system to use?</span></a></li>
<li class="toclevel-2 tocsection-62"><a href="#How_do_you_enchant_objects_or_make_.22enchanted.22_objects.3F"><span class="tocnumber">7.3</span> <span class="toctext">How do you enchant objects or make "enchanted" objects?</span></a></li>
<li class="toclevel-2 tocsection-63"><a href="#How_do_you_make_random_spells.3F"><span class="tocnumber">7.4</span> <span class="toctext">How do you make random spells?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-64"><a href="#Can_you_make_any_money_from_your_roguelike.3F"><span class="tocnumber">8</span> <span class="toctext">Can you make any money from your roguelike?</span></a></li>
<li class="toclevel-1 tocsection-65"><a href="#Contributors"><span class="tocnumber">9</span> <span class="toctext">Contributors</span></a></li>
</ul>
</td></tr></table><script>if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<h2> <span class="mw-headline" id="GENERAL"> GENERAL </span></h2>
<h3> <span class="mw-headline" id="What_is_Rogue.3F"> What is Rogue? </span></h3>
<p><a href="/index.php/Rogue" title="Rogue">Rogue</a> is a text-based game made in the 1970s that started it all. You explored a dungeon, gathering items, fighting monsters and getting stronger. There was initially no point to this all, but eventually they made it so the main quest was to find the Amulet of Yendor.
</p><p>What separated Rogue from most similar text-based games of its time was how it handled the output. Most adventure games described the environment (e.g. "You are in a small room, with a passage out behind you"); Rogue "drew" it using text. For instance, if you were standing in the room described above, this is how it would look (the "@" being you):
</p>
<pre>-----
|...|
|.@.+#####
|...|
|...|
-----
</pre>
<p>Back at the time, PCs were virtually unheard of, and most computers were just dumb terminals connected to a mainframe, with no graphics. Drawing with text was a big novelty. Rogue was incredibly addictive in its time. It was eventually distributed with UNIX.
</p>
<h3> <span class="mw-headline" id="What_is_a_roguelike.3F"> What is a roguelike? </span></h3>
<p>This is a topic that has caused vehement debates in the <a href="/index.php/Rgrd" title="Rgrd">rec.games.roguelike.development</a> newsgroup. I will just explain it as simply as possible.
</p><p>Let's see about the features of rogue:
</p>
<ul><li> Single player
</li><li> <a href="/index.php/ASCII" title="ASCII">Text based</a>
</li><li> <a href="/index.php/Random" title="Random" class="mw-redirect">Randomly</a> generated <a href="/index.php/Dungeon" title="Dungeon">dungeon</a> levels
</li><li> Turn based (i.e. nothing happens until you press a key that does something)
</li><li> The emphasis is on good gameplay rather than good graphics
</li><li> <a href="/index.php/Permadeath" title="Permadeath">Death is permanent</a>. No loading saved games, no coming back to life. Once you die, you can only start from the beginning with a new character.
</li></ul>
<p>Firstly, you have to realise that games are not as easy to classify into genres as books or films are. There are a lot of games that don't belong into any one genre. Purists may argue that any game that is graphical and real-time (as opposed to turn-based) cannot be a roguelike, but not everyone agrees.
</p><p>There is some overlap between roguelikes and role-playing games, adventure games, and so on.
</p><p>Briefly then, "roguelike" is more of a feeling you get in a game rather than a set of criteria that have to be followed. Just to make things more confusing, here are some more things that can be found in modern roguelikes:
</p>
<ul><li> "Dungeons and dragons" style of skills
</li><li> The maker is usually 1 person. The more popular games have "dev teams" which work on them later
</li><li> <a href="/index.php/Magic" title="Magic">Magic</a> systems usually implemented
</li><li> Usually set in <a href="/index.php/Fantasy" title="Fantasy" class="mw-redirect">fantasy</a> middle ages (exceptions exist; sci-fi roguelikes do exist, see <a href="/index.php/Theme" title="Theme" class="mw-redirect">Theme</a>)
</li></ul>
<h3> <span class="mw-headline" id="What_are_the_major_roguelikes_today.3F"> What are the major roguelikes today? </span></h3>
<h4> <span class="mw-headline" id="ADOM"> <a href="/index.php/ADOM" title="ADOM">ADOM</a> </span></h4>
<p><b>Website:</b> <a href="http://www.adom.de/" class="external free" rel="nofollow">http://www.adom.de/</a>
</p><p>ADOM is Thomas Biskup's one-man effort. Inspired by the D&amp;D
universe, ADOM is a fantasy romp with a quaintly humorous mood. It has
a handmade overworld map called the Drakalor Chain. It's player's job
to track down the source of Chaos overtaking the land. The closer the
player gets to the source, the more tainted with Chaos he becomes.
</p>
<h4> <span class="mw-headline" id="Moria"> <a href="/index.php/Moria" title="Moria">Moria</a> </span></h4>
<p>"Mines of Moria" or just "Moria" is around. It is loosely set in
Tolkien's mines of Moria in "Lord of the Rings". It is not being
developed any more; only "maintained".
</p>
<h4> <span class="mw-headline" id="Angband"> <a href="/index.php/Angband" title="Angband">Angband</a> </span></h4>
<p><b>Website:</b> <a href="http://rephial.org/" class="external free" rel="nofollow">http://rephial.org/</a>
</p><p>"Angband", is a newer roguelike based on Moria but even more loosely
based on "Lord of the Rings". There are probably more variants to this
one than to any other roguelike. The variants often used entirely
different monsters and goals; not all of them involve Tolkien's works.
</p>
<h4> <span class="mw-headline" id="NetHack"> <a href="/index.php/NetHack" title="NetHack">NetHack</a> </span></h4>
<p><b>Website:</b> <a href="http://www.nethack.org/" class="external free" rel="nofollow">http://www.nethack.org/</a>
</p><p>NetHack is the modern roguelike which is the most direct descendant of
the original Rogue. NetHack offers a very varied and sometimes
whimsical playing experience; a favourite saying amongst players is
that the DevTeam "have thought of everything". The focus of the game
is relatively narrow - there's no town or wilderness, but just a
single dungeon to get down to the bottom of and retrieve the Amulet of
Yendor from - however, individual levels are more varied than is
typical of many roguelikes. The game is relatively short; it's
possible to win in 8 hours of play if you put your mind to it - partly
because the dungeon levels are static during the game, so unlike in
other games you have little choice but to press on past explored
levels deeper into the dungeon.
</p>
<h4> <span class="mw-headline" id="Dungeon_Crawl"> <a href="/index.php/Dungeon_Crawl" title="Dungeon Crawl" class="mw-redirect">Dungeon Crawl</a> </span></h4>
<p><b>Website:</b> <a href="http://www.dungeoncrawl.org/" class="external free" rel="nofollow">http://www.dungeoncrawl.org/</a>
</p><p><b>Dungeon Crawl Stone Soup</b> <a href="http://crawl-ref.sourceforge.net/" class="external free" rel="nofollow">http://crawl-ref.sourceforge.net/</a>
</p>
<h3> <span class="mw-headline" id="What_roguelike_websites_.2F_newsgroups_are_there.3F"> What roguelike websites / newsgroups are there? </span></h3>
<dl><dt> rec.games.roguelike.angband&nbsp;</dt><dd> Discusses the roguelike Angband and its variants.
</dd></dl>
<dl><dt> rec.games.roguelike.nethack&nbsp;</dt><dd> Discusses the roguelike NetHack and its variants.
</dd></dl>
<dl><dt> rec.games.roguelike.adom&nbsp;</dt><dd> Discusses the roguelike ADOM.
</dd></dl>
<dl><dt> rec.games.roguelike.misc&nbsp;</dt><dd> Discusses all roguelikes which don't have a newsgroup of their own yet.
</dd></dl>
<dl><dt> <a href="/index.php/Rgrd" title="Rgrd">rec.games.roguelike.development</a>&nbsp;</dt><dd> Discusses all topics which are related to the development of roguelikes.
</dd></dl>
<dl><dt> rec.games.roguelike.announce&nbsp;</dt><dd> A moderated group for announcements about roguelikes.
</dd></dl>
<dl><dt> rec.games.roguelike.moria&nbsp;</dt><dd> Discusses the roguelike Moria, parent of Angband. This newsgroup is almost dead.
</dd></dl>
<dl><dt> rec.games.roguelike.rogue&nbsp;</dt><dd> Discusses the original roguelike, Rogue. This newsgroup is almost dead.
</dd></dl>
<dl><dt> alt.games.omega&nbsp;</dt><dd> Discusses the roguelike Omega. Activity is rare. Development discussion has a Yahoo group.
</dd></dl>
<p>Useful resources for roguelikes are Dungeon Dweller: <a href="http://roguelikedevelopment.org" class="external free" rel="nofollow">http://roguelikedevelopment.org</a> and the RogueBasin: <a href="http://roguebasin.roguelikedevelopment.org" class="external free" rel="nofollow">http://roguebasin.roguelikedevelopment.org</a>
</p>
<h3> <span class="mw-headline" id="What_should_I_know_when_first_posting_to_r.g.r.d.3F"> What should I know when first posting to r.g.r.d? </span></h3>
<p>Some places are more newbie-friendly than others. The developers at
rec.games.roguelike.development may sometimes show little patience with
questions that have been asked many times before. Here are two simple things
you can do to ensure that you get off to a good start:
</p>
<ul><li> Do some research before you ask a question. If the answer is available via a search engine, why ask here? If the research does not turn up a satisfactory answer, then by all means ask, and you will be able to ask a better, more focused question as a result of your earlier work. Demonstrate that you have some initiative, and you will get a much more helpful response. As well as searching the web in general, search r.g.r.d.
</li></ul>
<ul><li> Don't ask what the best programming language for a roguelike is, or if a particular language is suitable for roguelike programming. If you want to know why, search r.g.r.d via Google Groups for "best programming language" and you will find many flamewars sparked by that question and its variants. The topic has been done to death, and many developers are tired of it.
</li></ul>
<h2> <span class="mw-headline" id="GENERAL_DEVELOPMENT_QUESTIONS"> GENERAL DEVELOPMENT QUESTIONS </span></h2>
<h3> <span class="mw-headline" id="How_and_by_whom_are_roguelikes_generally_made.3F"> How and by whom are roguelikes generally made? </span></h3>
<p>By a selection of people from all over the world, with too much free time on their hands =). People looking to learn a programming language, people who play games for a while and end up wanting to make it their way, people who want to make a game by themselves and have no artistic talent (if you're going to use text at least =).
</p><p>Usually by people learning computer programming; originally it was students of computer science or similar courses at college or university. Of course, anyone who wants to can make them.
</p>
<h3> <span class="mw-headline" id="Which_programming_language_are_roguelikes_generally_made_in.3F"> Which programming language are roguelikes generally made in? </span></h3>
<p>Traditionally, <a href="/index.php/C" title="C">C</a>, because of its portability and because other programming languages weren't available at the time. Nowadays, a variety: <a href="/index.php/Java" title="Java">Java</a>, <a href="/index.php/Cpp" title="Cpp" class="mw-redirect">C++</a>, <a href="/index.php/Pascal" title="Pascal">Pascal</a>, scripting languages etc. The best language for your roguelike is the one you know well.
</p>
<h3> <span class="mw-headline" id="Do_you_have_to_know_programming_to_make_your_own_roguelike.3F"> Do you have to know programming to make your own roguelike? </span></h3>
<p>Yes. There is no other way. Read books. Read articles and tutorials on the Internet. Look at lots of source code. Most of all, get yourself a compiler (most are available for free on the Internet) and practise. A lot.
</p><p>From here on onwards, this FAQ will assume the reader of this FAQ is familiar and fairly proficient with computer programming and related concepts.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_a_variant_to_a_roguelike.3F"> How do you make a variant to a roguelike? </span></h3>
<p>Firstly, a variant is a roguelike based on the source code of another roguelike, with some changes.
</p><p>Making a variant isn't easy for several reasons. Most roguelike sources I've looked at are VERY badly written; lots of poor programming techniques, hacks (more than 1600 in Angband), lack of comments, difficult to understand variable and function names, and so
on. However, making a variant is much easier than starting from the beginning by yourself.
</p><p>Firstly, make sure that it is allowed for the particular roguelike you are interested in, and that you aren't breaking any law by making this variant. You will most likely need to change the name of the game, to comment every source file you change with something like "Changed by on ", and log the changes you make to the history file.
</p><p>Secondly, play the game A LOT. Decide what exactly you would like to change. Make a list of things to change. Then obtain a copy of the source code, and see which compilers will compile it. Get one of those. Compile the game without changing anything. If it doesn't
compile, get it to compile before changing anything.
</p><p>Then go through the source files. Find the section you want to change. Make small changes first, then recompile and see what happens. Then make progressively bigger changes until you have what you wanted.
</p><p>Variants usually never reach the fame and glory of the original game, but they are a good way to learn about how roguelikes work, and making them is usually easier and faster than starting from the beginning.
</p>
<h2> <span class="mw-headline" id="DESIGN_ISSUES"> DESIGN ISSUES </span></h2>
<h3> <span class="mw-headline" id="Do_you_have_to_design_a_roguelike_before_you_program_it.3F"> Do you have to design a roguelike before you program it? </span></h3>
<p>Typically, roguelikes are written without much design or planning. Once the programming is complete, you decide what you can do with your program (e.g. what items/monsters/spells you can support) and go ahead and make those. Some people believe this is still the way to do
things.
</p><p>Others believe differently. If you ever do a course in computer programming at school, college or university, the first thing they teach you is how to make an algorithm, how to plan your program, and how to design before you start programming. For some kinds of commercial games, the designers make a 300 page design brief before the artists or the programmers even start work! Games that rely intensively on story usually have a complete play script written before the design brief. Of course, most roguelikes are free, and nowhere near this amount of work is invested in them, so this amount of design is ridiculous. But note that most roguelikes in development have a design document on their web pages.
</p><p>I believe that planning is essential to any program, particularly a big one like a roguelike. Before you start programming (at least, programming anything big or particular), make a list of things you want in the game. What kinds of items do you want? Spells? Monsters? How will your game world look? You don't have to plan the particulars like the colour of your orcs or the exact number of your spells; just look at general categories (e.g. "some of my monsters will use spells on the player", "there will be plants growing in the wilderness that you can eat" and so on), and then decide how you are going to implement those things.
</p><p>Often when you start to make a roguelike game, you won't even know what the design issues are.  You can spend a lot of sweat trying to figure out in advance how you're going to use each data structure and selecting data structures that efficiently support that use, but then, once you're actually in the middle of it, you'll find 
things you haven't allowed for, and which you cannot accommodate within your current design.  So yes, do spend time planning your program.  But be aware that actually coding it and playing it is your only real way of becoming intimately familiar with the design space and the problems your design needs to solve.  Once you have this familiarity, you can do a much better job of planning.
</p>
<h3> <span class="mw-headline" id="Why_do_many_roguelikes_later_undergo_a_major_rewrite.3F"> Why do many roguelikes later undergo a major rewrite? </span></h3>
<ul><li> <b>Poor design</b>. If you planned enough from the beginning, you would cater for everything, or at least most of the things, that you want to implement. Then you might only need a small rewrite.
</li></ul>
<ul><li> <b>Change of maintainer</b>. Most popular roguelikes go through long chains of maintainers and dev teams. As soon as one guy gets the source code, the first thing he does is rewrite it so that it fits his ideas.
</li></ul>
<ul><li> <b>Poor programming techniques</b>. I would say most of the rewrites are there to fix bugs. Some programming languages are better structured and better suited for use for long programs like roguelikes. It has been shown that when your code exceeds 100000 lines, the cost of maintaining it and debugging it exceeds the cost of programming new things. Object Oriented programming, functions and splitting up into files help to reduce this problem.
</li></ul>
<ul><li> The developer has gained knowledge about designing roguelikes from the initial effort and has undertaken a rewrite in order to put it to use. 
</li></ul>
<ul><li> When the developer decides to extend the game in an unanticipated way it often requires fundamental redesign.  For example, an extension like having spells take effect after some delay may require a complete redesign and rewrite of the scheduling system.
</li></ul>
<h3> <span class="mw-headline" id="What_needs_to_be_planned_in_advance.3F"> What needs to be planned in advance? </span></h3>
<ul><li> The <a href="/index.php/Plot" title="Plot">story</a>, <a href="/index.php/Theme" title="Theme" class="mw-redirect">theme</a> and setting. These determine practically everything.
</li><li> The <a href="/index.php?title=World&amp;action=edit&amp;redlink=1" class="new" title="World (page does not exist)">world</a>. How it will look. How big it will be.
</li><li> The <a href="/index.php/Terrain" title="Terrain">terrain</a> (e.g. town, wilderness, dungeons, special places...)
</li><li> The <a href="/index.php?title=Scheduling_system&amp;action=edit&amp;redlink=1" class="new" title="Scheduling system (page does not exist)">Scheduling system</a> (eg, how turns and speed work, whether and how actions can be interrupted by other actions, etc).
</li><li> The <a href="/index.php/Items" title="Items">items</a>. Major categories (e.g. weapons, armour, potions, scrolls, food...). Leave detail (e.g. how much the minor healing potion heals you by) for later. Think about how the items will be used and by whom. Plan the basic rules (e.g. you can only wield 2 weapons if you are a fighter, you need space for arrows if you equip a bow, how many rings can someone wear, etc).
</li><li> The <a href="/index.php/Magic" title="Magic">magic</a> system. Spell types. Who uses spells and when. How you learn spells. What they cost. Which classes can use them. How to implement permanent spells (e.g. enchantments that last, like recharging a staff).
</li><li> <a href="/index.php?title=Shopping&amp;action=edit&amp;redlink=1" class="new" title="Shopping (page does not exist)">Shopping</a>.  If your game will have shops, how will they work?  Will the Player be able to rob them?  If so how does that work?
</li><li> <a href="/index.php?title=Interaction_with_other_creatures&amp;action=edit&amp;redlink=1" class="new" title="Interaction with other creatures (page does not exist)">Interaction with other creatures</a> (maybe negotiating your way out of battles?). 
</li><li> <a href="/index.php?title=Saving_and_restoring_games&amp;action=edit&amp;redlink=1" class="new" title="Saving and restoring games (page does not exist)">Saving and restoring games</a> Level loading system. 
</li><li> <a href="/index.php?title=Win_Conditions&amp;action=edit&amp;redlink=1" class="new" title="Win Conditions (page does not exist)">Win Conditions</a> How to finish the game and what happens when you do.
</li></ul>
<h3> <span class="mw-headline" id="What_do_people_like_about_roguelikes.3F"> What do people like about roguelikes? </span></h3>
<p>Replayability - If the game is <a href="/index.php/Random" title="Random" class="mw-redirect">random</a> enough, it is always fun to play
and replay, because every time it is like a different game.
</p><p>Freedom - There is a lot of it. You can kill just about anything. There
are a lot of actions you can take. Many strategies.
</p><p>Complexity - There are a lot of items, skills, classes, areas, spells.
</p><p>Difficulty - While this can be off-putting, it gives you a tremendous
sense of achievement to finish a roguelike or even to get far. You
always have to be careful, because it is easy to die.
</p><p>How do you make people like your roguelike? Make it easy to get into
and play; no reading through 50 page files to learn how to play. Keep
the controls simple. The gameplay must be good. This generally
distinguishes roguelikes from other games - the emphasis is on the
gameplay. Once your character dies, that's it - no coming back to life
(or maybe you are reincarnated back without items and with reduced
skills). This makes the game exciting when you are in danger. Keep it
balanced. If it gets too difficult, people are discouraged. If it is
too easy, there isn't much fun in it. Make a big world, with plenty of different
items and monsters so it is interesting to explore. Make an
interesting story. And, most of all, don't make it like some or other
roguelike that already exists. Use fresh, new ideas. Make it original
and different.
</p>
<h3> <span class="mw-headline" id="How_do_you_finish_making_your_roguelike.3F"> How do you finish making your roguelike? </span></h3>
<p>Basically, have a plan. Decide in which order to program it, and stick
to the plan as much as possible. Keep it fun for yourself. If you get
bored, work on another aspect. If you are bored on programming, work
on the story, or on the graphics (if you use them). Take a break. It
should be fun. If it isn't, ask yourself why, and do something about
it. If you are stuck, get other people to help you.
</p>
<h2> <span class="mw-headline" id="OUTPUT_AND_REPRESENTATION"> OUTPUT AND REPRESENTATION </span></h2>
<h3> <span class="mw-headline" id="Do_roguelikes_have_to_be_done_in_ASCII_text.3F"> Do roguelikes have to be done in <a href="/index.php/ASCII" title="ASCII">ASCII</a> text? </span></h3>
<p>That depends. <a href="/index.php/Utumno" title="Utumno">Utumno</a> is an <a href="/index.php/Angband" title="Angband">Angband</a> variant (according to the Angband
variants FAQ, and I doubt the writers of it don't know what a
roguelike is), and when people want to argue that things with graphics
can't be roguelike, I always quote it as an example of a roguelike
with graphics. Now compare Utumno and <a href="/index.php/Diablo" title="Diablo">Diablo</a> or Diablo 2. You will
notice they are not that different (graphically).
</p><p>So roguelikes don't have to have to be in ASCII text, although a significant majority of them are. This is because:
</p>
<ul><li> Text is very portable.
</li><li> It's traditional. Most people programming roguelikes come from a tradition of playing other roguelikes, and they are done the same way.
</li><li> It's fast. A museum style computer can probably show text at the same speed as the latest one.
</li><li> It's quick and easy to make. You don't have to have lots of artist friends to draw for you. You don't have to spend hours modeling.
</li><li> Letters are very readable, even when they are small --- they were designed for just that. They are more readable than (most) graphical tiles, especially isometric ones. Real 3D models successfully compete with letters, but only if the dungeon view can be freely rotated, tilted and zoomed.
</li></ul>
<h3> <span class="mw-headline" id="How_do_you_add_graphics.3F"> How do you add graphics? </span></h3>
<p>There are several different graphical systems you might consider.
</p><p>The simplest and most often used method is with square tiles.
Basically, instead of filling rows and columns of the screen with
text, they are filled with small bitmap pictures. No animation is
used, i.e. when you hit a monster, you don't see a swinging sword. You
can make an animation system, but it will get difficult. To properly
animate a character, you need pictures of every single action from at
least 4 different position (facing front, back, right and left) and
the sizes of your picture / animation files get big very quickly. To
produce smooth animations, you need even more pictures... It is
obvious why Angband and NetHack use only front facing pictures with no
animation.
</p><p>The other method uses isometric tiles. These are like square tiles
rotated 45 degrees, like they are seen from above and to the side.
Just look at Utumno or Diablo to see what I mean. They are harder to
program and to make, but they look better. Here you run into an even
bigger problem if you want to implement animation - you really need 8
different direction (up, up-right, right, down-right, down, down-left,
left and up-left) to face in, and you need every frame of every action
in each of those directions. Nevertheless, Utumno, Falcon's eye and
Diablo all use this.
</p><p>Then there is 3D graphics...
</p>
<h3> <span class="mw-headline" id="How_do_you_make_a_3D_roguelike.3F"> How do you make a 3D roguelike? </span></h3>
<p>There is only one game so far that uses this: <a href="/index.php/Egoboo" title="Egoboo">Egoboo</a>
(<a href="http://egoboo.sourceforge.net" class="external free" rel="nofollow">http://egoboo.sourceforge.net</a> ). Even <a href="/index.php/Diablo" title="Diablo">Diablo</a> and Diablo 2, although
they look 3D, are really only 2D. All the monsters and characters for
Diablo 2 were modeled in a 3D package, and snapshots were taken in
different positions and at different times to create the animations.
So good luck making one of the world's only 3D roguelikes.
</p><p>But here are some ideas. A good cross-platform 3D library is <a href="/index.php/OpenGL" title="OpenGL">OpenGL</a>.
You generally program it in C or C++. It is easy to learn, but
requires hardware 3D acceleration for good performance. Good free
modeling / animation software is difficult to come by. Try Blender
and Anim8or.
</p><p>In a way, designing monsters / characters in 3D is easier than in 2D,
because you don't need to draw actions from all directions; only from
one, then you can rotate them by any angle you like. Also, you don't
need to draw every frame of an animation, just the key frames, and your
software calculates the rest.
</p><p>However, the mathematics of 3D is difficult, and includes linear
algebra, vectors, matrices, quarternions, geometry and trigonometry.
</p>
<h3> <span class="mw-headline" id="Which_libraries_let_you_position_the_cursor_and_change_text_colours.3F"> Which libraries let you position the cursor and change text colours? </span></h3>
<p>Most programming languages come with a library of their own. In C and
C++, you can use conio.h. This is DOS specific, however, and not
portable to other systems. 
</p><p>The <a href="/index.php/Curses_library" title="Curses library"> curses libraries</a> are a better choice.  <a href="/index.php/Ncurses" title="Ncurses">Ncurses</a> is the standard on <a href="/index.php/Linux" title="Linux">Linux</a>, <a href="/index.php/Mac_OS_X" title="Mac OS X">Mac OS X</a> and most <a href="/index.php/Unix" title="Unix"> UNIX</a>/UNIX-like systems.   On <a href="/index.php/Windows" title="Windows">Windows</a> <a href="/index.php/PDCurses" title="PDCurses">PDCurses</a> works better than ncurses.
</p><p>The article <a href="/index.php/Output_libraries" title="Output libraries">Output libraries</a> discusses this in more detail.
</p><p>One solution for Java is a <a href="/index.php/Java_Curses_Implementation" title="Java Curses Implementation">Java Curses Implementation</a>.
</p>
<h2> <span class="mw-headline" id="STORY_AND_SETTING"> STORY AND SETTING </span></h2>
<h3> <span class="mw-headline" id="Which_stories_are_possible_for_a_roguelike.3F"> Which stories are possible for a roguelike? </span></h3>
<p><a href="/index.php/Moria" title="Moria">Moria</a> and <a href="/index.php/Angband" title="Angband">Angband</a> are (loosely) based on J.R.R. Tolkien's "Lord of the
rings", but the except for a few characters, items and monster types
taken from Tolkien's work, they implement very little story. NetHack
hardly has any story (except for a one-liner you get at the beginning,
like "You are looking for the Amulet of Yendor, a legendary artifact
which grants immortality to the wearer").
</p><p>In general, role playing games are the ones where story is important.
For a roguelike, it is nice to have a story, and a good one will keep
your player interested and provide more to the game, but it isn't the
game's biggest component.
</p><p>Good ideas are:
</p>
<ul><li> You are trapped in a virtual reality world, where the computer has gone mad, and is making monsters, which can kill you. The goal is to stay alive and find a way out.
</li></ul>
<ul><li> You are in a post-apocalyptic future (no guns; or very few of them with limited ammunition). There is a war between humans and robots. You are on the losing side...
</li></ul>
<h3> <span class="mw-headline" id="What_themes_and_settings_are_possible_for_a_roguelike.3F"> What <a href="/index.php/Theme" title="Theme" class="mw-redirect">themes</a> and settings are possible for a roguelike? </span></h3>
<p>Ones that involve killing a great number of enemies.
</p><p>Most roguelikes are set in the middle ages. There are ones in a science fiction setting in the future, but they aren't very popular.
</p><p>Relatively unexplored themes are:
</p>
<ul><li> The Wild West
</li><li> The Far East
</li><li> The distant past (stone ages)
</li><li> Alternative histories (e.g. Atlantis)
</li><li> The modern era
</li><li> Science fiction settings
</li></ul>
<h3> <span class="mw-headline" id="What_is_.2F_how_do_I_make_a_good_atmosphere.3F"> What is / how do I make a good atmosphere? </span></h3>
<p>Atmosphere, (noun): the psychological environment, the feeling and
tone created by something. The atmosphere in roguelikes varies. In
Angband it is often dark and desperate, because you're kilometers under the
earth with a failing source of light, near death and with no way to
escape your foes. In <a href="/index.php/NetHack" title="NetHack">NetHack</a>, it is quite challenging but somewhat
humorous. In <a href="/index.php/Diablo" title="Diablo">Diablo</a>, it can be very dark and ominous - your cause is
basically hopeless.
</p><p>Another way to create atmosphere is music, although it can be
difficult to port. Example roguelikes that use music are <a href="/index.php/DoomRL" title="DoomRL">DoomRL</a>
and <a href="/index.php/DrashRL" title="DrashRL" class="mw-redirect">DrashRL</a>. If the roguelike has a graphical output, the
images can be used to create atmosphere. The story also goes a long
way towards creating an atmosphere.
</p><p>Often a change in game mechanics can change the atmosphere substantially. 
If the character heals swiftly during play, and the game feels like a 
silly romp no matter what else you've tried, cutting the rate of healing 
to a tenth or less of what it has been can suddenly make the mood deadly 
serious and addictively engaging.
</p>
<h3> <span class="mw-headline" id="What_are_quests_and_how_are_they_different_from_other_forms_of_plot.3F"> What are quests and how are they different from other forms of plot? </span></h3>
<p>A <a href="/index.php/Quests" title="Quests">quest</a> is a set of actions you have to do in order for something to
happen. For instance, once you've completed the quest "kill Morgoth",
you've finished Angband. Quests have some sort of reward, or story
element with them.  Most roguelike games are based on one primary quest which 
must be completed to win.  Although the value of secondary quests is debated, 
many have additional quests during the game, which players undertake for score, 
for equipment, or for sheer style. 
</p>
<h3> <span class="mw-headline" id="What_are_the_standard_types_of_quests.3F"> What are the standard types of quests? </span></h3>
<ul><li> Assassination quests:
<ul><li> "Kill X"
</li><li> "Capture X alive"
</li></ul>
</li><li> Searching quests:
<ul><li> "Find X"
</li><li> "Get to X"
</li><li> "Gather X of gold"
</li></ul>
</li><li> Competition quests:
<ul><li> Do any of the above quests, but before your adversary (e.g. get to a town before your adversary)
</li></ul>
</li><li> Story quests:
<ul><li> "Talk to X"
</li></ul>
</li><li> Any of the above, but they do something special (e.g. there is a story associated with finding a special item)
</li></ul>
<h3> <span class="mw-headline" id="How_do_I_make_good_quests.3F"> How do I make good quests? </span></h3>
<p>Make them relevant and provide a good reason to do them. Integrate them with the story. Give good rewards. Avoid repetition.
</p><p><b>Example</b>: Avoid quests like "kill 5 orcs", because they have no reason or emotional connection. It would be better to say the orcs have been killing members of the player's village and the remaining people are pleading for help. Then the player is given a logical reason to kill the orcs and will be more likely to want to complete the quest.
</p><p>To add to replayability, elements of the quests could be randomised.
</p>
<h2> <span class="mw-headline" id="DUNGEON_MECHANICS"> <a href="/index.php/DUNGEON" title="DUNGEON" class="mw-redirect">DUNGEON</a> MECHANICS </span></h2>
<h3> <span class="mw-headline" id="How_are_dungeons_represented.3F"> How are dungeons represented? </span></h3>
<p>This is a question worthy of a long article or maybe even a small
book. Nevertheless, you can get the basics from this FAQ.
</p><p>This FAQ only discusses traditional systems, i.e. simple 2D tile-based
dungeons. If you're making something different (e.g. a 3D roguelike)
you can still use this, though.
</p><p>Firstly, dungeons are made of rows and columns of tiles. If you plan
to have variable sized dungeons, use dynamic arrays instead of the
usual static kind.
</p><p>The tiles store:
</p>
<ul><li> The type of tile (e.g. wall, grass, floor, river)
</li><li> The properties of the tile (Can you walk through it? Is it illuminated? Has it been explored by the player?)
</li><li> A list of items on the tile
</li><li> The monster on the tile
</li><li> Any other data (e.g. a trap, a hole in the floor, stairs)
</li></ul>
<p>You should keep your tiles as small as possible. Angband has around 16
bytes per tile. Don't go much further than that; you'll see why in a
moment.
</p>
<h4> <span class="mw-headline" id="How_does_this_work.3F"> How does this work? </span></h4>
<p>The type of tile is a small variable (typically a single byte) that determines
what the tile is. The type determines what is drawn - if you are on a
river, you draw a blue letter or graphic. A fast way to do this is to
store an array of the letter / colours / graphics of all the types,
and just substitute the type into this array to determine what to
draw.
</p><p>The properties should be set per-bit; use bit fields or bit flags. How
are properties used? Initially set the "explored" flag of all tiles to
false, then when the tile is explored, set it to true. Only explored
tiles are drawn. If the tile can be walked through (i.e. it is not a
wall or something), set the "passable" flag to true. When the player
tries to walk somewhere, check the tile in that direction. If it is
not "passable", don't allow the player to move there. This allows you
to make illusionary walls if you want - i.e. walls which aren't really
there and you can walk through them. 
</p><p>For the list of items, use a linked list. This allows many items to
exist on the same tile. Store a pointer to the beginning of the list.
</p><p>For the monsters, it depends. If you have more than one monster per
tile, you also need a linked list. Otherwise, just keep a pointer to
the monster, or some way to quickly find the monster occupying the
tile. This is vital in combat.  
</p><p>There's no reason, in fact, why you can't use the same linked list 
to store items and monsters in.  It will help you keep your tiles 
small, and many things that can happen in the dungeon affect both 
monsters and items anyway so it can be handy to find them on the 
same list.
</p><p>What other data is needed? I would use another byte to determine any
special dungeon features the tile carries, such as traps, stairs,
glyphs, chests and so on. Store all of these in an array, and
substitute this value into the array to find what, if anything, is at
the tile. Alternatively you could just store these things in the 
tile's linked list too. 
</p><p>If your system uses 11 bytes, then to make a
dungeon that is 100 by 100 tiles, you would need 100*100*11 ~= 100K
of memory. This increase is quadratic as width and height
increase, so be careful that you don't run out of memory. If you need
to squeeze your tile size further, and you're using a programming 
language that supports them, consider using bit fields. They let you
use less than 1 byte of memory for a variable.
</p>
<h3> <span class="mw-headline" id="How_are_dungeons_generated.3F"> How are dungeons generated? </span></h3>
<p>In most games, levels or stages are designed and hard coded in
advance. In a roguelike, you want as much randomness and variety as
possible (you may also want to make walkthroughs impossible to
create), so you need to generate the dungeon randomly during gameplay.
</p><p>There are many algorithms that will generate a dungeon. What they do 
is to fill a dungeon with rooms passages, stairs, traps, doors, 
items, and monsters, often in that order.  Which comes first 
can be an interesting decision.  If you know where the stairs from 
the level above came down, or where the stairs to the level below 
came up from, then you may want to start with the stairs and build 
the map around them.  If you generate rooms suited to the monsters 
that inhabit them, then you may want to start with generating monsters 
so you know what kind of lairs you need to place on the map.  If you 
regard the dungeon as a preexisting place built by someone else, that 
the monsters moved into later, you may want to generate the map first 
and place monsters and treasure in them randomly.  
</p><p>This all sounds very simple, but if you've tried to program it you
will know it is not.
</p><p>The first thing you have to decide if you are going to recreate each
level every time you visit it, or if you are going to store a level
once it is generated and use it afterwards until the end of the game.
The latter system is more realistic, but the former ensures you never
run out of variety. Angband uses the former system. NetHack uses the
latter. The latter system will be described in question 6.7.
</p><p>How do you fill a dungeon with rooms and passages? There are all kinds
of algorithms to do it. You can just start with solid rock, then
randomly "dig out" rectangles until you think there are enough. Of course,
the results will be disappointing. You not only need to generate the
dungeon, but you also need to make it look good. The algorithm I just described
will make one huge hole in the middle of the map with rough edges,
and some rooms which cannot be reached. Also, there is no limit to the
size of the room, and no overlapping with other rooms is checked.
</p><p>The improved "digging rectangle" algorithm would then look like this:
</p>
<ol><li> Fill the dungeon with impassable walls.
</li><li> Pick a random number for the number of rooms.
</li><li> Select a random location in the dungeon (x, y).
</li><li> Randomly select the room length (RoomLength).
</li><li> Randomly select the room height (RoomHeight).
</li><li> If the area of this room (calculated by RoomLength*RoomHeight) is greater than the maximum area for a room, go back to step 4.
</li><li> If the room cannot fit in the dungeon, or overlaps with other rooms, go back to step 3.
</li><li> Fill the rectangle given by (x, y) and (x + RoomLength, y + RoomHeight) with empty space.
</li><li> Go back to step 3 until all the rooms are created.
</li><li> Randomly select walls in 2 randomly selected rooms or passages.
</li><li> A pathfinding <a href="/index.php?title=Algorithm&amp;action=edit&amp;redlink=1" class="new" title="Algorithm (page does not exist)">algorithm</a> traces a path (passage) from one wall to the other. If no path exists, go back to step 10.
</li><li> Repeat from step 10 until every room is reachable.
</li></ol>
<p>This still has several errors. For instance, you might come into a
situation where no further rooms can be added to your dungeon, and
your dungeon generation procedure would go into an infinite loop. But
the biggest problem is the speed - it can be very slow. While the
dungeons it makes look good, they aren't very realistic - it isn't how
anybody digs a dungeon. The pathfinding algorithm used to trace
passages is slow and difficult to program. The biggest imperfection is
that you don't know whether a room is reachable. There are ways
(discussed later) to tell whether a room is reachable from elsewhere
in the dungeon, but some algorithms always make rooms that are linked
to the rest of the dungeon anyway, and this simplifies the whole
thing.
</p><p>How do they do it? Before a room is created, an already-existing room is randomly
selected. A passage is drawn from that room to the new room, and then the new room 
is added at the end of that passage. Mike Anderson's "Dungeon
building algorithm" at the Roguelike News sites describes it quite
well, the following is just a summary.
</p>
<ol><li> Fill the dungeon with solid walls.
</li><li> Make a room in the dungeon.
</li><li> Randomly select a room (or passage) wall in the dungeon.
</li><li> Decide on whether to build a passage or a room.
</li><li> Check there is enough space to make the passage or room. If rooms are in the way, reduce the passage/room length so that it joins the room(s). If the passage/room runs out the dungeon, go back to step 3.
</li><li> Draw the passage/room (by filling it with empty space).
</li><li> Go back to step 3 until enough rooms/passages are drawn.
</li></ol>
<p>Passages that zigzag or twist can simply be handled by selecting a
wall at end of the passage when you reach the end of step 6, and going
to step 5 and building a passage from that wall.
</p><p>Good looking dungeons can also be made with a fractal algorithm. The
fractal algorithm will produce any kind of pattern - for landscapes,
forests, rivers, islands, coastlines or whatever else you plan to use.
I don't recommend using fractals for dungeon generation, as they can
make rooms that are unreachable from somewhere in the dungeon. But
have a look at question 7.5 if you are interested.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_dungeons_with_a_theme.3F"> How do you make dungeons with a theme? </span></h3>
<h3> <span class="mw-headline" id="How_do_you_make_sure_all_your_rooms_and_passages_are_reachable.3F"> How do you make sure all your rooms and passages are reachable? </span></h3>
<p>Some algorithms always generate rooms and passages that are reachable
from every other room and passage. If yours does not, you need a way
to check this specifically. This is one.
</p><p>The flood-fill algorithm is probably the best way to do it. It
involves recursively calling a procedure that fills all empty tiles
until it encounters a boundary (like a wall). When the flood-fill is
complete, just check all the rooms for having a tile which is filled.
Those that do not are unreachable from the tile where you started
the flood-fill (as well as from the rooms which are filled).
</p><p>An example (<a href="/index.php/C" title="C">C</a>) is:
</p>
<pre>void FloodFill(int x, int y)
{
  if ((Dungeon[x][y].Content == FLOOR) &amp;&amp; (Dungeon[x][y].Flags&nbsp;!= 1))
    Dungeon[x][y].Flags = 1;
  else
    return;
  FloodFill(x+1, y);
  FloodFill(x-1, y);
  FloodFill(x, y+1);
  FloodFill(x, y-1);
}
</pre>
<pre>bool AreAllRoomsFilled(void)
{
  for (int Count1 = 0; Count1 &lt; DungeonWidth; Count1++)
    for (int Count2 = 0; Count2 &lt; DungeonHeight; Count2++)
      if ((Dungeon[Count1][Count2].Content == FLOOR) &amp;&amp; (Dungeon[Count1][Count2].Flags&nbsp;!= 1))
        return false;
  return true;
}
</pre>
<p>In some cases you might *want* a secret room or passage
which is cut off from the rest of the dungeon, and to which you can
only get through a special spell or complicated digging. If so, make
provisions for it.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_a_town.3F"> How do you make a town? </span></h3>
<p>The simplest way to make a town is to create an empty dungeon level and fill it with buildings. A building can just be a rectangle of undiggable wall - so that the player can't accidentally mess up your town level - along with a shop doorway on one side of the rectangle. To keep the level looking the same if you don't use persistent levels, save a random seed of the town, and use this seed to regenerate the town level every time you return to it.
</p><p>Depending on how you want to interact with the stores, stepping on a shop doorway should either allow the player to enter the shop, or bring up a menu allowing the player to interact with the shop. Having the shop contents inside the building makes for a more 'realistic' interface, but it forces the player to sift through the shop contents to find what they want, as well as possible for them to steal items from the shop by picking something up and leaving with it. Having a shop menu allows the player to buy and sell items more quickly, which is important for games which feature more shopping, such as Angband.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_wilderness.3F"> How do you make wilderness? </span></h3>
<p>There are a wide variety of different wilderness generation algorithms. However, the simplest is to create wilderness levels is to have a variety of different terrain types, such as trees, water and sand, and use these in combination to create a wilderness level.
</p>
<ul><li>  Pick one terrain type that the player can move through and fill a dungeon level completely with this terrain type.
</li><li>  Then pick an impassable terrain type, and draw this around the edge of the dungeon level. You may want this terrain type to have rough edges. In this case, pick a y for the top left hand corner. Fill the first column from the edge to the y with the impassable terrain. Then move east in one grid increments and randomly increase or decrease y by one at each step, filling in the columns as you do. Limit y between 1 and some maximum value that ensures that your map is not completely filled with impassable terrain. As you reach the top right hand corner, you'll do the same, but working the rows going south, then columns going west from the bottom right corner, then rows going north from the bottom left corner.
</li><li>  Pick two to three more terrain types, and drunken walk these around the map, to create natural looking terrain. It is not important at this stage that you worry about connectivity.
</li><li>  Finally, to ensure connectivity, place the dungeon entrance, the player's starting point and other interesting areas on the map, and connect these using the tunnelling algorithm you used for building the dungeon. You'll need to change terrain differently than you would for the tunnelling algorithm through the dungeon: for instance, tunnelling through ice might result in snow. This can still result in disconnected areas on the map, but all the interesting points should be connected. Getting into these disconnected areas should just serve as a reminder that the player shouldn't risk getting lost in the wilderness.
</li></ul>
<p>If you want multiple wilderness areas, allow the player to travel from one of these wilderness areas to another. This could be done by having a travel command which presents a choice of adjacent wilderness locations to travel to, when you are near the edge of the map, or by having stairs which connect to different adjacent wilderness locations depending on which edge of the map they are on.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_persistent_dungeons_.2F_worlds.3F"> How do you make persistent dungeons / worlds? </span></h3>
<p>A persistent dungeon, as mentioned earlier, is a dungeon that doesn't
change. In Angband, every time you visit level 1 it will look
completely different. In NetHack, the levels are stored, so level 1
always looks the same.
</p><p>Obviously you have to save the levels to disk to ensure they don't
change. But is it realistic for levels never to change at all? Sure,
the walls should keep the same shape and the dungeon features should
be in the same place, but should an item be where you left it months
ago? Should all monsters "freeze up" and stay in exactly the same
place, ready to do exactly what they were doing when you last visited
that level? Should spells that affect the dungeon, e.g. "destroy trap",
still be in effect when you re-enter a level? You need to think
carefully about what should be stored, and what should not.
</p><p>To save a dungeon, all you do is create a file and then write to it,
in order, everything that needs to be written to file. To load it,
just read everything back from the file in the same order that it was
written.
</p><p>Of course, it isn't as straightforward as that. When you don't know
how many structures (e.g. items, monsters) will be written to the file,
you should count them, then write the count before you write those
structures. That way, when you read from the file, you just read the
count, and so you know exactly how many structures you need to read
from the file.
</p><p>Pointers are another problem. When you read a structure containing
pointers from file, you have to reassign new memory addresses to those
pointers. In most computers, a program can be loaded into memory
starting at any address, and so the memory addresses contained by your
pointers will be wrong if your program is loaded at some other
address. In fact, try to avoid writing any pointers to file - they
waste disk space, and do nothing useful. Instead, write a data
structure to file field by field instead of just writing it as a
whole.
</p><p>You can use serialization to store it in a file.  Look at <a href="http://en.wikipedia.org/wiki/Serialization" class="external free" rel="nofollow">http://en.wikipedia.org/wiki/Serialization</a> for more information.
</p>
<h3> <span class="mw-headline" id="How_do_you_store_a_really_BIG_world.3F"> How do you store a really BIG world? </span></h3>
<p>You might be encouraged to make a big world and make it "persistent"
(i.e. the levels don't change every time you visit them), but this
takes up a lot of disk space. For instance, if each tile in your game
is 20 bytes, and your dungeon is 256 by 256 tiles, and you have 100
dungeons, they will take up about 131 megabytes of disk space, items
and monsters and other things excluded.
</p><p>So how do you reduce the disk space taken up? Well, you can either
compress your level files, or you can change the way levels are stored
and generated.
</p><p>The simplest way to apply compression to your world involves dividing the world into "active" and "dormant" parts. The conventional approach is to let the "active" part be the dungeon level that the player is currently on, and consider all other dungeon levels "dormant" (meaning e.g. that no monsters actually move on those levels, though movement might be simulated when the player reenters them later).
</p><p>The easiest way to do the actual technical compression of a string of bytes (representing, e.g., a dungeon level) into another, hopefully shorter, string of bytes is to use an external library. <a href="http://zlib.net/" class="external text" rel="nofollow">zlib</a> is by far the most common choice, being very portable, and open source with <a href="http://zlib.net/zlib_license.html" class="external text" rel="nofollow">a liberal license</a> that allows use even in commercial closed-source projects. zlib is well established and rather efficient in terms of speed and compression ratio, and you're very unlikely to beat it with a self-implemented general-purpose compression algorithm.
</p><p>If you do not wish to depend on an external library, there's a bit more work to do, but it is possible to implement a simple compression algorithm "by hand". There are many
compression methods, but I will discuss one that reduces your file
size considerably while at the same time not taking too long to do.
It's called RLE (Run Length Encoding), and it is used in many file
types. What it basically is, is replacing a repeating sequence of
data, with a count and one sample of that data. For instance, the
string "AAAAA" would be stored as "5A".
</p><p>So to RLE compress a structure, count the number of repetitions and
store it with whatever is repeated. Repeat until you've stored the
entire structure. To decompress an RLE compressed file, simply read in
the count, and set that many data structures to whatever comes after
the count. Repeat until you've loaded the entire structure.
</p><p>This method works best on:
</p>
<ol><li> Large quantities
</li><li> Similar data
</li></ol>
<p>In other words, small quantities of data with lots of variety will not
work well, and may even get bigger with RLE compression ("ABC" would
be stored as "1A1B1C", which is double the size!).
</p><p>Since most things in your roguelike should be stored as structures or
classes, it might seem like you should compress / store structures as
a whole. But there are usually a lot more differences between
structures as a whole than there are between the fields those
structures contain. In this case, it is better to RLE compress and
store the fields separately. On the other hand, in some cases it is
better to compress whole structures. You have to try it out and see
what works better.
</p><p>If there is a lot of similar data, with very few exceptions, leave out
those exceptions and store them later with the location they should be
at. For instance, if the string was "-*-------", you could just store
"9- 2*", which means the string contains 9 minus signs, and the sign
at the second position is a star. If you decide to use this, find some
way to separate the exceptions from the rest of the data. In this case
I used a space. You could just assume that the exceptions will be read
in when the string has been filled completely. Remember to count the
exceptions and write the count to the file before them so that you know
how many to expect.
</p><p>One last tip. You can use a bit-packed array, with 1's where there are
unusual values, followed by those values, in order. If you want, you
can compress those values or even the bit-packed array, but remember
to decompress them somewhere before you try to decipher them.
</p><p>The best data type to store the count is a 1 byte variable, but that
can only store a maximum value of 255. You can handle that case by 
just starting a new count at zero.
</p><p>While this method works well, there is an even better way to store
levels, which takes up far less space. Firstly, how do you generate a
level? You randomly select a number of things, like room and passage
location and size, directions your passages run in, locations of your
items and features and so on. But the numbers you should use are 
not actually random.  Your game should include a <a href="/index.php/Random_number_generator" title="Random number generator">random number generator</a> 
with a state.  If you save the state, then when you load that state 
back into the random number generator, it will produce the same 
sequence of "random" numbers all over again.  So if you use a sequence
of random numbers to generate your level, then all you need to save 
is the state of the random number generator.  When you need to reload 
the level, you just reload the same state into the generator and make 
the level the same way you made it the first time.  
</p><p>Now this really helps you reduce the size of your save file. The
state of your random number generator can be stored in only a few 
bytes. If you decide to use this method, remember not to use random
numbers seed for your monsters and items (i.e. reset the random number
generator after the dungeon layout is generated), because you don't
want to have the exact same monsters in exact same places every time
you walk into the level, and also to have the exactly same items in
the exact same places.
</p><p>Why would you NOT want to use this method? Well, while every random
number seed has a unique sequence of numbers associated with it, the
reverse is not true. This method therefore assumes that the dungeon
layout hasn't changed, i.e. that you haven't dug holes in the walls,
that you haven't destroyed any doors or changed any features. If you
have, the changes will be lost. You can, of course, save the changes
to file with the random number seed, even compress the changes, but if
a lot of changes are made, the file size can exceed that of a normally
stored file.
</p><p>There is a way to fix that too, of course. You can decide only to
store a certain number of changes, and whatever changes occur after
those, undo the changes that occur furthest back in time. For
instance, if you store 10 changes, when you make the 11th change, the
first change is undone (lost). One problem is that this can be
exploited. For instance, if you dig though 10 walls, and you dig 1
wall further, the first wall will reappear and trap you. You can
probably use this to trap monsters or do other things. This can be
fixed by storing a lot of changes (like 100 or more) so the player
will probably never encounter this situation. Even if you store 1000
changes, and each requires 20 bytes, you will use up about 20
kilobytes at most, which is still far smaller than 1.3 megabytes that
you would have without any compression.
</p>
<h3> <span class="mw-headline" id="How_Should_I_Make_Random_Numbers.3F"> How Should I Make Random Numbers? </span></h3>
<p>As mentioned above, the random number generator your program uses 
will have a state, and when a state gets reloaded into the generator, 
it will produce the same sequence of numbers again.  Such numbers, 
which are all predetermined as soon as the state is loaded into the 
generator, are not really random.  They are called "Pseudorandom" 
numbers, and the routine you get them from is called a Pseudorandom 
Number Generator.  
</p><p>In C, if you include stdlib.h in your program, you get the <tt>srand()</tt>
procedure, which takes as its state or "seed" a number between 0 and 
<tt>RAND_MAX</tt>, and the <tt>rand()</tt> procedure which returns a random number in 
the same range. Do not use it.
</p><p>You should definitely use a random number generator that's 
better defined and known than <tt>srand()</tt> and <tt>rand()</tt>.  Because the C 
standard does not define exactly how these functions work, there are 
variations from one system to the next and even from one compiler 
version to the next.  The value of <tt>RAND_MAX</tt> can be different, and 
the pseudorandom sequences generated will definitely be different.  
When this happens your players will load a savefile on a new build 
or on a different machine, and find the "persistent" levels unrecognizable.
</p><p>There are also well-known buggy implementations of <tt>rand</tt> and <tt>srand</tt> 
where the number sequence repeats on short periods, and the number sequence 
within particular bitfields of the result repeat in even shorter 
periods.  All told, there are many good reasons to make the random 
number generator part of your program instead of relying on a system 
library.  
</p><p>Fortunately, there are also a lot of good third-party 
libraries that you can use which have consistent behavior on all 
platforms and operating systems they support.  The Mersenne Twister 
is popular and fast.  If you want to code your own, I recommend a 
lagged-fibonacci generator as described in Knuth volume 2.  It's 
easy to code and runs fast.
</p>
<h3> <span class="mw-headline" id="How_do_you_deal_with_stuff_happening_far_from_the_player.3F"> How do you deal with stuff happening far from the player? </span></h3>
<h4> <span class="mw-headline" id="Monsters"> Monsters </span></h4>
<p>Monsters on the same level as the player should be "processed" (i.e.
decide whether to move, attack, pick up items or whatever) each turn.
You simply keep a list of all the monsters on the level, and every
turn you go through the list and decide what should be done for each
monster.
</p><p>Monsters on different levels usually do nothing. When the level is
loaded, you can decide to process the monsters say 50 times (without
them being able to sense the player, or they will kill him!) just to
make it realistic. This way, monsters will not end up in the same
place and involved in the same actions they were in when the player
last visited that level. You could also keep the levels above and
below the level the player is on (as well as any other levels that can
be reached through say teleport traps) in memory, and process the
monsters on those levels. This makes it more realistic: the longer the
player is not on a level, the greater the amount of changes made to
that level and the more the monsters change / disperse.
</p><p>The exact monster processing will be discussed later.
</p>
<h3> <span class="mw-headline" id="What_is_LoS.2C_and_why_and_how_do_you_do_it.3F"> What is LoS, and why and how do you do it? </span></h3>
<p>LoS (<a href="/index.php/Line_of_Sight" title="Line of Sight" class="mw-redirect">Line of Sight</a>) algorithms are ways to determine whether a particular place is visible to the
player / monster. These are related to FoV (<a href="/index.php/Field_of_Vision" title="Field of Vision">Field of Vision</a>) algorithms, which are used to determine
every place which is visible to a player / monster. The former may be a subroutine of the latter.
</p><p>The most common use of these algorithms is to determine what the player or monsters can currently see.
The second most common use of these algorithms is to determine what is lit given a light source at a 
particular location. In most roguelikes, the dungeon starts in complete darkness.
When you walk around, you reveal some of it. But you only see monsters
or terrain that are lit and within your FoV.
</p><p>Another common use is in ranged combat. Can the player shoot at the monster? Are there any obstacles
in the middle that the player might hit? Does the monster have any cover from nearby walls? Usually,
attackers can only shoot enemies which they have a LoS to. Obstacles and cover are between the attacker
and defender. If you want to print a message along the lines of 'You miss the Orc and hit the Goblin by mistake',
then you need to make sure that the player has a LoS to the goblin as well.
</p><p>The final purpose that LoS and FoV algorithms are frequently used for is to determine who is affected by an
area effect ability. An explosion may harm all nearby creatures, but you want the possibility of an
enemy being sheltered from the blast by an intervening wall. Similarly, a gaze of petrification may
affect many enemies at once, but should certainly not pass through walls.
</p><p>The methods for determining LoS and FoV range from simple to extremely subtle. Simple techniques involve
simply allowing sight of everything nearby or everything in the current room. <a href="/index.php/Ray_casting" title="Ray casting">Ray casting</a> algorithms
are a bit more complex. They use a simple LoS algorithm, such as <a href="/index.php/Breshenham%27s_Line_Algorithm" title="Breshenham's Line Algorithm" class="mw-redirect">Breshenham's Line Algorithm</a>, and then
use it to calculate FoV by checking LoS on nearby squares.
</p><p>The more subtle algorithms include <a href="/index.php/Shadow_casting" title="Shadow casting">Shadow casting</a>, which simulates a light from a point source
and <a href="/index.php/Permissive_Field_of_View" title="Permissive Field of View">Permissive Field of View</a>, which simulates a light from a volume source to determine FoV.
These more complicated methods are difficult to correctly implement. But both have freely available
libraries which can be incorporated into your roguelike.
</p>
<h3> <span class="mw-headline" id="How_do_you_store_the_list_of_all_the_items_in_the_game.3F"> How do you store the list of all the items in the game? </span></h3>
<p>You should know what kinds of items you are going to have in the game.
You should also have your magic system well planned, and any other
systems involving items (battles, shopping, stealing) also well
planned.
</p><p>Decide on the exact categories of items, and the similarities and
differences between them. Decide what each item category needs to
contain. For instance, while most items should be able to carry
enchantments, foods and potions should not (unless, of course, a potion
works the same way as a spell does). Your weapons and armor should
store info relevant to the battle system (like attack power, damage
type, defensive rating and so on), but scrolls should not. I think a
good way to represent all the different item categories is to use
object oriented programming, because that allows inheritance,
polymorphism and so on, which is very useful.
</p><p>Now one way to store the item list is to just keep a huge list of all
the items in the game, in some kind of array, and to represent an
item, you just store a number, which is the position of that item in
this array. While this system works well for some kinds of items where
there is no difference between two items of the same kind, the problem
arises when you want to store something individual about an item. For
instance, you might want items to carry an enchantment that makes them
do extra damage, or that heals you faster. You might want a damage
system, where as you use your items, they take damage, and when that
damage reaches zero, they fall apart and become unusable. You might 
want to allow the player to name objects as in Nethack or attach macros 
to them, as in Angband.  In such cases, the items have to carry 
individual enchantments damage ratings, and other information. 
So you can't just store such items in the array. You would
have to store all the settings for each item with the item.
</p><p>The best way to do it, then, is to split up your items into 2
categories. In the first category are items which carry no individual
properties. These are simply represented by a number which is
substituted into the item array to find out about them. In the second
category are items which have some individual properties. They are
represented by both a number which get substituted into the item
array, and by the individual settings they carry.
</p><p>Since you will most likely end up with different sizes for different
item types, you can't use 1 massive array for all the items. You will
most likely have to use an array for each item category. You store
these arrays in a file, and read them in from the file when the game
is started.
</p>
<h3> <span class="mw-headline" id="How_do_you_store_the_items_in_the_player.27s_inventory.3F"> How do you store the items in the player's inventory? </span></h3>
<p>The previous question discusses how to generally store the items. One
more thing to remember is that if the player / monster is carrying
more than one item that is the same (e.g. 5 arrows), you should allow
the items to stack. So you need one more structure per item, and that
is the number (for the arrows, it would be 5). If you want to check
total inventory weight, remember to multiply each item's weight by its
number to get the correct weight, otherwise you will just get the
weight of 1 item.
</p><p>But now how do you store all those items in the player's inventory?
You can use:
</p>
<ol><li> A static array
</li><li> A dynamic array
</li><li> A linked list
</li></ol>
<p>A static array is simply array with a fixed number of elements. It is
easy to read and write to a file, because it is one continuous
structure and you always know how long it is. You only need to still
store the number of items in the array so that you know where the stop
reading the items back from file. It is also very easy to sort. The
disadvantage is that memory is always wasted. If the array has 50
elements, and you only carry 5 items, 45 elements worth of memory is
sitting there unused. Also, you can't carry more than 50 items, so you
constantly have to check this when buying / picking up / doing
anything that adds items to the inventory.
</p><p>A dynamic array is an array that can be of any size, because it can
be created and destroyed at any point in your program (using "new" and
"delete" in C++, and "malloc()" and "free()" in C). When you create
it, you specify the size. Unfortunately, you can't change the size of
the array after it is created. So when you decide to add or remove the
item from the inventory, you need to create another array with the
right number of elements, and then copy everything from the old array,
and delete the old array. This is slow. If you use C, you can use
realloc(), which does the same thing. Sorting a dynamic array and
writing it to file is just as simple as sorting a static one, though.
</p><p>A linked list is a more advanced programming structure. It consists of
a bunch of "nodes" created dynamically (i.e. whenever you like, not all
at a specific time like with arrays), and each one containing a
pointer to the next one in the list (and sometimes the previous) and
containing data (like your item info). The cool thing about linked
lists is that there can be as many as you like, they will never waste
any memory, and adding and removing items is easy and quick. They can
only be accessed sequentially, i.e. you have to go through them in
order from beginning to end. However, sorting linked lists, although
harder to program, is even faster than sorting arrays, because you
don't need to swap the actual data, only the pointers' memory
addresses. Writing this to file is slightly harder, as you have to do
it item by item, you can't just write the whole list at once, and you
don't know how many items you've got (unless you keep count). Linked
lists can be used for a whole lot of other things too. This is the
recommended structure for those who know about it and how to use it.
If you don't, it's quite difficult, learn pointers and dynamic memory
allocation first.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_randomly_generated_items.3F"> How do you make randomly generated items? </span></h3>
<ul><li> Decide what percentage of items in the game should be random
</li><li> Decide what categories of items should be randomly generated
</li><li> Decide what things should be random in each category
</li><li> Decide what the range for those random values should be
</li><li> At the start of a game, generate the random items and put them in the big item array
</li></ul>
<h3> <span class="mw-headline" id="Which_kinds_of_monsters_should_I_use_in_my_roguelike.3F"> Which kinds of monsters should I use in my roguelike? </span></h3>
<p>It depends on the setting and story. Most roguelikes use monsters
taken out of Tolkien's work: orcs, trolls, wargs, hobbits, dwarves,
elves, dragons and so on. Traditional creatures taken out of various
mythologies and religions are also used: nagas, medusas, gorgons,
angels, demons and so on. Some are taken out of "Dungeons and
dragons", such as the infamous kobold. Plenty of animals are used:
from the normal cave-dwelling creatures like bats and spiders, to the
ridiculous lice and ants.
</p><p>Make up your own if these are not enough.
</p>
<h3> <span class="mw-headline" id="How_do_you_create_a_monster_AI.3F"> How do you create a monster AI? </span></h3>
<p><a href="/index.php?title=AI&amp;action=edit&amp;redlink=1" class="new" title="AI (page does not exist)">AI</a> (artificial intelligence) is not so easy to create. There is
several different techniques you might want to use.
</p><p>State machines are probably the easiest way to do AI. Firstly, get a
piece of paper. Then write a set of states (e.g. attacking, walking
somewhere, running away, stealing), circle those states, and draw
arrows (with directions) from each state to every state you can get to
from that state. These arrows are called transitions. Label each
transition with the circumstances under which it occurs. An example:
</p>
<pre>     +-----------------+    +---------------+
     | player runs away|    | healthy again |
     |                 v    v               |
+-- ATTACK        APPROACH PLAYER       RUN AWAY
|    ^                 |                    ^
|    |  close enough   |                    |
|    +-----------------+   likely to die    |
+-------------------------------------------+
</pre>
<p>Of course, it would be a lot more complicated. There is far more
decisions to be made, and there is more actions (one for each item /
spell). Now how do you implement this? Instead of using the usual
massive nested "if" or "switch" statement, you make a 2 dimensional
array, with the number of states being its width and height. This is
the state transition table.
</p>
<pre>            ATTACK        APPROACH              RUN
ATTACK                    Player runs away      Likely to die
APPROACH    Close enough                       
RUN                       Healthy again
</pre>
<p>You keep a variable with each monster that tells you which state it is
in. This tells you about the row of the state transition table. You
then go through that row, and run tests to see if the circumstances in
it are fulfilled. If they are, pick the one with the highest priority,
and switch to that state. For instance, you are in the "ATTACK" state.
Look in the left-most column for "ATTACK" (it's at the top). Right,
now look along the row. Under the first column ("ATTACK") there is a
blank space, so there is nothing to check there. Under the "APPROACH"
column there is "Player runs away". Say that is true - the player is
leaving. Under the "RUN" column there is "Likely to die". Say that is
also true - the monster is badly hurt. The monster's life takes
priority over the player's pursuit, so the state machine switches to
the "RUN" state (you could of course make the monster's life less
important&nbsp;:-). Behavior is then based on the states. This is also
where big "if" statements can come in. If you want to avoid them, use
function pointers as well in your state transition table, and make a
function for each action / state.
</p><p>State machines are very good, and unlike a quick AI you make using
hacks, they stand up well to difficult situations and don't require a
lot of processing or calculation. They are used in many programming
situations, so it is worthwhile to learn them.
</p><p>Other techniques, like neural networks are described in question 8.x.
</p>
<h3> <span class="mw-headline" id="How_do_you_create_a_good_monster_AI.3F"> How do you create a good monster AI? </span></h3>
<p>The previous question describes how you make an AI. This one will
discuss how to improve it and make it interesting.
</p><p>Firstly, plan. Do you want some monsters to attack each other? Do you
want to make some co-operate with the player? Do you want group
tactics? Various strategies?
</p>
<h3> <span class="mw-headline" id="How_do_they_find_.2F_follow_the_player.3F"> How do they find / follow the player? </span></h3>
<p>Let's see. The player is always moving. The monster is always moving.
The other monsters are always moving. Doors are opening and closing,
new obstacles are coming around. This seemingly simple problem of "now
the monster follows the player" is actually a real challenge.
</p><p>Different roguelikes have tried different things. In Angband, the
monsters sleep (do nothing) when they are created. When the player
comes around making noise, they wake up. This way, far away monsters
don't constantly have to look for the player. Also, monsters only move
to attack you if they see you (I think), and if you temporarily
disappear, they go to where they last saw you.
</p><p>How do they move closer to you if they know where you are (i.e. can see
you)? If their X value on the map is smaller than yours, they take a
step that increases their X value; if their X value is bigger than
yours, they take a step that decreases it, and if it is the same, they
don't take a step which changes the X value. The same thing happens
with the Y value. The combination of X and Y changes makes the
monsters walk the best possible way (i.e. diagonally or in a straight
line, depending on the situation). This, of course, doesn't help when
it comes to obstacles. How do you get around obstacles? Several ways
will be discussed here.
</p><p>I am going to assume the monsters want to find you, and you are far
away. A good way to mark a path toward the player is to use the player's 
Line of sight code to mark squares the player has seen.  Each time a 
square is found to be visible to the player, mark the square with 
a "scent value" X, where X is 32 times the current turn number, minus 
the distance from which the player saw the square (this presumes 
that 32 is larger than your maximum sight radius.  If that's not true, 
then use your maximum sight radius instead). 
</p><p>Now, any time a monster is on a square that the player has seen, it 
can just check the scent values on the surrounding squares.  If it 
keeps moving into the adjacent square with the highest chase value, 
it will effectively find its way through squares the player has seen 
to the player.  When the player's in view, it will act like it's 
tracking him by sight.  You probably want to limit this method depending 
on the monster's abilities.  Scent tracking monsters could be limited 
to squares seen from a very short distance of one or two squares, 
while stupid monsters could be limited to not noticing any scent 
values that are from more than 50 turns ago and sighted monsters don't 
get to follow the "scent" values until they have actually seen the player 
at least once.   The great benefit of this method is that it's very 
simple and very fast and allows you to simulate several different 
related kinds of monster tracking.  It will make the monsters 
baffled anytime the player teleports or (if the monster can't open 
doors) when the player closes doors.  But, that's sort of what 
teleporting and closing doors are for, so you may decide that's all 
right. 
</p><p>Tracking by sound also works. For each action that makes a sound,
start with a number representing how loud the sound was and mark 
the square the player's on with that noise level.  Then move 
outward from the player marking each new radius with a noise level 
one less than the one before, until you get to zero. 
</p><p>Monsters who remember the sound then go in the direction of the tiles 
with the highest amount of sound. Maybe every time they hear sound, 
they start listening better for new sounds, and becoming more aware of
smells?  What is nice about sound and smell is how you magic and items
which change them bring in all kinds of new strategies (e.g. an
invisibility spell isn't enough any more, because some monsters can
sniff you out and attack anyway).
</p><p>You may want to do pathfinding with a general pathfinding algorithm
like A* or Dijkstra. These will find the shortest path (if any) between
two points on the map. You might want to use these for some special
monsters that know the location of the player (through magic or
something). The problem with general pathfinding algorithms is that they are slow,
and may be difficult to learn and program (unless you know a lot of
Graph Theory). Also, since the player is moving, and monsters are
moving, and new obstacles are coming around, you would have to trace a
path every few turns to make sure it is still possible (no new
obstacles). This is very computationally expensive, so like I said, it
isn't good to use for every single monster, only for some. It can also
be used for moving the player; in some games (a.k.a. Diablo/2), you
click with the mouse where you want the player to go, and he walks
there using the shortest path and avoiding obstacles and everything
else in the way.
</p><p>A quick algorithm and explanation of pathfinding (since I couldn't
find any and had to learn the hard way): This is something like
Djkstra's algorithm. What happens is there are 2 lists: OPEN and
CLOSED. The OPEN list stores a list of tiles which are possible
candidates for a shortest path, and the CLOSED list stores the tiles
we've been through, so they aren't unnecessarily repeated. The
"movement cost" is the number of steps the monster has to take to get
to that tile, walking on the path associated with that tile. New tiles
are only added to the OPEN list if they don't exist, and tiles only
replace other tiles if they have shorter paths. Anyway, the algorithm
is:
</p>
<ol><li> Find the destination tile (where the player is).
</li><li> Put the starting tile (where the monster is) on the OPEN list. It's starting cost is zero.
</li><li> While the OPEN list is not empty, and a path isn't found:
<ol><li> Get the tile from the OPEN list with the lowest movement cost. Let's call it the CURRENT tile.
</li><li> If this is the destination tile, the path has been found. Exit the loop now.
</li><li> Find the tiles to which you can immediately walk to from this tile. These would the tiles around this tile, which don't contain obstacles. Call these tiles "successors".
</li><li> For each successor:
<ol><li> Set the successor's parent to the CURRENT tile.
</li><li> Set the successor's movement cost to the parent's movement cost, plus 1 (for diagonal movements, add more if it takes longer to go diagonally in your game).
</li><li> If the successor doesn't exist on either the OPEN list or the CLOSED list, add it to the OPEN list. Otherwise, if the successor's movement cost is lower than the movement cost of the same tile on one of the lists, delete the occurrences of the successor from the lists add the successor to the OPEN list Otherwise, if the successor's movement cost is higher than that of the same tile on one of the lists, get rid of the successor
</li></ol>
</li><li> Delete the CURRENT tile from the OPEN list, and put it on the CLOSED list.
</li></ol>
</li><li> If the while loop has been ended because the OPEN list is empty, there is no path.
</li><li> If this is not the case, the last tile pulled from the OPEN list, and its parents, describe the shortest path (in reverse order - i.e. from the player to the monster - you should read the list of tiles back to front).
</li></ol>
<h3> <span class="mw-headline" id="How_do_you_add_variety_to_your_monsters.3F"> How do you add variety to your monsters? </span></h3>
<p>A big problem with monsters in roguelikes is that they are just too
predictable. You know one hit with a sword will kill every mouse, one
arrow will kill every yeek, and it takes a lot from both weapons and
spells to kill a dragon. Even though there are often lots of monsters,
once you've seen each one, that's it, you've seen it all.
</p><p>A number of different techniques therefore exist to make monsters more
unique and add more variety to them. Making monsters carry items is
one of them. So is a good monster AI. There is several more. Here I
will discuss genetics and neural networks.
</p><p>In real life, animals and people carry genes, which add a lot of
differences between them. Some are faster, some are smarter, some are
healthier and so on. What happens over a period of time is that the
fittest survive and the rest die out. So when your player walks into
the dungeon and starts killing monsters, he will find they are not all
the same, and they get stronger over time, because as the weaker die,
the stronger live on to reproduce and have stronger children. How do
you make monster genetics? Decide what the "genes" should be. Maybe
extra health points. Resistances to various elements and spells.
Stronger attack and defence. Intelligence and eventually the ability
to use magic? Then decide what each gene does. For instance, each
health gene affects health points by 5%. For each good health gene,
the health points go up 5%, and with a bad health gene, they go down
5%. So if you gave an orc 4 health genes, and they all turned out
"good", the orc would have 120% of its normal health points. If they
all turned out "bad", he would only have 80%.
</p><p>Now, using genetic algorithms, when you create a monster, randomly
select 2 parents. Somehow combine the parent's genes (usually using
random selection and averaging). If there isn't enough parents,
randomly create genes. How does this help? Well, the orcs with 80% hit
points will get killed more by the player, and so fewer will survive
to have sickly children. The children will thus become healthier,
because only healthy parents have survived to reproduce. As they grow
healthier, they are more of challenge for the player.
</p><p>Neural nets are a way for a computer to learn. They are a difficult
and complicated topic, which is why they are rarely used in any games,
but simple ones should be manageable with a little research. What
basically happens is that a neural net takes a number of inputs, and
produces a number of outputs. Unlike a program which you make,
however, a neural net learns from experience and corrects its
mistakes, so a good one should make a really challenging opponent.
</p><p>The inputs to a monster neural net could be:
</p>
<ul><li> Current state of health (hit point percentage)
</li><li> Current opponent's state of health (probably also a percentage)
</li><li> Distance from opponent
</li><li> Damage done by previous attack
</li></ul>
<p>The outputs:
</p>
<ul><li> Movement towards the opponent
</li><li> Movement away from the opponent (running away&nbsp;:-)
</li><li> Some or other attack
</li><li> A spell
</li></ul>
<p>You train the net by comparing the damage done to the opponent, with
the damage received from the opponent. With a little practise, the
neural net would learn to run when it is near dead, to go closer to
the opponent when it is far, to use attacks which do the most damage
and so on. One thing to remember, is that if you plan to have neural
nets for each creature, don't destroy the net when the creature dies.
Then all the learning is lost. Rather use a net for all kinds of that
creature (e.g. a neural net for all orcs).
</p>
<h3> <span class="mw-headline" id="How_do_you_make_your_battle_system.3F"> How do you make your battle system? </span></h3>
<p>The heart of any roguelike is the battle system. What makes most
roguelikes fun, is killing thousands of monsters. The better the
battles, the better the game. So a good battle system is not only nice
to have, it is essential.
</p><p>Planning a battle system, however, is no easy job. Every single spell,
every usable item, every monster type, and many other things, can
completely change the way battle works. For instance, say you have
this spell called "haste" that makes the player take one extra action
per turn. That's easy: one "if" statement checks if haste is active,
and if so, the player takes another action. But now say you decide to
change the haste spell so monsters can use it too. Now things can
really complicated when you have multiple monsters and the player with
"haste". Your entire battle system might have to change. So the point
is, you need to start with a good design that's capable of modeling 
the kinds of things that you're going to make important in combat.  
If you have something like "haste", it means speeds can vary by 
creature, so you need to start with a system where speeds can vary 
by monster.  Then the complexity of the "if" statements checking each 
turn for another action never comes up because the player and monsters 
are simply taking turns at different rates. 
</p><p>Basically, combat works like this. Everybody gets a certain number of
turns, they do what they think will inflict the most damage on their
opponent while minimising their own damage taken. Damage is inflicted
with weapons, and it is reduced (or blocked entirely) with armor.
</p><p>The point of combat is very simple. Kill as many opponents as possible
while staying alive yourself. When do you die? Every roguelike (and
most other games) I've seen use a "hit point" (or "health point")
rating, abbreviated HP. You have a certain amount of HP, and a
maximum. The maximum grows when you reach the next level, and the
current HP grows when you rest/drink healing potions/use healing
spells and so on. When your current HP is maxed out, you are
completely healthy. When it drops to 0, you are dead. Damage reduces it by
the amount of damage taken, and healing increases it by the amount of
health points gained. How do you calculate this? Instead of the slow
and problematic way of checking overflows like roguelikes usually do
it, do this: When a hit occurs: If the damage is greater than or equal
to the current HP, the HP drops to zero and you die. Otherwise
subtract the damage from the current HP. When you are healed: If the
health gained is greater than the difference between your maximum and
your current HP, your current HP takes on the value of the maximum HP.
Otherwise, you add the health gained to the current HP.
</p><p>When you process monsters, the monster AI decides what action to take. 
</p>
<h3> <span class="mw-headline" id="How_do_you_represent.2C_store_and_process_monsters.3F"> How do you represent, store and process monsters? </span></h3>
<p>This is a good question, but I don't think very many articles have been written on this.
</p><p>Firstly, to represent the monster, you need to take everything into
consideration (which is why this is the last article about monsters).
Does each monster have a name, or do only some? How do you deal with
different AI's? How do you store and use spells? How does your monster
carry items? And can all monsters do all of these things? If not, how
do you know and what do you do about it? Planning (at least each kind
of monster), object oriented programming and good structures should
do the job for a large variety system such as this. For the items
section in this FAQ, a system was discussed where items were split
into 2 categories: properties unique to each item, and properties
which are the same throughout the same item (e.g. two ordinary swords
will do the same damage, but one might have a spell acting on it that
the other does not). This system works well for monsters too - all
orcs have so many maximum hit points, but each one can have different
current hit points (because they have been hurt). So splitting up
monsters this way can be a good idea.
</p><p>Most monsters are stored in some kind of data (or text) file. They are
read in when you play the game. Inside the game, monsters will change
often - the player will kill them, they might multiply, more will be
created, reading a scroll of monster summoning will call up more and
so on. So you must make considerations for this from the start. A
linked list is very good for storing the monsters inside the game;
arrays are going to run into size problems very quickly. If you are
programming using object oriented programming, linked lists can
store any object derived from a base class, and the right virtual
method will still be activated for each monster. Adding new monsters
to a linked list is a piece of cake, removing dead ones is just as
easy. So linked lists are the storage system of choice.
</p><p>How do you process monsters? Just pass through the linked list and run
some or other function or method for each monster in it.
Alternatively, since each map tile points to a monster (if any is
standing on it), go through each map tile and process the monster on
it.
</p><p>One problem that could occur is that you get dangling pointers: each
spell/person/monster/item attacking/working on/flying towards the
current monster points to the monster. When the monster dies, you
delete the monster from the list, and those pointers point to who
knows where. Unpredictable things could happen. Use "reference
counting" (see www.memorymanagement.org). Basically, each monster
keeps a count of its "users", initially set to zero. When something
new points to the monster, increment the monster's user count by 1.
Each turn, those items/spells/whatevers pointing to the monster must
check if the monster is dead (marked somehow on the monster without
removing it from memory), and if so, stop pointing to the monster, and
decrease the monster's user count by 1. Only when the monster's user
count is zero can it be safely deleted from the list and removed from
memory.
</p><p>Another problem you might run into is how to deal with monsters which
have different speeds. A monster that takes 3 actions per turn can
either make all 3 when it is processed, or you can use the more
realistic (and difficult) system where those turns are spread out
among everyone else's turns. For this, you might want to keep a
separate list for monsters of different speeds, and pass through the
linked lists with different speeds more than once, taking only one
action each time. Then there are the "haste" and "slow" types of
spells that change the number of actions you normally take...
</p>
<h2> <span class="mw-headline" id="SPELLS"> SPELLS </span></h2>
<h3> <span class="mw-headline" id="How_do_you_represent_a_magic_system.3F"> How do you represent a <a href="/index.php/Magic" title="Magic">magic</a> system? </span></h3>
<p>You plan it very well in advance first. Don't make magic a black box
device - explain it somehow, and integrate it into your story. Decide
on the magic system, categories of spells, all of that.
</p>
<h3> <span class="mw-headline" id="What_is_a_good_magic_system_to_use.3F"> What is a good magic system to use? </span></h3>
<p>Your own. I would not copy from "Dungeons and dragons", other
roguelikes, other games, New Age books, Internet websites on magic and
paganism, and whatever other sources you might think are good. Maybe
get ideas from them, but don't copy spell names or statistics.
</p><p>Traditionally, most roguelikes work magic similarly to "Dungeons and
Dragons", with a few exceptions. Each spell has a level. You have to
be on the same or higher level (experience wise) to learn it, and you
have to be a class that can learn spells, and have the appropriate
spell book. You have a certain amount of magic points. They increase
when you level up. Each spell uses some magic points, and when you run
out, you can't cast spells. Magic points are restored by resting and
with some potions.
</p>
<h3> <span class="mw-headline" id="How_do_you_enchant_objects_or_make_.22enchanted.22_objects.3F"> How do you enchant objects or make "enchanted" objects? </span></h3>
<p>With great difficulty.
</p>
<h3> <span class="mw-headline" id="How_do_you_make_random_spells.3F"> How do you make random spells? </span></h3>
<p>Similarly to random items.
</p>
<h2> <span class="mw-headline" id="Can_you_make_any_money_from_your_roguelike.3F"> Can you make any money from your roguelike? </span></h2>
<p>Of course you can. Look at "Dungeon Hack" or "Diablo" for example.
Real-time combat and nice looking graphics are heavily recommend if you
want to reach out for a broader (paying) audience, though. But all the
major roguelikes are free of charge, and all except Adom also permit
free distribution and modification of the source code - something that
is probably necessary unless you plan to write your game by yourself
</p>
<h2> <span class="mw-headline" id="Contributors"> Contributors </span></h2>
<ul><li> David Damarell (NetHack description, question about money from roguelikes)
</li><li> Bridget (list of newsgroups)
</li><li> Jens Baader (list of roguelikes and newsgroups)
</li><li> Philip Swartzleonard (who makes roguelikes)
</li><li> <a href="/index.php/Kornel_Kisielewicz" title="Kornel Kisielewicz">Kornel Kisielewicz</a> (wikified)
</li></ul>
<p>If your name isn't here, and you see your text somewhere on this,
please e-mail me at dj015@yahoo.com, with what you wrote, so I can add
you in.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 259/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key 133099-basin:pcache:idhash:1452-0!1!0!!en!2!edit=0 and timestamp 20111228195107 -->
<div class="printfooter">
Retrieved from "<a href="http://roguebasin.roguelikedevelopment.org/index.php/Roguelike_Dev_FAQ">http://roguebasin.roguelikedevelopment.org/index.php/Roguelike_Dev_FAQ</a>"</div>
		<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>: <span dir='ltr'><a href="/index.php/Category:Articles" title="Category:Articles">Articles</a></span></div></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				 <li id="ca-nstab-main" class="selected"><a href="/index.php/Roguelike_Dev_FAQ" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk"><a href="/index.php/Talk:Roguelike_Dev_FAQ" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/index.php?title=Roguelike_Dev_FAQ&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/index.php?title=Roguelike_Dev_FAQ&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Roguelike_Dev_FAQ" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/skins/roguebasin/RogueBasin_logo.png);" href="/index.php/Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage"><a href="/index.php/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
				<li id="n-portal"><a href="/index.php/RogueBasin:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php" id="searchform">
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" title="Search RogueBasin" accesskey="f" type="search" name="search" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Roguelike_Dev_FAQ" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Roguelike_Dev_FAQ" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Roguelike_Dev_FAQ&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Roguelike_Dev_FAQ&amp;oldid=21721" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>

	<!-- begin of banner1 -->
        <div class='generated-sidebar portlet'>
        <h5>Current Guardian</h5>
        <div style="border: 1px solid #B0B0B0; background-color: #FFFFFF; text-align: center;">
        <a href="http://slashware.net">
        <img title="Slashware Interactive - Current Guardian of RogueBasin" 
                alt="Slashware Interactive - Current Guardian of RogueBasin" 
                src="http://www.roguebasin.com/skins/roguebasin/guardianOfRogueBasin.png" /></a>
        </div></div>
        <!-- end of banner1 -->


</div><!-- end of the left (by default at least) column -->



<div class="visualClear"></div>
<div id="footer">
	<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki" /></a></div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 1 August 2010, at 21:52.</li>
		<li id="viewcount">This page has been accessed 57,457 times.</li>
		<li id="privacy"><a href="/index.php/RogueBasin:Privacy_policy" title="RogueBasin:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="/index.php/RogueBasin:About" title="RogueBasin:About">About RogueBasin</a></li>
		<li id="disclaimer"><a href="/index.php/RogueBasin:General_disclaimer" title="RogueBasin:General disclaimer">Disclaimers</a></li>
	</ul>
</div>
</div>

<script>if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.274 secs. --></body></html>

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=shared.css
Content-Type: text/css; charset=UTF-8; name=shared.css
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/common/shared.css?270
Content-Transfer-Encoding: 8bit

/**
 * CSS in this file is used by *all* skins (that have any CSS at all).  Be
 * careful what you put in here, since what looks good in one skin may not in
 * another, but don't ignore the poor non-Monobook users either.
 */

/* Colored watchlist and recent changes numbers */
.mw-plusminus-pos { color: #006400; } /* dark green */
.mw-plusminus-neg { color: #8b0000; } /* dark red */
.mw-plusminus-null { color: #aaa; } /* gray */

/* Comment and username portions of RC entries */
span.comment {
	font-style: italic;
}

span.changedby {
	font-size: 95%;
}

/* Math */
.texvc { direction: ltr; unicode-bidi: embed; }
img.tex { vertical-align: middle; }
span.texhtml { font-family: serif; }

/* add a bit of margin space between the preview and the toolbar */
/* this replaces the ugly <p><br /></p> we used to insert into the page source */
#wikiPreview.ontop { margin-bottom: 1em; }

/* Stop floats from intruding into edit area in previews */
#editform, #toolbar, #wpTextbox1 { clear: both; }

div#mw-js-message {
	margin: 1em 5%;
	padding: 0.5em 2.5%;
	border: solid 1px #ddd;
	background-color: #fcfcfc;
}

/* Edit section links */
.editsection {
	float: right;
	margin-left: 5px;
}

/**
 * File histories
 */
h2#filehistory {
	clear: both;
}

table.filehistory th,
table.filehistory td {
	vertical-align:top;
}
table.filehistory th {
	text-align: left;
}
table.filehistory td.mw-imagepage-filesize,
table.filehistory th.mw-imagepage-filesize {
	white-space:nowrap;
}

table.filehistory td.filehistory-selected {
	font-weight: bold;
}

/*
 * rev_deleted stuff
 */
li span.deleted, span.history-deleted {
	text-decoration: line-through;
	color: #888;
	font-style: italic;
}

/**
 * Patrol stuff
 */
.not-patrolled {
	background-color: #ffa;
}

.unpatrolled {
	font-weight: bold;
	color: red;
}

div.patrollink {
	font-size: 75%;
	text-align: right;
}

/**
 * Forms
 */
body.ltr td.mw-label { text-align: right; }
body.ltr td.mw-input { text-align: left; }
body.ltr td.mw-submit { text-align: left; }
body.rtl td.mw-label { text-align: left; }
body.rtl td.mw-input { text-align: right; }
body.rtl td.mw-submit { text-align: right; }

td.mw-label { vertical-align: top; }
.prefsection td.mw-label { width: 20%; }
.prefsection table { width: 100%; }
td.mw-submit { white-space: nowrap; }

table.mw-htmlform-nolabel td.mw-label { width: 0 !important; }

/**
 * Image captions
 */
body.rtl .thumbcaption { text-align:right; }
body.rtl .magnify { float:left; }

body.ltr .thumbcaption { text-align:left; }
body.ltr .magnify { float:right; }

/**
 * Hidden categories
 */
.mw-hidden-cats-hidden { display: none; }
.catlinks-allhidden { display: none; }

/* Convenience links to edit block, delete and protect reasons */
p.mw-ipb-conveniencelinks, p.mw-protect-editreasons,
p.mw-filedelete-editreasons, p.mw-delete-editreasons,
p.mw-revdel-editreasons {
	font-size: 90%;
	float: right;
}

/* Search results */
.searchresults {
}

.searchresults p {
	margin-left: 0.4em;
	margin-top: 1em;
	margin-bottom: 1.2em;
}

div.searchresult {
	font-size: 95%;
	width:38em;
}

.mw-search-results {
	margin-left: 0.4em;
}

.mw-search-results li {
	padding-bottom: 1em;
	list-style:none;
	list-style-image:none;
}
.mw-search-results li a {
	font-size: 108%;
}

.mw-search-result-data {
	color: green;
	font-size: 97%;
}

.mw-search-formheader {
	background-color: #f3f3f3;
	margin-top: 1em;
	border: 1px solid silver;
}
.mw-search-formheader div.search-types {
	float:left;
	padding-left: 0.25em;
}
.rtl .mw-search-formheader div.search-types {
	float: right;
}
.mw-search-formheader div.search-types ul {
	margin: 0 !important;
	padding: 0 !important;
	list-style: none !important;
}
.mw-search-formheader div.search-types ul li {
	float: left;
	margin: 0;
	padding: 0;
}
.mw-search-formheader div.search-types ul li a {
	display: block;
	padding: 0.5em;
}
.mw-search-formheader div.search-types ul li.current a {
	color: #333333;
	cursor: default;
}
.mw-search-formheader div.search-types ul li.current a:hover {
	text-decoration: none;
}
.mw-search-formheader div.results-info {
	float: right;
	padding: 0.5em;
	padding-right: 0.75em;
}
.mw-search-formheader div.results-info ul {
	margin: 0 !important;
	padding: 0 !important;
	list-style: none !important;
}
.mw-search-formheader div.results-info ul li {
	float: right;
	margin: 0;
	padding: 0;
}
fieldset#mw-searchoptions {
	margin: 0;
	padding-left: 0.75em !important;
	padding-right: 0.75em !important;
	padding-bottom: 0.5em !important;
	padding-top: 0.5em !important;
	border: none;
	background-color: #f9f9f9;
	border: 1px solid silver !important;
	border-top-width: 0 !important;
}
fieldset#mw-searchoptions legend {
	display: none;
}
fieldset#mw-searchoptions h4 {
	padding: 0;
	margin: 0;
	float: left;
}
.rtl fieldset#mw-searchoptions h4 {
	float: right;
}
fieldset#mw-searchoptions div#mw-search-togglebox {
	float: right;
}
.rtl fieldset#mw-searchoptions div#mw-search-togglebox {
	float: left;
}

fieldset#mw-searchoptions div#mw-search-togglebox label {
	margin-right: 0.25em;
}
fieldset#mw-searchoptions div#mw-search-togglebox input {
	margin-left: 0.25em;
}
fieldset#mw-searchoptions table {
	float: left;
	margin-right: 3em;
}
fieldset#mw-searchoptions table td {
	padding-right: 1em;
}
.rtl fieldset#mw-searchoptions table td {
	padding-left: 1em;
	padding-right: 0;
}
body.rtl fieldset#mw-searchoptions table {
	margin-right: 0;
	margin-left: 3em;
	float: right;
}
fieldset#mw-searchoptions div.divider {
	clear: both;
	border-bottom: 1px solid #DDDDDD;
	padding-top: 0.5em;
	margin-bottom: 0.5em;
}

td#mw-search-menu {
	padding-left:6em;
	font-size:85%;
}

div#mw-search-interwiki {
	float: right;
	width: 18em;
	border-style: solid;
	border-color: #AAAAAA;
	border-width: 1px;
	margin-top: 2ex;
}

.rtl div#mw-search-interwiki {
	float: left;
}

div#mw-search-interwiki li {
	font-size: 95%;
}

.mw-search-interwiki-more {
	float: right;
	font-size: 90%;
}

.rtl .mw-search-interwiki-more {
	float: left;
}

div#mw-search-interwiki-caption {
	text-align: center;
	font-weight: bold;
	font-size: 95%;
}

.mw-search-interwiki-project {
	font-size: 97%;
	text-align: left;
	padding-left: 0.2em;
	padding-right: 0.15em;
	padding-bottom: 0.2em;
	padding-top: 0.15em;
	background-color:#ececec;
	border-top:1px solid #BBBBBB;
}

.rtl .mw-search-interwiki-project {
	text-align: right;
}

span.searchalttitle {
	font-size: 95%;
}

div.searchdidyoumean {
	font-size: 127%;
	margin-top: 0.8em;
	/* Note that this color won't affect the link, as desired. */
	color: #c00;
}

div.searchdidyoumean em {
	font-weight: bold;
}

.searchmatch {
	font-weight: bold;
}

table#mw-search-top-table {
	background-color: transparent;
}


/*
 * Advanced PowerSearch box
 */

td#mw-search-togglebox {
        text-align: right;
}

table#mw-search-powertable {
	width:100%;
}

form#powersearch {
	clear: both;
}


/*
 * UserRights stuff
 */
.mw-userrights-disabled {
	color: #888;
}

table.mw-userrights-groups * td,table.mw-userrights-groups * th {
	padding-right: 1.5em;
}

/*
 * OpenSearch ajax suggestions
 */
.os-suggest {
	overflow: auto;
	overflow-x: hidden;
	position: absolute;
	top: 0px;
	left: 0px;
	width: 0px;
	background-color: white;
	background-color: Window;
	border-style: solid;
	border-color: #AAAAAA;
	border-width: 1px;
	z-index:99;
	font-size:95%;
}

table.os-suggest-results {
	font-size: 95%;
	cursor: pointer;
	border: 0;
	border-collapse: collapse;
	width: 100%;
}

.os-suggest-result, .os-suggest-result-hl {
	white-space: nowrap;
	background-color: white;
	background-color: Window;
	color: black;
	color: WindowText;
	padding: 2px;
}
.os-suggest-result-hl,
.os-suggest-result-hl-webkit {
	background-color: #4C59A6;
	color: white;
}
.os-suggest-result-hl {
	/* System colors are misimplemented in Safari 3.0 and earlier,
	   making highlighted text illegible... */
	background-color: Highlight;
	color: HighlightText;
}

.os-suggest-toggle {
	position: relative;
	left: 1ex;
	font-size: 65%;
}
.os-suggest-toggle-def {
	position: absolute;
	top: 0px;
	left: 0px;
	font-size: 65%;
	visibility: hidden;
}

/* Page history styling */
/* the auto-generated edit comments */
.autocomment { color: gray; }
#pagehistory .history-user {
    margin-left: 0.4em;
    margin-right: 0.2em;
}
#pagehistory span.minor { font-weight: bold; }
#pagehistory li { border: 1px solid white; }
#pagehistory li.selected {
    background-color: #f9f9f9;
    border: 1px dashed #aaa;
}

/** Generic minor/bot/newpage styling */
.newpage, .minor, .bot {
	font-weight: bold;
}

/* Special:Contributions styling */
.mw-uctop {
	font-weight: bold;
}

/* Special:ListGroupRights styling */
table.mw-listgrouprights-table tr  {
	vertical-align: top;
}
.listgrouprights-revoked { text-decoration: line-through; }

/* Special:Statistics styling */
td.mw-statistics-numbers {
	text-align: right;
}

/* Special:SpecialPages styling */
h4.mw-specialpagesgroup {
	background-color: #dcdcdc;
	padding: 2px;
	margin: .3em 0em 0em 0em;
}
.mw-specialpagerestricted {
	font-weight: bold;
}

#shared-image-dup, #shared-image-conflict {
	font-style: italic;
}

/* Special:EmailUser styling */
table.mw-emailuser-table {
	width: 98%;
}
td#mw-emailuser-sender, td#mw-emailuser-recipient {
	font-weight: bold;
}

/* Special:Allpages styling */
table.allpageslist {
	background-color: transparent;
}
table.mw-allpages-table-form, table.mw-allpages-table-chunk {
	background-color: transparent;
	width: 100%;
}
td.mw-allpages-alphaindexline {
	text-align: right;
}
td.mw-allpages-nav, p.mw-allpages-nav {
	text-align: right;
	font-size: smaller;
	margin-bottom: 1em;
}
table.mw-allpages-table-form tr  {
	vertical-align: top;
}

/* Special:Prefixindex styling */
table#mw-prefixindex-list-table,
table#mw-prefixindex-nav-table {
	width: 98%;
	background-color: transparent;
}
td#mw-prefixindex-nav-form  {
	font-size: smaller;
	margin-bottom: 1em;
	text-align: right;
	vertical-align: top;
}

/*
 * Recreating deleted page warning
 * Reupload file warning
 * Page protection warning
 * incl. log entries for these warnings
 */
div.mw-warning-with-logexcerpt {
	padding: 3px;
	margin-bottom: 3px;
	border: 2px solid #2F6FAB;
	clear: both;
}
div.mw-warning-with-logexcerpt ul li {
	font-size: 90%;
}

/* (show/hide) revision deletion links */
span.mw-revdelundel-link,
strong.mw-revdelundel-link {
	font-size: 90%;
}
span.mw-revdelundel-hidden,
input.mw-revdelundel-hidden {
	visibility: hidden;
}

td.mw-revdel-checkbox, th.mw-revdel-checkbox {
	padding-right: 10px;
	text-align: center;
}

/* feed links */
a.feedlink {
	background: url("images/feed-icon.png") center left no-repeat;
	padding-left: 16px;
}

/* Plainlinks - this can be used to switch 
 * off special external link styling */
.plainlinks a {
		background: none !important;
		padding: 0 !important;
}

/* wikitable class for skinning normal tables */
table.wikitable {
    margin: 1em 1em 1em 0;
    background: #f9f9f9;
    border: 1px #aaa solid;
    border-collapse: collapse;
}
.wikitable th, .wikitable td {
    border: 1px #aaa solid;
    padding: 0.2em;
}
.wikitable th {
    background: #f2f2f2;
    text-align: center;
}
.wikitable caption {
    font-weight: bold;
}

/* hide initially collapsed collapsable tables */
table.collapsed tr.collapsable {
	display: none;
}

/* success and error messages */
.success {
	color: green;
	font-size: larger;
}
.error {
	color: red;
	font-size: larger;
}
.errorbox, .successbox {
	font-size: larger;
	border: 2px solid;
	padding: .5em 1em;
	float: left;
	margin-bottom: 2em;
	color: #000;
}
.errorbox {
	border-color: red;
	background-color: #fff2f2;
}
.successbox {
	border-color: green;
	background-color: #dfd;
}
.errorbox h2, .successbox h2 {
	font-size: 1em;
	font-weight: bold;
	display: inline;
	margin: 0 .5em 0 0;
	border: none;
}

.visualClear {
	clear: both;
}

#mw_trackbacks {
	border: solid 1px #bbbbff;
	background-color: #eeeeff;
	padding: 0.2em;
}

/*
  Table pager (e.g. Special:Imagelist)
  - remove underlines from the navigation link
  - collapse borders
  - set the borders to outsets (similar to Special:Allmessages)
  - remove line wrapping for all td and th, set background color
  - restore line wrapping for the last two table cells (description and size)
*/
.TablePager { min-width: 80%; }
.TablePager_nav a { text-decoration: none; }
.TablePager { border-collapse: collapse; }
.TablePager, .TablePager td, .TablePager th { 
	border: 1px solid #aaaaaa;
	padding: 0 0.15em 0 0.15em;
}
.TablePager th { background-color: #eeeeff }
.TablePager td { background-color: #ffffff }
.TablePager tr:hover td { background-color: #eeeeff }

.imagelist td, .imagelist th { white-space: nowrap }
.imagelist .TablePager_col_links { background-color: #eeeeff }
.imagelist .TablePager_col_img_description { white-space: normal }
.imagelist th.TablePager_sort { background-color: #ccccff }

 /* Allmessages table */
#mw-allmessagestable .allmessages-customised td.am_default {
	background-color: #fcffc4;
}

#mw-allmessagestable tr.allmessages-customised:hover td.am_default {
	background-color: #faff90;
}

#mw-allmessagestable td.am_actual {
	background-color: #e2ffe2;
}

#mw-allmessagestable tr.allmessages-customised:hover + tr.allmessages-customised td.am_actual {
	background-color: #b1ffb1;
}

/* filetoc */
ul#filetoc {
	text-align: center;
	border: 1px solid #aaaaaa;
	background-color: #f9f9f9;
	padding: 5px;
	font-size: 95%;
	margin-bottom: 0.5em;
	margin-left: 0;
	margin-right: 0;
}

#filetoc li {
	display: inline;
	list-style-type: none;
	padding-right: 2em;
}

/* Classes for EXIF data display */
table.mw_metadata {
	font-size: 0.8em;
	margin-left: 0.5em;
	margin-bottom: 0.5em;
	width: 300px;
}

table.mw_metadata caption {
	font-weight: bold;
}

table.mw_metadata th {
	font-weight: normal;
}

table.mw_metadata td {
	padding: 0.1em;
}

table.mw_metadata {
	border: none;
	border-collapse: collapse;
}

table.mw_metadata td, table.mw_metadata th {
	text-align: center;
	border: 1px solid #aaaaaa;
	padding-left: 0.1em;
	padding-right: 0.1em;
}

table.mw_metadata th {
	background-color: #f9f9f9;
}

table.mw_metadata td {
	background-color: #fcfcfc;
}

/* Galleries */
table.gallery {
	border: 1px solid #ccc;
	margin: 2px;
	padding: 2px;
	background-color: white;
}

table.gallery tr {
	vertical-align: top;
}

table.gallery td {
	vertical-align: top;
	background-color: #f9f9f9;
	border: solid 2px white;
}
table.gallery caption {
	font-weight: bold;
}

div.gallerybox {
	margin: 2px;
}

div.gallerybox div.thumb {
	text-align: center;
	border: 1px solid #ccc;
	margin: 2px;
}

div.gallerytext {
	overflow: hidden;
	font-size: 94%;
	padding: 2px 4px;
}

table.mw-enhanced-rc {
	background: none;
	border:0;
	border-spacing:0;
}
td.mw-enhanced-rc {
	white-space:nowrap;
	padding:0;
	vertical-align:top;
	font-family:monospace
}

#mw-addcategory-prompt {
	display: inline;
	margin-left: 1em;
}
 
#mw-addcategory-prompt input {
	margin-left: 0.5em;
	margin-right: 0.5em;
}
 
.mw-remove-category {
	padding: 8px;
	background-image: url(images/remove.png);
	background-position: center center;
	background-repeat: no-repeat;
}
 
.mw-ajax-addcategory {
	padding-left: 20px;
	background-image: url(images/add.png);
	background-position: left center;
	background-repeat: no-repeat;
}

.mw-ajax-loader {
	background-image: url(images/ajax-loader.gif);
	background-position: center center;
	background-repeat: no-repeat;
	padding: 16px;
	position: relative;
	top: -16px;
}

.mw-small-spinner {
	padding: 10px !important;
	margin-right: 0.6em;
	background-image: url(images/spinner.gif);
	background-position: center center;
	background-repeat: no-repeat;
}

/* Sort arrows added by SortableTables */
a.sortheader {
	margin: 0 0.3em;
}

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=commonPrint.css
Content-Type: text/css; charset=UTF-8; name=commonPrint.css
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/common/commonPrint.css?270
Content-Transfer-Encoding: 8bit

/*
** MediaWiki Print style sheet for CSS2-capable browsers.
** Copyright Gabriel Wicke, http://www.aulinx.de/
**
** Derived from the plone (http://plone.org/) styles
** Copyright Alexander Limi
*/

/* Thanks to A List Apart (http://alistapart.com/) for useful extras */
a.stub,
a.new{ color:#ba0000; text-decoration:none; }

#toc { 
    /*border:1px solid #2f6fab;*/
    border:1px solid #aaaaaa;
    background-color:#f9f9f9;
    padding:5px;
}
.tocindent {
	margin-left: 2em;
}
.tocline {
	margin-bottom: 0px;
}

/* images */
div.floatright { 
    float: right;
    clear: right;
    margin: 0;
    position:relative;
    border: 0.5em solid White;
    border-width: 0.5em 0 0.8em 1.4em;
}
div.floatright p { font-style: italic;} 
div.floatleft { 
    float: left; 
    margin: 0.3em 0.5em 0.5em 0;
    position:relative;
    border: 0.5em solid White;
    border-width: 0.5em 1.4em 0.8em 0;
}
div.floatleft p { font-style: italic; } 
/* thumbnails */
div.thumb {
    margin-bottom: 0.5em;
    border-style: solid; border-color: White;
    width: auto;
    overflow: hidden;
}
div.thumbinner {
    border:1px solid #cccccc;
    padding: 3px !important;
    background-color:#f9f9f9;
    font-size: 94%;
    text-align: center;
}
html .thumbimage {
    border:1px solid #cccccc;
}
html .thumbcaption {
    border: none;
    padding: 0.3em 0 0.1em 0;
}
div.magnify { display: none; }
div.tright {
    float: right;
    clear: right;
    border-width: 0.5em 0 0.8em 1.4em;
}
div.tleft {
    float: left;
    margin-right:0.5em;
    border-width: 0.5em 1.4em 0.8em 0;
}
img.thumbborder {
	border: 1px solid #dddddd;
}

/* table standards */
table.rimage {
    float:right; 
    width:1pt; 
    position:relative;
    margin-left:1em; 
    margin-bottom:1em;
    text-align:center;
}

body {
    background: White;
    /*font-size: 11pt !important;*/
    color: Black;
    margin: 0;
    padding: 0;
}

.noprint,
div#jump-to-nav,
div.top,
div#column-one,
#colophon,
.editsection,
.toctoggle,
.tochidden,
div#f-poweredbyico,
div#f-copyrightico,
li#viewcount,
li#about,
li#disclaimer,
li#privacy,
#mw-hidden-catlinks {
    /* Hides all the elements irrelevant for printing */
    display: none;
}

ul { 
    list-style-type: square;
}

#content {
    background: none;
    border: none ! important;
    padding: 0 ! important;
    margin: 0 ! important;
}
#footer {
	background : white;
	color : black;
    border-top: 1px solid black;
}

h1, h2, h3, h4, h5, h6 {
	font-weight: bold;
}

p, .documentDescription {
    margin: 1em 0 ! important;
    line-height: 1.2em;
}

.tocindent p {
	margin: 0 0 0 0 ! important;
}

pre {
    border: 1pt dashed black;
    white-space: pre;
    font-size: 8pt;
    overflow: auto;
    padding: 1em 0;
	background : white;
	color : black;
}

table.listing,
table.listing td {
    border: 1pt solid black;
    border-collapse: collapse;
}

a {
    color: Black !important;
    background: none !important;
    padding: 0 !important;
}

a:link, a:visited {
    color: #520;
    background: transparent;
    text-decoration: underline;
}

#content a.external.text:after, #content a.external.autonumber:after {
    /* Expand URLs for printing */
    content: " (" attr(href) ") ";
}

#globalWrapper {
    width: 100% !important;
    min-width: 0 !important;
}

#content {
	background : white;
	color : black;
}

#column-content {
    margin: 0 !important;
}

#column-content #content {
    padding: 1em;
    margin: 0 !important;
}
/* MSIE/Win doesn't understand 'inherit' */
a, a.external, a.new, a.stub {
	color: black ! important;
	text-decoration: none ! important;
}

/* Continue ... */
a, a.external, a.new, a.stub {
	color: inherit ! important;
	text-decoration: inherit ! important;
}

img { border: none; }
img.tex { vertical-align: middle; }
span.texhtml { font-family: serif; }

#siteNotice { display: none; }

div.gallerybox {
	border: 1px solid #cccccc;
	background-color:#f9f9f9;
	width:  150px;
}

div.gallerytext {
	overflow: visible;
}       

/*
** Diff rendering
*/
table.diff { background:white; }
td.diff-otitle { background:#ffffff; }
td.diff-ntitle { background:#ffffff; }
td.diff-addedline {
    background:#ccffcc;
    font-size: smaller;
    border: solid 2px black;
}
td.diff-deletedline {
    background:#ffffaa;
    font-size: smaller;
    border: dotted 2px black;
}
td.diff-context {
    background:#eeeeee;
    font-size: smaller;
}
.diffchange {
    color: silver;
    font-weight: bold;
    text-decoration: underline;
}

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/jpeg
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/headbg.jpg
Content-Transfer-Encoding: Base64

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
pqmqalFqtJUGrOhqk4mqUtJqampqa/RqapquqRhbcdOIbqoSWMoZnG01aiZjs3Gf
tdoO6lFFFFFFFFJRRRRRytyX9LwVBqmpqUclytrcHACgBSUqKJRRQALZYAFFABQB
SUUUlFFHK2XClAAAFABCoUAAAABQAFACoFAqKAhl2c6KXHu6AiZdkpKWkprGFopR
FSlAEUAARQAAABFEVAAAKKKKKKAKKTU1TU1KkAoqDWDWE1NTU0NTQ1NV1gqFSWZT
WzU1NTU1KWpOVv6WxSiiiiiikoooooooXkDgoopKWjkF4ABRAoACgABQBAUAEKKK
KSiilLAoAFBBQAAAAAARQAQUAAAEyZoopfLVgkpRQUsKAAAAAAAAAAAAAFAUUUUU
UUUUUUUAAAUUUmpRRRQFFFFFAJRRqUUUUUUUUUUampRSgBRRRRRRRRRRRRRQKBRS
UUUoAABRQAUAFAAAFFABRRRRQFFFAFFFAUUAUACoUUFAABQAUAAUAoIqSlFFFLEK
gUUUUAAoAioqCoKICiCgAAAAAAAAAAAAAAAIogKAAAAIoAigAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAD//Z

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/bullet.gif
Content-Transfer-Encoding: Base64

R0lGODlhBQANAIAAAGOMnP///yH5BAEAAAEALAAAAAAFAA0AAAIJjI+pu+APo4Sp
ADs=

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/external.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAFVBMVEVmmcwzmcyZ
zP8AZswAZv////////9E6giVAAAAB3RSTlP///////8AGksDRgAAADhJREFUGFcl
y0ESAEAEA0Ei6/9P3sEcVB8kmrwFyni0bOeyyDpy9JTLEaOhQq7Ongf5FeMhHS/4
AVnsAZubxDVmAAAAAElFTkSuQmCC

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/lock_icon.gif
Content-Transfer-Encoding: Base64

R0lGODlhEAANAPcAACxNdj1xr0F5vUJ6vkR+xESAyEaEzkeFz0uI0UiG0FON006K
0lGM01GM01SO1FSO1FaP1Geb2Wqd2mue23mn33yp4IWw42OZ2Xyp4I625qHD66TF
7LbR8r3W873W88Tb9sTb9sbc9t3s/ev1/+n0//L6//n///T7//3/////////////
/wD/AAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDCH5BAEAACwALAAAAAAQAA0AAAhzAFkIFJihYMGBCAdmGKEC
xQgNABIqHLECgEUOESJKzFBRIQWNCTOYAJlBAUiEC0kmOCkQRICXMGFiCLkiRQkR
HzZYmPCAZYYBBQ4saPDgQQUPPmvezGlBQs+QAggYQMDAgdEOSW3i1DkBAssQFsOK
vTAwIAA7

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/user.gif
Content-Transfer-Encoding: Base64

R0lGODlhEAAQAKU5AFtJMlpJNFxIMU5OTm2XH3aIVJNkK5FmMJZnPbt6NIZzXId0
XpVwQZRzR5p7VI1+baZ3Tdl+Kt1/LIO2JYe5K4q8M4idYZKBbJK/QLqddZfDR5rF
TZ/HVqfMZanNacKVWuKVQ+ejVuelVu21bPC/e5+XjKOjo7rXhr3aiM+1kNi4icff
m8rio83jqNHmrtXotOPEl/HDg/LKjvfaq/ngut3Z1Nvrwd/tx/vqz///////////
/////////////////yH5BAEAAD8ALAAAAAAQABAAAAZiwJ9wSCwafxfF5VhUNBgH
AVO4cKRgHwNg+sjQZrFEYFpSyUihyGD6M4lAEgRbCKnPTaYRjjRYH00vLAUkFhoV
fkQmNy4rJxYcGBQTiEImNi0TKB0bHgSTRX2hon1zpaanP0EAOw==

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=main.css
Content-Type: text/css; charset=UTF-8; name=main.css
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/monobook/main.css?270
Content-Transfer-Encoding: 8bit

/*
** MediaWiki 'monobook' style sheet for CSS2-capable browsers.
** Copyright Gabriel Wicke - http://wikidev.net/
** License: GPL (http://www.gnu.org/copyleft/gpl.html)
**
** Loosely based on http://www.positioniseverything.net/ordered-floats.html by Big John
** and the Plone 2.0 styles, see http://plone.org/ (Alexander Limi,Joe Geldart & Tom Croucher,
** Michael Zeltner and Geir Bækholt)
** All you guys rock :)
*/

#column-content {
	width: 100%;
	float: right;
	margin: 0 0 .6em -12.2em;
	padding: 0;
}
#content {
	margin: 2.8em 0 0 12.2em;
	padding: 0 1em 1em 1em;
	position: relative;
	z-index: 2;
}
#column-one {
	padding-top: 160px;
}
#content {
	background: white;
	color: black;
	border: 1px solid #aaa;
	border-right: none;
	line-height: 1.5em;
}
/* the left column width is specified in class .portlet */

/* Font size:
** We take advantage of keyword scaling- browsers won't go below 9px
** More at http://www.w3.org/2003/07/30-font-size
** http://style.cleverchimp.com/font_size_intervals/altintervals.html
*/

body {
	font: x-small sans-serif;
	background: #f9f9f9 url(headbg.jpg) 0 0 no-repeat;
	color: black;
	margin: 0;
	padding: 0;
}

/* scale back up to a sane default */
#globalWrapper {
	font-size: 127%;
	width: 100%;
	margin: 0;
	padding: 0;
}

/* general styles */

table {
	font-size: 100%;
	color: black;
	/* we don't want the bottom borders of <h2>s to be visible through
	   floated tables */
	background-color: white;
}
fieldset table {
	/* but keep table layouts in forms clean... */
	background: none;
}
a {
	text-decoration: none;
	color: #002bb8;
	background: none;
}
a:visited {
	color: #5a3696;
}
a:active {
	color: #faa700;
}
a:hover {
	text-decoration: underline;
}
a.stub {
	color: #772233;
}
a.new, #p-personal a.new {
	color: #ba0000;
}
a.new:visited, #p-personal a.new:visited {
	color: #a55858;
}

img {
	border: none;
	vertical-align: middle;
}
p {
	margin: .4em 0 .5em 0;
	line-height: 1.5em;
}
p img {
	margin: 0;
}

hr {
	height: 1px;
	color: #aaa;
	background-color: #aaa;
	border: 0;
	margin: .2em 0 .2em 0;
}

h1, h2, h3, h4, h5, h6 {
	color: black;
	background: none;
	font-weight: normal;
	margin: 0;
	padding-top: .5em;
	padding-bottom: .17em;
	border-bottom: 1px solid #aaa;
}
h1 { font-size: 188%; }
h1 .editsection { font-size: 53%; }
h2 { font-size: 150%; }
h2 .editsection { font-size: 67%; }
h3, h4, h5, h6 {
	border-bottom: none;
	font-weight: bold;
}
h3 { font-size: 132%; }
h3 .editsection { font-size: 76%; font-weight: normal; }
h4 { font-size: 116%; }
h4 .editsection { font-size: 86%; font-weight: normal; }
h5 { font-size: 100%; }
h5 .editsection { font-weight: normal; }
h6 { font-size: 80%;  }
h6 .editsection { font-size: 125%; font-weight: normal; }

ul {
	line-height: 1.5em;
	list-style-type: square;
	margin: .3em 0 0 1.5em;
	padding: 0;
	list-style-image: url(bullet.gif);
}
ol {
	line-height: 1.5em;
	margin: .3em 0 0 3.2em;
	padding: 0;
	list-style-image: none;
}
li {
	margin-bottom: .1em;
}
dt {
	font-weight: bold;
	margin-bottom: .1em;
}
dl {
	margin-top: .2em;
	margin-bottom: .5em;
}
dd {
	line-height: 1.5em;
	margin-left: 2em;
	margin-bottom: .1em;
}

fieldset {
	border: 1px solid #2f6fab;
	margin: 1em 0 1em 0;
	padding: 0 1em 1em;
	line-height: 1.5em;
}
fieldset.nested {
	margin: 0 0 0.5em 0;
	padding: 0 0.5em 0.5em;
}
legend {
	padding: .5em;
	font-size: 95%;
}
form {
	border: none;
	margin: 0;
}

textarea {
	width: 100%;
	padding: .1em;
}

input.historysubmit {
	padding: 0 .3em .3em .3em !important;
	font-size: 94%;
	cursor: pointer;
	height: 1.7em !important;
	margin-left: 1.6em;
}
select {
	vertical-align: top;
}
abbr, acronym, .explain {
	border-bottom: 1px dotted black;
	color: black;
	background: none;
	cursor: help;
}
q {
	font-family: Times, "Times New Roman", serif;
	font-style: italic;
}
/* disabled for now
blockquote {
	font-family: Times, "Times New Roman", serif;
	font-style: italic;
}*/
code {
	background-color: #f9f9f9;
}
pre {
	padding: 1em;
	border: 1px dashed #2f6fab;
	color: black;
	background-color: #f9f9f9;
	line-height: 1.1em;
}

/*
** the main content area
*/

#siteSub {
	display: none;
}
#jump-to-nav {
	display: none;
}

#contentSub, #contentSub2 {
	font-size: 84%;
	line-height: 1.2em;
	margin: 0 0 1.4em 1em;
	color: #7d7d7d;
	width: auto;
}
span.subpages {
	display: block;
}

/* Some space under the headers in the content area */
#bodyContent h1, #bodyContent h2 {
	margin-bottom: .6em;
}
#bodyContent h3, #bodyContent h4, #bodyContent h5 {
	margin-bottom: .3em;
}
#firstHeading {
	margin-bottom: .1em;
	/* These two rules hack around bug 2013 (fix for more limited bug 11325).
	   When bug 2013 is fixed properly, they should be removed. */
	line-height: 1.2em;
	padding-bottom: 0;
}

/* user notification thing */
.usermessage {
	background-color: #ffce7b;
	border: 1px solid #ffa500;
	color: black;
	font-weight: bold;
	margin: 2em 0 1em;
	padding: .5em 1em;
	vertical-align: middle;
}
#siteNotice {
	text-align: center;
	font-size: 95%;
	padding: 0 0.9em;
}
#siteNotice p {
	margin: 0;
	padding: 0;
}

.catlinks {
	border: 1px solid #aaa;
	background-color: #f9f9f9;
	padding: 5px;
	margin-top: 1em;
	clear: both;
}
/* currently unused, intended to be used by a metadata box
in the bottom-right corner of the content area */
.documentDescription {
	/* The summary text describing the document */
	font-weight: bold;
	display: block;
	margin: 1em 0;
	line-height: 1.5em;
}
.documentByLine {
	text-align: right;
	font-size: 90%;
	clear: both;
	font-weight: normal;
	color: #76797c;
}

/* emulate center */
.center {
	width: 100%;
	text-align: center;
}
*.center * {
	margin-left: auto;
	margin-right: auto;
}
/* small for tables and similar */
.small, .small * {
	font-size: 94%;
}
table.small {
	font-size: 100%;
}

/*
** content styles
*/

#toc,
.toc,
.mw-warning {
	border: 1px solid #aaa;
	background-color: #f9f9f9;
	padding: 5px;
	font-size: 95%;
}
#toc h2,
.toc h2 {
	display: inline;
	border: none;
	padding: 0;
	font-size: 100%;
	font-weight: bold;
}
#toc #toctitle,
.toc #toctitle,
#toc .toctitle,
.toc .toctitle {
	text-align: center;
}
#toc ul,
.toc ul {
	list-style-type: none;
	list-style-image: none;
	margin-left: 0;
	padding-left: 0;
	text-align: left;
}
#toc ul ul,
.toc ul ul {
	margin: 0 0 0 2em;
}
#toc .toctoggle,
.toc .toctoggle {
	font-size: 94%;
}

.mw-warning {
	margin-left: 50px;
	margin-right: 50px;
	text-align: center;
}

/* images */
div.floatright, table.floatright {
	clear: right;
	float: right;
	position: relative;
	margin: 0 0 .5em .5em;
	border: 0;
/*
	border: .5em solid white;
	border-width: .5em 0 .8em 1.4em;
*/
}
div.floatright p { font-style: italic; }
div.floatleft, table.floatleft {
	float: left;
	clear: left;
	position: relative;
	margin: 0 .5em .5em 0;
	border: 0;
/*
	margin: .3em .5em .5em 0;
	border: .5em solid white;
	border-width: .5em 1.4em .8em 0;
*/
}
div.floatleft p { font-style: italic; }
/* thumbnails */
div.thumb {
	margin-bottom: .5em;
	border-style: solid;
	border-color: white;
	width: auto;
}
div.thumbinner {
	border: 1px solid #ccc;
	padding: 3px !important;
	background-color: #f9f9f9;
	font-size: 94%;
	text-align: center;
	overflow: hidden;
}
html .thumbimage {
	border: 1px solid #ccc;
}
html .thumbcaption {
	border: none;
	text-align: left;
	line-height: 1.4em;
	padding: 3px !important;
	font-size: 94%;
}
div.magnify {
	float: right;
	border: none !important;
	background: none !important;
}
div.magnify a, div.magnify img {
	display: block;
	border: none !important;
	background: none !important;
}
div.tright {
	clear: right;
	float: right;
	border-width: .5em 0 .8em 1.4em;
}
div.tleft {
	float: left;
	clear: left;
	margin-right: .5em;
	border-width: .5em 1.4em .8em 0;
}
img.thumbborder {
	border: 1px solid #dddddd;
}
.hiddenStructure {
	display: none;
}

/*
** classes for special content elements like town boxes
** intended to be referenced directly from the wiki src
*/

/*
** User styles
*/
/* table standards */
table.rimage {
	float: right;
	position: relative;
	margin-left: 1em;
	margin-bottom: 1em;
	text-align: center;
}
.toccolours {
	border: 1px solid #aaa;
	background-color: #f9f9f9;
	padding: 5px;
	font-size: 95%;
}

/*
** edit views etc
*/
.special li {
	line-height: 1.4em;
	margin: 0;
	padding: 0;
}

/*
** keep the whitespace in front of the ^=, hides rule from konqueror
** this is css3, the validator doesn't like it when validating as css2
*/
#bodyContent a.external,
#bodyContent a.external[href ^="gopher://"] {
	background: url(external.png) center right no-repeat;
	padding: 0 13px;
}
.rtl #bodyContent a.external,
.rtl #bodyContent a.external[href ^="gopher://"] {
	background-image: url(external-rtl.png);
}
#bodyContent a.external[href ^="https://"],
.link-https {
	background: url(lock_icon.gif) center right no-repeat;
	padding: 0 16px;
}
#bodyContent a.external[href ^="mailto:"],
.link-mailto {
	background: url(mail_icon.gif) center right no-repeat;
	padding: 0 18px;
}
#bodyContent a.external[href ^="news://"] {
	background: url(news_icon.png) center right no-repeat;
	padding: 0 18px;
}
#bodyContent a.external[href ^="ftp://"],
.link-ftp {
	background: url(file_icon.gif) center right no-repeat;
	padding: 0 18px;
}
#bodyContent a.external[href ^="irc://"],
.link-irc {
	background: url(discussionitem_icon.gif) center right no-repeat;
	padding: 0 18px;
}
#bodyContent a.external[href $=".ogg"], #bodyContent a.external[href $=".OGG"],
#bodyContent a.external[href $=".mid"], #bodyContent a.external[href $=".MID"],
#bodyContent a.external[href $=".midi"], #bodyContent a.external[href $=".MIDI"],
#bodyContent a.external[href $=".mp3"], #bodyContent a.external[href $=".MP3"],
#bodyContent a.external[href $=".wav"], #bodyContent a.external[href $=".WAV"],
#bodyContent a.external[href $=".wma"], #bodyContent a.external[href $=".WMA"],
.link-audio {
	background: url("audio.png") center right no-repeat;
	padding: 0 13px;
}
#bodyContent a.external[href $=".ogm"], #bodyContent a.external[href $=".OGM"],
#bodyContent a.external[href $=".avi"], #bodyContent a.external[href $=".AVI"],
#bodyContent a.external[href $=".mpeg"], #bodyContent a.external[href $=".MPEG"],
#bodyContent a.external[href $=".mpg"], #bodyContent a.external[href $=".MPG"],
.link-video {
	background: url("video.png") center right no-repeat;
	padding: 0 13px;
}
#bodyContent a.external[href $=".pdf"], #bodyContent a.external[href $=".PDF"],
#bodyContent a.external[href *=".pdf#"], #bodyContent a.external[href *=".PDF#"],
#bodyContent a.external[href *=".pdf?"], #bodyContent a.external[href *=".PDF?"],
.link-document {
	background: url("document.png") center right no-repeat;
	padding: 0 12px;
}

/* for rtl wikis */
.rtl #bodyContent a.external {
	background-position: left;
	padding-right: 0;
}
.rtl a.feedlink {
	background-position: right;
	padding-right: 16px;
	padding-left: 0;
}

/* correction for ltr wikis */
.ltr #bodyContent a.external {
	padding-left: 0;
}

/* disable interwiki styling */
#bodyContent a.extiw,
#bodyContent a.extiw:active {
	color: #36b;
}
#bodyContent a.external {
	color: #36b;
}
/*
** Structural Elements
*/

/*
** general portlet styles (elements in the quickbar)
*/
.portlet {
	border: none;
	margin: 0 0 .5em;
	padding: 0;
	float: none;
	width: 11.6em;
	overflow: hidden;
}
.portlet h4 {
	font-size: 95%;
	font-weight: normal;
	white-space: nowrap;
}
.portlet h5 {
	background: transparent;
	padding: 0 1em 0 .5em;
	display: inline;
	height: 1em;
	text-transform: lowercase;
	font-size: 91%;
	font-weight: normal;
	white-space: nowrap;
}
.portlet h6 {
	background: #ffae2e;
	border: 1px solid #2f6fab;
	border-style: solid solid none solid;
	padding: 0 1em 0 1em;
	text-transform: lowercase;
	display: block;
	font-size: 1em;
	height: 1.2em;
	font-weight: normal;
	white-space: nowrap;
}
.pBody {
	font-size: 95%;
	background-color: white;
	color: black;
	border-collapse: collapse;
	border: 1px solid #aaa;
	padding: 0 .8em .3em .5em;
}
.portlet h1,
.portlet h2,
.portlet h3,
.portlet h4 {
	margin: 0;
	padding: 0;
}
.portlet ul {
	line-height: 1.5em;
	list-style-type: square;
	list-style-image: url(bullet.gif);
	font-size: 95%;
}
.portlet li {
	padding: 0;
	margin: 0;
}

/*
** Logo properties
*/

#p-logo {
	top: 0;
	left: 0;
	position: absolute; /*needed to use z-index */
	z-index: 3;
	height: 155px;
	width: 12em;
	overflow: visible;
}
#p-logo h5 {
	display: none;
}
#p-logo a,
#p-logo a:hover {
	display: block;
	height: 155px;
	width: 12.2em;
	background-repeat: no-repeat;
	background-position: 35% 50% !important;
	text-decoration: none;
}

/*
** Search portlet
*/
#p-search {
	position: relative;
	z-index: 3;
}
input.searchButton {
	margin-top: 1px;
	font-size: 95%;
}
#searchGoButton {
	padding-left: .5em;
	padding-right: .5em;
	font-weight: bold;
}
#searchInput {
	width: 10.9em;
	margin: 0;
	font-size: 95%;
}
#p-search .pBody {
	padding: .5em .4em .4em .4em;
	text-align: center;
}
#p-search #searchform div div {
	margin-top: .4em;
	font-size: 95%;
}
/*
** the personal toolbar
*/
#p-personal {
	position: absolute;
	left: 0;
	top: 0;
	z-index: 0;
}
#p-personal {
	width: 100%;
	white-space: nowrap;
	padding: 0;
	margin: 0;
	border: none;
	background: none;
	overflow: visible;
	line-height: 1.2em;
}
#p-personal h5 {
	display: none;
}
#p-personal .portlet,
#p-personal .pBody {
	z-index: 0;
	padding: 0;
	margin: 0;
	border: none;
	overflow: visible;
	background: none;
}
/* this is the ul contained in the portlet */
#p-personal ul {
	border: none;
	line-height: 1.4em;
	color: #2f6fab;
	padding: 0 2em 0 3em;
	margin: 0;
	text-align: right;
	list-style: none;
	z-index: 0;
	background: none;
	cursor: default;
}
#p-personal li {
	z-index: 0;
	border: none;
	padding: 0;
	display: inline;
	color: #2f6fab;
	margin-left: 1em;
	line-height: 1.2em;
	background: none;
}
#p-personal li a {
	text-decoration: none;
	color: #005896;
	padding-bottom: .2em;
	background: none;
}
#p-personal li a:hover {
	background-color: white;
	padding-bottom: .2em;
	text-decoration: none;
}
#p-personal li.active a:hover {
	background-color: transparent;
}
/* the icon in front of the user name, single quotes
in bg url to hide it from iemac */
li#pt-userpage,
li#pt-anonuserpage,
li#pt-login {
	background: url(user.gif) top left no-repeat;
	padding-left: 20px;
	text-transform: none;
}
#p-personal ul {
	text-transform: lowercase;
}
#p-personal li.active {
	font-weight: bold;
}
/*
** the page-related actions- page/talk, edit etc
*/
#p-cactions {
	position: absolute;
	top: 1.3em;
	left: 11.5em;
	margin: 0;
	white-space: nowrap;
	width: 76%;
	line-height: 1.1em;
	overflow: visible;
	background: none;
	border-collapse: collapse;
	padding-left: 1em;
	list-style: none;
	font-size: 95%;
}
#p-cactions ul {
	list-style: none;
}
#p-cactions li {
	display: inline;
	border: 1px solid #aaa;
	border-bottom: none;
	padding: 0 0 .1em 0;
	margin: 0 .3em 0 0;
	overflow: visible;
	background: white;
}
#p-cactions li.selected {
	border-color: #fabd23;
	padding: 0 0 .2em 0;
	font-weight: bold;
}
#p-cactions li a {
	background-color: #fbfbfb;
	color: #002bb8;
	border: none;
	padding: 0 .8em .3em;
	position: relative;
	z-index: 0;
	margin: 0;
	text-decoration: none;
}
#p-cactions li.selected a {
	z-index: 3;
	padding: 0 1em .2em!important;
	background-color: white;
}
#p-cactions .new a {
	color: #ba0000;
}
#p-cactions li a:hover {
	z-index: 3;
	text-decoration: none;
	background-color: white;
}
#p-cactions h5 {
	display: none;
}
#p-cactions li.istalk {
	margin-right: 0;
}
#p-cactions li.istalk a {
	padding-right: .5em;
}
#p-cactions #ca-addsection a {
	padding-left: .4em;
	padding-right: .4em;
}
/* offsets to distinguish the tab groups */
li#ca-talk {
	margin-right: 1.6em;
}
li#ca-watch, li#ca-unwatch, li#ca-varlang-0, li#ca-print {
	margin-left: 1.6em;
}
#p-cactions .pBody {
	font-size: 1em;
	background-color: transparent;
	color: inherit;
	border-collapse: inherit;
	border: 0;
	padding: 0;
}
#p-cactions .hiddenStructure {
	display: none;
}
#p-cactions li a {
	text-transform: lowercase;
}

#p-lang {
	position: relative;
	z-index: 3;
}

/* Override text-transform on languages where capitalization is significant */
.capitalize-all-nouns .portlet h5,
.capitalize-all-nouns .portlet h6,
.capitalize-all-nouns #p-personal ul,
.capitalize-all-nouns #p-cactions ul li a {
	text-transform: none;
}

/* TODO: #t-iscite is only used by the Cite extension, come up with some
 * system which allows extensions to add to this file on the fly
 */
#t-ispermalink, #t-iscite {
	color: #999;
}
/*
** footer
*/
#footer {
	background-color: white;
	border-top: 1px solid #fabd23;
	border-bottom: 1px solid #fabd23;
	margin: .6em 0 1em 0;
	padding: .4em 0 1.2em 0;
	text-align: center;
	font-size: 90%;
}
#footer li {
	display: inline;
	margin: 0 1.3em;
}
#f-poweredbyico, #f-copyrightico {
	margin: 0 8px;
	position: relative;
	top: -2px; /* Bump it up just a tad */
}
#f-poweredbyico {
	float: right;
	height: 1%;
}
#f-copyrightico {
	float: left;
	height: 1%;
}

.mw-htmlform-submit {
	font-weight: bold;
	padding-left: .3em;
	padding-right: .3em;
	margin-right: 2em;
}

/* js pref toc */
#preftoc {
	margin: 0;
	padding: 0;
	width: 100%;
	clear: both;
}
#preftoc li {
	background-color: #f0f0f0;
	color: #000;
}
#preftoc li {
	margin: 1px -2px 1px 2px;
	float: left;
	padding: 2px 0 3px 0;
	border: 1px solid #fff;
	border-right-color: #716f64;
	border-bottom: 0;
	position: relative;
	white-space: nowrap;
	list-style-type: none;
	list-style-image: none;
	z-index: 3;
}
#preftoc li.selected {
	font-weight: bold;
	background-color: #f9f9f9;
	border: 1px solid #aaa;
	border-bottom: none;
	cursor: default;
	top: 1px;
	padding-top: 2px;
	margin-right: -3px;
}
#preftoc > li.selected {
	top: 2px;
}
#preftoc a,
#preftoc a:active {
	display: block;
	color: #000;
	padding: 0 .7em;
	position: relative;
	text-decoration: none;
}
#preftoc li.selected a {
	cursor: default;
	text-decoration: none;
}
#preferences {
	margin: 0;
	border: 1px solid #aaa;
	clear: both;
	padding: 1.5em;
	background-color: #F9F9F9;
}
.prefsection {
	border: none;
	padding: 0;
	margin: 0;
}

.prefsection legend {
	font-weight: bold;   
}
.prefsection table, .prefsection legend {
	background-color: #F9F9F9;
}
.mainLegend {
	display: none;
}
td.htmlform-tip {
	font-size: x-small;
	padding: .2em 2em;
	color: #666;
}

.preferences-login {
	clear: both;
	margin-bottom: 1.5em;
}

.prefcache {
	font-size: 90%;
	margin-top: 2em;
}

div#userloginForm form,
div#userlogin form#userlogin2 {
	margin: 0 3em 1em 0;
	border: 1px solid #aaa;
	clear: both;
	padding: 1.5em 2em;
	background-color: #f9f9f9;
	float: left;
}
.rtl div#userloginForm form,
.rtl div#userlogin form#userlogin2 {
	float: right;
}

div#userloginForm table,
div#userlogin form#userlogin2 table {
	background-color: #f9f9f9;
}

div#userloginForm h2,
div#userlogin form#userlogin2 h2 {
	padding-top: 0;
}

div#userlogin .captcha,
div#userloginForm .captcha {
	border: 1px solid #bbb;
	padding: 1.5em 2em;
	background-color: white;
}

#loginend, #signupend {
	clear: both;
}

#userloginprompt, #languagelinks {
	font-size: 85%;
}

#login-sectiontip {
	font-size: 85%;
	line-height: 1.2;
	padding-top: 2em;
}

#userlogin .loginText, #userlogin .loginPassword {
	width: 12em;
}

#userloginlink a, #wpLoginattempt, #wpCreateaccount {
	font-weight: bold;
}

/*
** IE/Mac fixes, hope to find a validating way to move this
** to a separate stylesheet. This would work but doesn't validate:
** @import("IEMacFixes.css");
*/
/* tabs: border on the a, not the div */
* > html #p-cactions li { border: none; }
* > html #p-cactions li a {
	border: 1px solid #aaa;
	border-bottom: none;
}
* > html #p-cactions li.selected a { border-color: #fabd23; }
/* footer icons need a fixed width */
* > html #f-poweredbyico,
* > html #f-copyrightico { width: 88px; }
* > html #bodyContent,
* > html #bodyContent pre {
	overflow-x: auto;
	width: 100%;
	padding-bottom: 25px;
}

/* more IE fixes */
/* float/negative margin brokenness */
* html #footer {margin-top: 0;}
* html #column-content {
	display: inline;
	margin-bottom: 0;
}
* html div.editsection { font-size: smaller; }
#pagehistory li.selected { position: relative; }

/* Mac IE 5.0 fix; floated content turns invisible */
* > html #column-content {
	float: none;
}
* > html #column-one {
	position: absolute;
	left: 0;
	top: 0;
}
* > html #footer {
	margin-left: 13.2em;
}
.redirectText {
	font-size: 150%;
	margin: 5px;
}

.printfooter {
	display: none;
}


div.patrollink {
	clear: both;
}

.sharedUploadNotice {
	font-style: italic;
}

span.updatedmarker {
	color: black;
	background-color: #0f0;
}

.previewnote {
	color: #c00;
	margin-bottom: 1em;
}

.previewnote p {
	text-indent: 3em;
	margin: 0.8em 0;
}

.editExternally {
	border: 1px solid gray;
	background-color: #ffffff;
	padding: 3px;
	margin-top: 0.5em;
	float: left;
	font-size: small;
	text-align: center;
}
.editExternallyHelp {
	font-style: italic;
	color: gray;
}

.toggle {
	margin-left: 2em;
	text-indent: -2em;
}

input#wpSummary {
	width: 80%;
}

/* @bug 1714 */
input#wpSave, input#wpDiff {
	margin-right: 0.33em;
}

#wpSave {
	font-weight: bold;
}

/* Classes for article validation */

table.revisionform_default {
	border: 1px solid #000000;
}

table.revisionform_focus {
	border: 1px solid #000000;
	background-color:#00BBFF;
}

tr.revision_tr_default {
	background-color:#EEEEEE;
}

tr.revision_tr_first {
	background-color:#DDDDDD;
}

p.revision_saved {
	color: green;
	font-weight:bold;
}

/* noarticletext */
div.noarticletext {
	border: 1px solid #ccc;
	background: #fff;
	padding: .2em 1em;
	color: #000;
}

div#searchTargetContainer {
	left:       10px;
	top:        10px;
	width:      90%;
	background: white;
}

div#searchTarget {
	padding:    3px;
	margin:     5px;
	background: #F0F0F0;
	border:     solid 1px blue;
}

div#searchTarget ul li {
	list-style: none;
}

div#searchTarget ul li:before {
	color: orange;
	content: "\00BB \0020";
}

div#searchTargetHide {
	float:right;
	border:solid 1px black;
	background:#DCDCDC;
	padding:2px;
}

#powersearch p {
	margin-top:0px;
}

div.multipageimagenavbox {
   border: solid 1px silver;
   padding: 4px;
   margin: 1em;
   background: #f0f0f0;
}

div.multipageimagenavbox div.thumb {
   border: none;
   margin-left: 2em;
   margin-right: 2em;
}

div.multipageimagenavbox hr {
   margin: 6px;
}

table.multipageimage td {
   text-align: center;
}

.templatesUsed { margin-top: 1.5em; }

.mw-summary-preview {
	margin: 0.1em 0;
}

/* Friendlier slave lag warnings */
div.mw-lag-warn-normal,
div.mw-lag-warn-high {
	padding: 3px;
	text-align: center;
	margin: 3px auto;
}
div.mw-lag-warn-normal {
	border: 1px solid #FFCC66;
	background-color: #FFFFCC;
}
div.mw-lag-warn-high {
	font-weight: bold;
	border: 2px solid #FF0033;
	background-color: #FFCCCC;
}

.MediaTransformError {
	background-color: #ccc;
	padding: 0.1em;
}
.MediaTransformError td {
	text-align: center;
	vertical-align: middle;
	font-size: 90%;
}

/* God-damned hack for the crappy layout */
.os-suggest {
	font-size: 127%;
}

/* Sometimes people don't want personal tools to be lowercase! */
.no-text-transform {
	text-transform: none;
}

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=index.css
Content-Type: text/css; charset=UTF-8; name=index.css
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php?title=MediaWiki:Common.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000
Content-Transfer-Encoding: 8bit

/* CSS placed here will be applied to all skins */
------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=index.css
Content-Type: text/css; charset=UTF-8; name=index.css
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php?title=MediaWiki:Print.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000
Content-Transfer-Encoding: 8bit

/* CSS placed here will affect the print output */
------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=index.css
Content-Type: text/css; charset=UTF-8; name=index.css
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&ctype=text%2Fcss&smaxage=18000&action=raw&maxage=18000
Content-Transfer-Encoding: 8bit

/* CSS placed here will affect users of the Monobook skin */
------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=index.css
Content-Type: text/css; charset=UTF-8; name=index.css
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php?title=-&action=raw&maxage=18000&gen=css
Content-Transfer-Encoding: 8bit

/* generated user stylesheet */
a.new, #quickbar a.new { color: #CC2200; }

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=wikibits.js
Content-Type: application/x-javascript; charset=UTF-8; name=wikibits.js
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/common/wikibits.js?270
Content-Transfer-Encoding: Base64

Ly8gTWVkaWFXaWtpIEphdmFTY3JpcHQgc3VwcG9ydCBmdW5jdGlvbnMKCnZhciBj
bGllbnRQQyA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsgLy8g
R2V0IGNsaWVudCBpbmZvCnZhciBpc19nZWNrbyA9IC9nZWNrby8udGVzdCggY2xp
ZW50UEMgKSAmJgoJIS9raHRtbHxzcG9vZmVyfG5ldHNjYXBlXC83XC4wLy50ZXN0
KGNsaWVudFBDKTsKdmFyIHdlYmtpdF9tYXRjaCA9IGNsaWVudFBDLm1hdGNoKC9h
cHBsZXdlYmtpdFwvKFxkKykvKTsKaWYgKHdlYmtpdF9tYXRjaCkgewoJdmFyIGlz
X3NhZmFyaSA9IGNsaWVudFBDLmluZGV4T2YoJ2FwcGxld2Via2l0JykgIT0gLTEg
JiYKCQljbGllbnRQQy5pbmRleE9mKCdzcG9vZmVyJykgPT0gLTE7Cgl2YXIgaXNf
c2FmYXJpX3dpbiA9IGlzX3NhZmFyaSAmJiBjbGllbnRQQy5pbmRleE9mKCd3aW5k
b3dzJykgIT0gLTE7Cgl2YXIgd2Via2l0X3ZlcnNpb24gPSBwYXJzZUludCh3ZWJr
aXRfbWF0Y2hbMV0pOwp9Ci8vIEZvciBhY2Nlc3NrZXlzOyBub3RlIHRoYXQgRkYz
KyBpcyBpbmNsdWRlZCBoZXJlIQp2YXIgaXNfZmYyID0gL2ZpcmVmb3hcL1syLTld
fG1pbmVmaWVsZFwvMy8udGVzdCggY2xpZW50UEMgKTsKdmFyIGZmMl9idWdzID0g
L2ZpcmVmb3hcLzIvLnRlc3QoIGNsaWVudFBDICk7Ci8vIFRoZXNlIGFyZW4ndCB1
c2VkIGhlcmUsIGJ1dCBzb21lIGN1c3RvbSBzY3JpcHRzIHJlbHkgb24gdGhlbQp2
YXIgaXNfZmYyX3dpbiA9IGlzX2ZmMiAmJiBjbGllbnRQQy5pbmRleE9mKCd3aW5k
b3dzJykgIT0gLTE7CnZhciBpc19mZjJfeDExID0gaXNfZmYyICYmIGNsaWVudFBD
LmluZGV4T2YoJ3gxMScpICE9IC0xOwppZiAoY2xpZW50UEMuaW5kZXhPZignb3Bl
cmEnKSAhPSAtMSkgewoJdmFyIGlzX29wZXJhID0gdHJ1ZTsKCXZhciBpc19vcGVy
YV9wcmVzZXZlbiA9IHdpbmRvdy5vcGVyYSAmJiAhZG9jdW1lbnQuY2hpbGROb2Rl
czsKCXZhciBpc19vcGVyYV9zZXZlbiA9IHdpbmRvdy5vcGVyYSAmJiBkb2N1bWVu
dC5jaGlsZE5vZGVzOwoJdmFyIGlzX29wZXJhXzk1ID0gL29wZXJhXC8oOVwuWzUt
OV18WzEtOV1bMC05XSkvLnRlc3QoIGNsaWVudFBDICk7Cgl2YXIgb3BlcmE2X2J1
Z3MgPSBpc19vcGVyYV9wcmVzZXZlbjsKCXZhciBvcGVyYTdfYnVncyA9IGlzX29w
ZXJhX3NldmVuICYmICFpc19vcGVyYV85NTsKCXZhciBvcGVyYTk1X2J1Z3MgPSAv
b3BlcmFcLyg5XC41KS8udGVzdCggY2xpZW50UEMgKTsKfQovLyBBcyByZWNvbW1l
bmRlZCBieSA8aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5
L21zNTM3NTA5LmFzcHg+LAovLyBhdm9pZGluZyBmYWxzZSBwb3NpdGl2ZXMgZnJv
bSBtb3JvbmljIGV4dGVuc2lvbnMgdGhhdCBhcHBlbmQgdG8gdGhlIElFIFVBCi8v
IHN0cmluZyAoYnVnIDIzMTcxKQp2YXIgaWU2X2J1Z3MgPSBmYWxzZTsKaWYgKCAv
bXNpZSAoWzAtOV17MSx9W1wuMC05XXswLH0pLy5leGVjKCBjbGllbnRQQyApICE9
IG51bGwKJiYgcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgPD0gNi4wICkgewoJaWU2
X2J1Z3MgPSB0cnVlOwp9CgovLyBHbG9iYWwgZXh0ZXJuYWwgb2JqZWN0cyB1c2Vk
IGJ5IHRoaXMgc2NyaXB0LgovKmV4dGVybiB0YSwgc3R5bGVwYXRoLCBza2luICov
CgovLyBhZGQgYW55IG9ubG9hZCBmdW5jdGlvbnMgaW4gdGhpcyBob29rIChwbGVh
c2UgZG9uJ3QgaGFyZC1jb2RlIGFueSBldmVudHMgaW4gdGhlIHhodG1sIHNvdXJj
ZSkKdmFyIGRvbmVPbmxvYWRIb29rOwoKaWYgKCF3aW5kb3cub25sb2FkRnVuY3Rz
KSB7Cgl2YXIgb25sb2FkRnVuY3RzID0gW107Cn0KCmZ1bmN0aW9uIGFkZE9ubG9h
ZEhvb2soIGhvb2tGdW5jdCApIHsKCS8vIEFsbG93cyBhZGQtb24gc2NyaXB0cyB0
byBhZGQgb25sb2FkIGZ1bmN0aW9ucwoJaWYoICFkb25lT25sb2FkSG9vayApIHsK
CQlvbmxvYWRGdW5jdHNbb25sb2FkRnVuY3RzLmxlbmd0aF0gPSBob29rRnVuY3Q7
Cgl9IGVsc2UgewoJCWhvb2tGdW5jdCgpOyAgLy8gYnVnIGluIE1TSUUgc2NyaXB0
IGxvYWRpbmcKCX0KfQoKZnVuY3Rpb24gaG9va0V2ZW50KCBob29rTmFtZSwgaG9v
a0Z1bmN0ICkgewoJYWRkSGFuZGxlciggd2luZG93LCBob29rTmFtZSwgaG9va0Z1
bmN0ICk7Cn0KCmZ1bmN0aW9uIGltcG9ydFNjcmlwdCggcGFnZSApIHsKCS8vIFRP
RE86IG1pZ2h0IHdhbnQgdG8gaW50cm9kdWNlIGEgdXRpbGl0eSBmdW5jdGlvbiB0
byBtYXRjaCB3ZlVybGVuY29kZSgpIGluIFBIUAoJdmFyIHVyaSA9IHdnU2NyaXB0
ICsgJz90aXRsZT0nICsKCQllbmNvZGVVUklDb21wb25lbnQocGFnZS5yZXBsYWNl
KC8gL2csJ18nKSkucmVwbGFjZSgvJTJGL2lnLCcvJykucmVwbGFjZSgvJTNBL2ln
LCc6JykgKwoJCScmYWN0aW9uPXJhdyZjdHlwZT10ZXh0L2phdmFzY3JpcHQnOwoJ
cmV0dXJuIGltcG9ydFNjcmlwdFVSSSggdXJpICk7Cn0KCnZhciBsb2FkZWRTY3Jp
cHRzID0ge307IC8vIGluY2x1ZGVkLXNjcmlwdHMgdHJhY2tlcgpmdW5jdGlvbiBp
bXBvcnRTY3JpcHRVUkkoIHVybCApIHsKCWlmICggbG9hZGVkU2NyaXB0c1t1cmxd
ICkgewoJCXJldHVybiBudWxsOwoJfQoJbG9hZGVkU2NyaXB0c1t1cmxdID0gdHJ1
ZTsKCXZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3NjcmlwdCcgKTsK
CXMuc2V0QXR0cmlidXRlKCAnc3JjJywgdXJsICk7CglzLnNldEF0dHJpYnV0ZSgg
J3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0JyApOwoJZG9jdW1lbnQuZ2V0RWxlbWVu
dHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZCggcyApOwoJcmV0dXJu
IHM7Cn0KCmZ1bmN0aW9uIGltcG9ydFN0eWxlc2hlZXQoIHBhZ2UgKSB7CglyZXR1
cm4gaW1wb3J0U3R5bGVzaGVldFVSSSggd2dTY3JpcHQgKyAnP2FjdGlvbj1yYXcm
Y3R5cGU9dGV4dC9jc3MmdGl0bGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCggcGFn
ZS5yZXBsYWNlKC8gL2csJ18nKSApICk7Cn0KCmZ1bmN0aW9uIGltcG9ydFN0eWxl
c2hlZXRVUkkoIHVybCwgbWVkaWEgKSB7Cgl2YXIgbCA9IGRvY3VtZW50LmNyZWF0
ZUVsZW1lbnQoICdsaW5rJyApOwoJbC50eXBlID0gJ3RleHQvY3NzJzsKCWwucmVs
ID0gJ3N0eWxlc2hlZXQnOwoJbC5ocmVmID0gdXJsOwoJaWYoIG1lZGlhICkgewoJ
CWwubWVkaWEgPSBtZWRpYTsKCX0KCWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdO
YW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoIGwgKTsKCXJldHVybiBsOwp9Cgpm
dW5jdGlvbiBhcHBlbmRDU1MoIHRleHQgKSB7Cgl2YXIgcyA9IGRvY3VtZW50LmNy
ZWF0ZUVsZW1lbnQoICdzdHlsZScgKTsKCXMudHlwZSA9ICd0ZXh0L2Nzcyc7Cglz
LnJlbCA9ICdzdHlsZXNoZWV0JzsKCWlmICggcy5zdHlsZVNoZWV0ICkgewoJCXMu
c3R5bGVTaGVldC5jc3NUZXh0ID0gdGV4dDsgLy8gSUUKCX0gZWxzZSB7CgkJcy5h
cHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIHRleHQgKyAnJyAp
ICk7IC8vIFNhZmFyaSBzb21ldGltZXMgYm9ya3Mgb24gbnVsbAoJfQoJZG9jdW1l
bnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZCgg
cyApOwoJcmV0dXJuIHM7Cn0KCi8vIFNwZWNpYWwgc3R5bGVzaGVldCBsaW5rcyBm
b3IgTW9ub2Jvb2sgb25seSAoc2VlIGJ1ZyAxNDcxNykKaWYgKCB0eXBlb2Ygc3R5
bGVwYXRoICE9ICd1bmRlZmluZWQnICYmIHNraW4gPT0gJ21vbm9ib29rJyApIHsK
CWlmICggb3BlcmE2X2J1Z3MgKSB7CgkJaW1wb3J0U3R5bGVzaGVldFVSSSggc3R5
bGVwYXRoICsgJy8nICsgc2tpbiArICcvT3BlcmE2Rml4ZXMuY3NzJyApOwoJfSBl
bHNlIGlmICggb3BlcmE3X2J1Z3MgKSB7CgkJaW1wb3J0U3R5bGVzaGVldFVSSSgg
c3R5bGVwYXRoICsgJy8nICsgc2tpbiArICcvT3BlcmE3Rml4ZXMuY3NzJyApOwoJ
fSBlbHNlIGlmICggb3BlcmE5NV9idWdzICkgewoJCWltcG9ydFN0eWxlc2hlZXRV
UkkoIHN0eWxlcGF0aCArICcvJyArIHNraW4gKyAnL09wZXJhOUZpeGVzLmNzcycg
KTsKCX0gZWxzZSBpZiAoIGZmMl9idWdzICkgewoJCWltcG9ydFN0eWxlc2hlZXRV
UkkoIHN0eWxlcGF0aCArICcvJyArIHNraW4gKyAnL0ZGMkZpeGVzLmNzcycgKTsK
CX0KfQoKCmlmICggd2dCcmVha0ZyYW1lcyApIHsKCS8vIFVuLXRyYXAgdXMgZnJv
bSBmcmFtZXNldHMKCWlmICggd2luZG93LnRvcCAhPSB3aW5kb3cgKSB7CgkJd2lu
ZG93LnRvcC5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjsKCX0KfQoKZnVuY3Rp
b24gc2hvd1RvY1RvZ2dsZSgpIHsKCWlmICggZG9jdW1lbnQuY3JlYXRlVGV4dE5v
ZGUgKSB7CgkJLy8gVXNlcyBET00gY2FsbHMgdG8gYXZvaWQgZG9jdW1lbnQud3Jp
dGUgKyBYSFRNTCBpc3N1ZXMKCgkJdmFyIGxpbmtIb2xkZXIgPSBkb2N1bWVudC5n
ZXRFbGVtZW50QnlJZCggJ3RvY3RpdGxlJyApOwoJCXZhciBleGlzdGluZ0xpbmsg
PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3RvZ2dsZWxpbmsnICk7CgkJaWYg
KCAhbGlua0hvbGRlciB8fCBleGlzdGluZ0xpbmsgKSB7CgkJCS8vIERvbid0IGFk
ZCB0aGUgdG9nZ2xlIGxpbmsgdHdpY2UKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIG91
dGVyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzcGFuJyApOwoJCW91
dGVyU3Bhbi5jbGFzc05hbWUgPSAndG9jdG9nZ2xlJzsKCgkJdmFyIHRvZ2dsZUxp
bmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYScgKTsKCQl0b2dnbGVMaW5r
LmlkID0gJ3RvZ2dsZWxpbmsnOwoJCXRvZ2dsZUxpbmsuY2xhc3NOYW1lID0gJ2lu
dGVybmFsJzsKCQl0b2dnbGVMaW5rLmhyZWYgPSAnamF2YXNjcmlwdDp0b2dnbGVU
b2MoKSc7CgkJdG9nZ2xlTGluay5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRl
VGV4dE5vZGUoIHRvY0hpZGVUZXh0ICkgKTsKCgkJb3V0ZXJTcGFuLmFwcGVuZENo
aWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggJ1snICkgKTsKCQlvdXRlclNw
YW4uYXBwZW5kQ2hpbGQoIHRvZ2dsZUxpbmsgKTsKCQlvdXRlclNwYW4uYXBwZW5k
Q2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCAnXScgKSApOwoKCQlsaW5r
SG9sZGVyLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggJyAn
ICkgKTsKCQlsaW5rSG9sZGVyLmFwcGVuZENoaWxkKCBvdXRlclNwYW4gKTsKCgkJ
dmFyIGNvb2tpZVBvcyA9IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCAiaGlkZXRv
Yz0iICk7CgkJaWYgKCBjb29raWVQb3MgPiAtMSAmJiBkb2N1bWVudC5jb29raWUu
Y2hhckF0KCBjb29raWVQb3MgKyA4ICkgPT0gMSApIHsKCQkJdG9nZ2xlVG9jKCk7
CgkJfQoJfQp9CgpmdW5jdGlvbiBjaGFuZ2VUZXh0KCBlbCwgbmV3VGV4dCApIHsK
CS8vIFNhZmFyaSB3b3JrIGFyb3VuZAoJaWYgKCBlbC5pbm5lclRleHQgKSB7CgkJ
ZWwuaW5uZXJUZXh0ID0gbmV3VGV4dDsKCX0gZWxzZSBpZiAoIGVsLmZpcnN0Q2hp
bGQgJiYgZWwuZmlyc3RDaGlsZC5ub2RlVmFsdWUgKSB7CgkJZWwuZmlyc3RDaGls
ZC5ub2RlVmFsdWUgPSBuZXdUZXh0OwoJfQp9CgpmdW5jdGlvbiB0b2dnbGVUb2Mo
KSB7Cgl2YXIgdG9jbWFpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAndG9j
JyApOwoJdmFyIHRvYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2MnKS5n
ZXRFbGVtZW50c0J5VGFnTmFtZSgndWwnKVswXTsKCXZhciB0b2dnbGVMaW5rID0g
ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd0b2dnbGVsaW5rJyApOwoKCWlmICgg
dG9jICYmIHRvZ2dsZUxpbmsgJiYgdG9jLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUn
ICkgewoJCWNoYW5nZVRleHQoIHRvZ2dsZUxpbmssIHRvY0hpZGVUZXh0ICk7CgkJ
dG9jLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwoJCWRvY3VtZW50LmNvb2tpZSA9
ICJoaWRldG9jPTAiOwoJCXRvY21haW4uY2xhc3NOYW1lID0gJ3RvYyc7Cgl9IGVs
c2UgewoJCWNoYW5nZVRleHQoIHRvZ2dsZUxpbmssIHRvY1Nob3dUZXh0ICk7CgkJ
dG9jLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgkJZG9jdW1lbnQuY29va2llID0g
ImhpZGV0b2M9MSI7CgkJdG9jbWFpbi5jbGFzc05hbWUgPSAndG9jIHRvY2hpZGRl
bic7Cgl9Cn0KCnZhciBtd0VkaXRCdXR0b25zID0gW107CnZhciBtd0N1c3RvbUVk
aXRCdXR0b25zID0gW107IC8vIGVnIHRvIGFkZCBpbiBNZWRpYVdpa2k6Q29tbW9u
LmpzCgpmdW5jdGlvbiBlc2NhcGVRdW90ZXMoIHRleHQgKSB7Cgl2YXIgcmUgPSBu
ZXcgUmVnRXhwKCAiJyIsICJnIiApOwoJdGV4dCA9IHRleHQucmVwbGFjZSggcmUs
ICJcXCciICk7CglyZSA9IG5ldyBSZWdFeHAoICJcXG4iLCAiZyIgKTsKCXRleHQg
PSB0ZXh0LnJlcGxhY2UoIHJlLCAiXFxuIiApOwoJcmV0dXJuIGVzY2FwZVF1b3Rl
c0hUTUwoIHRleHQgKTsKfQoKZnVuY3Rpb24gZXNjYXBlUXVvdGVzSFRNTCggdGV4
dCApIHsKCXZhciByZSA9IG5ldyBSZWdFeHAoICcmJywgImciICk7Cgl0ZXh0ID0g
dGV4dC5yZXBsYWNlKCByZSwgIiZhbXA7IiApOwoJcmUgPSBuZXcgUmVnRXhwKCAn
IicsICJnIiApOwoJdGV4dCA9IHRleHQucmVwbGFjZSggcmUsICImcXVvdDsiICk7
CglyZSA9IG5ldyBSZWdFeHAoICc8JywgImciICk7Cgl0ZXh0ID0gdGV4dC5yZXBs
YWNlKCByZSwgIiZsdDsiICk7CglyZSA9IG5ldyBSZWdFeHAoICc+JywgImciICk7
Cgl0ZXh0ID0gdGV4dC5yZXBsYWNlKCByZSwgIiZndDsiICk7CglyZXR1cm4gdGV4
dDsKfQoKLyoqCiAqIFNldCB0aGUgYWNjZXNza2V5IHByZWZpeCBiYXNlZCBvbiBi
cm93c2VyIGRldGVjdGlvbi4KICovCnZhciB0b29sdGlwQWNjZXNzS2V5UHJlZml4
ID0gJ2FsdC0nOwppZiAoIGlzX29wZXJhICkgewoJdG9vbHRpcEFjY2Vzc0tleVBy
ZWZpeCA9ICdzaGlmdC1lc2MtJzsKfSBlbHNlIGlmICggIWlzX3NhZmFyaV93aW4g
JiYgaXNfc2FmYXJpICYmIHdlYmtpdF92ZXJzaW9uID4gNTI2ICkgewoJdG9vbHRp
cEFjY2Vzc0tleVByZWZpeCA9ICdjdHJsLWFsdC0nOwp9IGVsc2UgaWYgKCAhaXNf
c2FmYXJpX3dpbiAmJiAoIGlzX3NhZmFyaQoJCXx8IGNsaWVudFBDLmluZGV4T2Yo
J21hYycpICE9IC0xCgkJfHwgY2xpZW50UEMuaW5kZXhPZigna29ucXVlcm9yJykg
IT0gLTEgKSApIHsKCXRvb2x0aXBBY2Nlc3NLZXlQcmVmaXggPSAnY3RybC0nOwp9
IGVsc2UgaWYgKCBpc19mZjIgKSB7Cgl0b29sdGlwQWNjZXNzS2V5UHJlZml4ID0g
J2FsdC1zaGlmdC0nOwp9CnZhciB0b29sdGlwQWNjZXNzS2V5UmVnZXhwID0gL1xb
KGN0cmwtKT8oYWx0LSk/KHNoaWZ0LSk/KGVzYy0pPyguKVxdJC87CgovKioKICog
QWRkIHRoZSBhcHByb3ByaWF0ZSBwcmVmaXggdG8gdGhlIGFjY2Vzc2tleSBzaG93
biBpbiB0aGUgdG9vbHRpcC4KICogSWYgdGhlIG5vZGVMaXN0IHBhcmFtZXRlciBp
cyBnaXZlbiwgb25seSB0aG9zZSBub2RlcyBhcmUgdXBkYXRlZDsKICogb3RoZXJ3
aXNlLCBhbGwgdGhlIG5vZGVzIHRoYXQgd2lsbCBwcm9iYWJseSBoYXZlIGFjY2Vz
c2tleXMgYnkKICogZGVmYXVsdCBhcmUgdXBkYXRlZC4KICoKICogQHBhcmFtIEFy
cmF5IG5vZGVMaXN0IC0tIGxpc3Qgb2YgZWxlbWVudHMgdG8gdXBkYXRlCiAqLwpm
dW5jdGlvbiB1cGRhdGVUb29sdGlwQWNjZXNzS2V5cyggbm9kZUxpc3QgKSB7Cglp
ZiAoICFub2RlTGlzdCApIHsKCQkvLyBSYXRoZXIgdGhhbiBzY2FuIGFsbCBsaW5r
cyBvbiB0aGUgd2hvbGUgcGFnZSwgd2UgY2FuIGp1c3Qgc2NhbiB0aGVzZQoJCS8v
IGNvbnRhaW5lcnMgd2hpY2ggY29udGFpbiB0aGUgcmVsZXZhbnQgbGlua3MuIFRo
aXMgaXMgcmVhbGx5IGp1c3QgYW4KCQkvLyBvcHRpbWl6YXRpb24gdGVjaG5pcXVl
LgoJCXZhciBsaW5rQ29udGFpbmVycyA9IFsKCQkJJ2NvbHVtbi1vbmUnLCAvLyBN
b25vYm9vayBhbmQgTW9kZXJuCgkJCSdtdy1oZWFkJywgJ213LXBhbmVsJywgJ3At
bG9nbycgLy8gVmVjdG9yCgkJXTsKCQlmb3IgKCB2YXIgaSBpbiBsaW5rQ29udGFp
bmVycyApIHsKCQkJdmFyIGxpbmtDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVt
ZW50QnlJZCggbGlua0NvbnRhaW5lcnNbaV0gKTsKCQkJaWYgKCBsaW5rQ29udGFp
bmVyICkgewoJCQkJdXBkYXRlVG9vbHRpcEFjY2Vzc0tleXMoIGxpbmtDb250YWlu
ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdhJyApICk7CgkJCX0KCQl9CgkJLy8g
dGhlc2UgYXJlIHJhcmUgZW5vdWdoIHRoYXQgbm8gc3VjaCBvcHRpbWl6YXRpb24g
aXMgbmVlZGVkCgkJdXBkYXRlVG9vbHRpcEFjY2Vzc0tleXMoIGRvY3VtZW50Lmdl
dEVsZW1lbnRzQnlUYWdOYW1lKCAnaW5wdXQnICkgKTsKCQl1cGRhdGVUb29sdGlw
QWNjZXNzS2V5cyggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdsYWJl
bCcgKSApOwoJCXJldHVybjsKCX0KCglmb3IgKCB2YXIgaSA9IDA7IGkgPCBub2Rl
TGlzdC5sZW5ndGg7IGkrKyApIHsKCQl2YXIgZWxlbWVudCA9IG5vZGVMaXN0W2ld
OwoJCXZhciB0aXAgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSggJ3RpdGxlJyApOwoJ
CWlmICggdGlwICYmIHRvb2x0aXBBY2Nlc3NLZXlSZWdleHAuZXhlYyggdGlwICkg
KSB7CgkJCXRpcCA9IHRpcC5yZXBsYWNlKHRvb2x0aXBBY2Nlc3NLZXlSZWdleHAs
CgkJCQkJICAnWycgKyB0b29sdGlwQWNjZXNzS2V5UHJlZml4ICsgIiQ1XSIpOwoJ
CQllbGVtZW50LnNldEF0dHJpYnV0ZSggJ3RpdGxlJywgdGlwICk7CgkJfQoJfQp9
CgovKioKICogQWRkIGEgbGluayB0byBvbmUgb2YgdGhlIHBvcnRsZXQgbWVudXMg
b24gdGhlIHBhZ2UsIGluY2x1ZGluZzoKICoKICogcC1jYWN0aW9uczogQ29udGVu
dCBhY3Rpb25zIChzaG93biBhcyB0YWJzIGFib3ZlIHRoZSBtYWluIGNvbnRlbnQg
aW4gTW9ub2Jvb2spCiAqIHAtcGVyc29uYWw6IFBlcnNvbmFsIHRvb2xzIChzaG93
biBhdCB0aGUgdG9wIHJpZ2h0IG9mIHRoZSBwYWdlIGluIE1vbm9ib29rKQogKiBw
LW5hdmlnYXRpb246IE5hdmlnYXRpb24KICogcC10YjogVG9vbGJveAogKgogKiBU
aGlzIGZ1bmN0aW9uIGV4aXN0cyBmb3IgdGhlIGNvbnZlbmllbmNlIG9mIGN1c3Rv
bSBKUyBhdXRob3JzLiAgQWxsCiAqIGJ1dCB0aGUgZmlyc3QgdGhyZWUgcGFyYW1l
dGVycyBhcmUgb3B0aW9uYWwsIHRob3VnaCBwcm92aWRpbmcgYXQKICogbGVhc3Qg
YW4gaWQgYW5kIGEgdG9vbHRpcCBpcyByZWNvbW1lbmRlZC4KICoKICogQnkgZGVm
YXVsdCB0aGUgbmV3IGxpbmsgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kIG9mIHRo
ZSBsaXN0LiAgVG8KICogYWRkIHRoZSBsaW5rIGJlZm9yZSBhIGdpdmVuIGV4aXN0
aW5nIGl0ZW0sIHBhc3MgdGhlIERPTSBub2RlIG9mCiAqIHRoYXQgaXRlbSAoZWFz
aWx5IG9idGFpbmVkIHdpdGggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoKSkgYXMg
dGhlCiAqIG5leHRub2RlIHBhcmFtZXRlcjsgdG8gYWRkIHRoZSBsaW5rIF9hZnRl
cl8gYW4gZXhpc3RpbmcgaXRlbSwgcGFzcwogKiB0aGUgbm9kZSdzIG5leHRTaWJs
aW5nIGluc3RlYWQuCiAqCiAqIEBwYXJhbSBTdHJpbmcgcG9ydGxldCAtLSBpZCBv
ZiB0aGUgdGFyZ2V0IHBvcnRsZXQgKCJwLWNhY3Rpb25zIiwgInAtcGVyc29uYWwi
LCAicC1uYXZpZ2F0aW9uIiBvciAicC10YiIpCiAqIEBwYXJhbSBTdHJpbmcgaHJl
ZiAtLSBsaW5rIFVSTAogKiBAcGFyYW0gU3RyaW5nIHRleHQgLS0gbGluayB0ZXh0
ICh3aWxsIGJlIGF1dG9tYXRpY2FsbHkgbG93ZXJjYXNlZCBieSBDU1MgZm9yIHAt
Y2FjdGlvbnMgaW4gTW9ub2Jvb2spCiAqIEBwYXJhbSBTdHJpbmcgaWQgLS0gaWQg
b2YgdGhlIG5ldyBpdGVtLCBzaG91bGQgYmUgdW5pcXVlIGFuZCBwcmVmZXJhYmx5
IGhhdmUgdGhlIGFwcHJvcHJpYXRlIHByZWZpeCAoImNhLSIsICJwdC0iLCAibi0i
IG9yICJ0LSIpCiAqIEBwYXJhbSBTdHJpbmcgdG9vbHRpcCAtLSB0ZXh0IHRvIHNo
b3cgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBsaW5rLCB3aXRob3V0IGFjY2Vzc2tl
eSBzdWZmaXgKICogQHBhcmFtIFN0cmluZyBhY2Nlc3NrZXkgLS0gYWNjZXNza2V5
IHRvIGFjdGl2YXRlIHRoaXMgbGluayAob25lIGNoYXJhY3RlciwgdHJ5IHRvIGF2
b2lkIGNvbmZsaWN0cykKICogQHBhcmFtIE5vZGUgbmV4dG5vZGUgLS0gdGhlIERP
TSBub2RlIGJlZm9yZSB3aGljaCB0aGUgbmV3IGl0ZW0gc2hvdWxkIGJlIGFkZGVk
LCBzaG91bGQgYmUgYW5vdGhlciBpdGVtIGluIHRoZSBzYW1lIGxpc3QKICoKICog
QHJldHVybiBOb2RlIC0tIHRoZSBET00gbm9kZSBvZiB0aGUgbmV3IGl0ZW0gKGFu
IExJIGVsZW1lbnQpIG9yIG51bGwKICovCmZ1bmN0aW9uIGFkZFBvcnRsZXRMaW5r
KCBwb3J0bGV0LCBocmVmLCB0ZXh0LCBpZCwgdG9vbHRpcCwgYWNjZXNza2V5LCBu
ZXh0bm9kZSApIHsKCXZhciByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQo
IHBvcnRsZXQgKTsKCWlmICggIXJvb3QgKSB7CgkJcmV0dXJuIG51bGw7Cgl9Cgl2
YXIgbm9kZSA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICd1bCcgKVswXTsK
CWlmICggIW5vZGUgKSB7CgkJcmV0dXJuIG51bGw7Cgl9CgoJLy8gdW5oaWRlIHBv
cnRsZXQgaWYgaXQgd2FzIGhpZGRlbiBiZWZvcmUKCXJvb3QuY2xhc3NOYW1lID0g
cm9vdC5jbGFzc05hbWUucmVwbGFjZSggLyhefCApZW1wdHlQb3J0bGV0KCB8JCkv
LCAiJDIiICk7CgoJdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAn
c3BhbicgKTsKCXNwYW4uYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHRO
b2RlKCB0ZXh0ICkgKTsKCgl2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1l
bnQoICdhJyApOwoJbGluay5hcHBlbmRDaGlsZCggc3BhbiApOwoJbGluay5ocmVm
ID0gaHJlZjsKCgl2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICds
aScgKTsKCWl0ZW0uYXBwZW5kQ2hpbGQoIGxpbmsgKTsKCWlmICggaWQgKSB7CgkJ
aXRlbS5pZCA9IGlkOwoJfQoKCWlmICggYWNjZXNza2V5ICkgewoJCWxpbmsuc2V0
QXR0cmlidXRlKCAnYWNjZXNza2V5JywgYWNjZXNza2V5ICk7CgkJdG9vbHRpcCAr
PSAnIFsnICsgYWNjZXNza2V5ICsgJ10nOwoJfQoJaWYgKCB0b29sdGlwICkgewoJ
CWxpbmsuc2V0QXR0cmlidXRlKCAndGl0bGUnLCB0b29sdGlwICk7Cgl9CglpZiAo
IGFjY2Vzc2tleSAmJiB0b29sdGlwICkgewoJCXVwZGF0ZVRvb2x0aXBBY2Nlc3NL
ZXlzKCBuZXcgQXJyYXkoIGxpbmsgKSApOwoJfQoKCWlmICggbmV4dG5vZGUgJiYg
bmV4dG5vZGUucGFyZW50Tm9kZSA9PSBub2RlICkgewoJCW5vZGUuaW5zZXJ0QmVm
b3JlKCBpdGVtLCBuZXh0bm9kZSApOwoJfSBlbHNlIHsKCQlub2RlLmFwcGVuZENo
aWxkKCBpdGVtICk7ICAvLyBJRSBjb21wYXRpYmlsaXR5ICg/KQoJfQoKCXJldHVy
biBpdGVtOwp9CgpmdW5jdGlvbiBnZXRJbm5lclRleHQoIGVsICkgewoJaWYgKCB0
eXBlb2YgZWwgPT0gJ3N0cmluZycgKSB7CgkJcmV0dXJuIGVsOwoJfQoJaWYgKCB0
eXBlb2YgZWwgPT0gJ3VuZGVmaW5lZCcgKSB7CgkJcmV0dXJuIGVsOwoJfQoJaWYg
KCBlbC50ZXh0Q29udGVudCApIHsKCQlyZXR1cm4gZWwudGV4dENvbnRlbnQ7IC8v
IG5vdCBuZWVkZWQgYnV0IGl0IGlzIGZhc3RlcgoJfQoJaWYgKCBlbC5pbm5lclRl
eHQgKSB7CgkJcmV0dXJuIGVsLmlubmVyVGV4dDsgLy8gSUUgZG9lc24ndCBoYXZl
IHRleHRDb250ZW50Cgl9Cgl2YXIgc3RyID0gJyc7CgoJdmFyIGNzID0gZWwuY2hp
bGROb2RlczsKCXZhciBsID0gY3MubGVuZ3RoOwoJZm9yICggdmFyIGkgPSAwOyBp
IDwgbDsgaSsrICkgewoJCXN3aXRjaCAoIGNzW2ldLm5vZGVUeXBlICkgewoJCQlj
YXNlIDE6IC8vIEVMRU1FTlRfTk9ERQoJCQkJc3RyICs9IHRzX2dldElubmVyVGV4
dCggY3NbaV0gKTsKCQkJCWJyZWFrOwoJCQljYXNlIDM6CS8vIFRFWFRfTk9ERQoJ
CQkJc3RyICs9IGNzW2ldLm5vZGVWYWx1ZTsKCQkJCWJyZWFrOwoJCX0KCX0KCXJl
dHVybiBzdHI7Cn0KCi8qIER1bW15IGZvciBkZXByZWNhdGVkIGZ1bmN0aW9uICov
CndpbmRvdy50YSA9IFtdOwpmdW5jdGlvbiBha2V5dHQoIGRvSWQgKSB7Cn0KCnZh
ciBjaGVja2JveGVzOwp2YXIgbGFzdENoZWNrYm94OwoKZnVuY3Rpb24gc2V0dXBD
aGVja2JveFNoaWZ0Q2xpY2soKSB7CgljaGVja2JveGVzID0gW107CglsYXN0Q2hl
Y2tib3ggPSBudWxsOwoJdmFyIGlucHV0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRz
QnlUYWdOYW1lKCAnaW5wdXQnICk7CglhZGRDaGVja2JveENsaWNrSGFuZGxlcnMo
IGlucHV0cyApOwp9CgpmdW5jdGlvbiBhZGRDaGVja2JveENsaWNrSGFuZGxlcnMo
IGlucHV0cywgc3RhcnQgKSB7CglpZiAoICFzdGFydCApIHsKCQlzdGFydCA9IDA7
Cgl9CgoJdmFyIGZpbmlzaCA9IHN0YXJ0ICsgMjUwOwoJaWYgKCBmaW5pc2ggPiBp
bnB1dHMubGVuZ3RoICkgewoJCWZpbmlzaCA9IGlucHV0cy5sZW5ndGg7Cgl9CgoJ
Zm9yICggdmFyIGkgPSBzdGFydDsgaSA8IGZpbmlzaDsgaSsrICkgewoJCXZhciBj
YiA9IGlucHV0c1tpXTsKCQlpZiAoICFjYi50eXBlIHx8IGNiLnR5cGUudG9Mb3dl
ckNhc2UoKSAhPSAnY2hlY2tib3gnICkgewoJCQljb250aW51ZTsKCQl9CgkJdmFy
IGVuZCA9IGNoZWNrYm94ZXMubGVuZ3RoOwoJCWNoZWNrYm94ZXNbZW5kXSA9IGNi
OwoJCWNiLmluZGV4ID0gZW5kOwoJCWNiLm9uY2xpY2sgPSBjaGVja2JveENsaWNr
SGFuZGxlcjsKCX0KCglpZiAoIGZpbmlzaCA8IGlucHV0cy5sZW5ndGggKSB7CgkJ
c2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCWFkZENoZWNrYm94Q2xpY2tIYW5k
bGVycyggaW5wdXRzLCBmaW5pc2ggKTsKCQl9LCAyMDAgKTsKCX0KfQoKZnVuY3Rp
b24gY2hlY2tib3hDbGlja0hhbmRsZXIoIGUgKSB7CglpZiAoIHR5cGVvZiBlID09
ICd1bmRlZmluZWQnICkgewoJCWUgPSB3aW5kb3cuZXZlbnQ7Cgl9CglpZiAoICFl
LnNoaWZ0S2V5IHx8IGxhc3RDaGVja2JveCA9PT0gbnVsbCApIHsKCQlsYXN0Q2hl
Y2tib3ggPSB0aGlzLmluZGV4OwoJCXJldHVybiB0cnVlOwoJfQoJdmFyIGVuZFN0
YXRlID0gdGhpcy5jaGVja2VkOwoJdmFyIHN0YXJ0LCBmaW5pc2g7CglpZiAoIHRo
aXMuaW5kZXggPCBsYXN0Q2hlY2tib3ggKSB7CgkJc3RhcnQgPSB0aGlzLmluZGV4
ICsgMTsKCQlmaW5pc2ggPSBsYXN0Q2hlY2tib3g7Cgl9IGVsc2UgewoJCXN0YXJ0
ID0gbGFzdENoZWNrYm94OwoJCWZpbmlzaCA9IHRoaXMuaW5kZXggLSAxOwoJfQoJ
Zm9yICggdmFyIGkgPSBzdGFydDsgaSA8PSBmaW5pc2g7ICsraSApIHsKCQljaGVj
a2JveGVzW2ldLmNoZWNrZWQgPSBlbmRTdGF0ZTsKCQlpZiggaSA+IHN0YXJ0ICYm
IHR5cGVvZiBjaGVja2JveGVzW2ldLm9uY2hhbmdlID09ICdmdW5jdGlvbicgKSB7
CgkJCWNoZWNrYm94ZXNbaV0ub25jaGFuZ2UoKTsgLy8gZmlyZSB0cmlnZ2VycwoJ
CX0KCX0KCWxhc3RDaGVja2JveCA9IHRoaXMuaW5kZXg7CglyZXR1cm4gdHJ1ZTsK
fQoKCi8qCglXcml0dGVuIGJ5IEpvbmF0aGFuIFNub29rLCBodHRwOi8vd3d3LnNu
b29rLmNhL2pvbmF0aGFuCglBZGQtb25zIGJ5IFJvYmVydCBOeW1hbiwgaHR0cDov
L3d3dy5yb2JlcnRueW1hbi5jb20KCUF1dGhvciBzYXlzICJUaGUgY3JlZGl0IGNv
bW1lbnQgaXMgYWxsIGl0IHRha2VzLCBubyBsaWNlbnNlLiBHbyBjcmF6eSB3aXRo
IGl0ITotKSIKCUZyb20gaHR0cDovL3d3dy5yb2JlcnRueW1hbi5jb20vMjAwNS8x
MS8wNy90aGUtdWx0aW1hdGUtZ2V0ZWxlbWVudHNieWNsYXNzbmFtZS8KKi8KZnVu
Y3Rpb24gZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggb0VsbSwgc3RyVGFnTmFtZSwg
b0NsYXNzTmFtZXMgKSB7Cgl2YXIgYXJyUmV0dXJuRWxlbWVudHMgPSBuZXcgQXJy
YXkoKTsKCWlmICggdHlwZW9mKCBvRWxtLmdldEVsZW1lbnRzQnlDbGFzc05hbWUg
KSA9PSAnZnVuY3Rpb24nICkgewoJCS8qIFVzZSBhIG5hdGl2ZSBpbXBsZW1lbnRh
dGlvbiB3aGVyZSBwb3NzaWJsZSBGRjMsIFNhZjMuMiwgT3BlcmEgOS41ICovCgkJ
dmFyIGFyck5hdGl2ZVJldHVybiA9IG9FbG0uZ2V0RWxlbWVudHNCeUNsYXNzTmFt
ZSggb0NsYXNzTmFtZXMgKTsKCQlpZiAoIHN0clRhZ05hbWUgPT0gJyonICkgewoJ
CQlyZXR1cm4gYXJyTmF0aXZlUmV0dXJuOwoJCX0KCQlmb3IgKCB2YXIgaCA9IDA7
IGggPCBhcnJOYXRpdmVSZXR1cm4ubGVuZ3RoOyBoKysgKSB7CgkJCWlmKCBhcnJO
YXRpdmVSZXR1cm5baF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09IHN0clRhZ05h
bWUudG9Mb3dlckNhc2UoKSApIHsKCQkJCWFyclJldHVybkVsZW1lbnRzW2FyclJl
dHVybkVsZW1lbnRzLmxlbmd0aF0gPSBhcnJOYXRpdmVSZXR1cm5baF07CgkJCX0K
CQl9CgkJcmV0dXJuIGFyclJldHVybkVsZW1lbnRzOwoJfQoJdmFyIGFyckVsZW1l
bnRzID0gKCBzdHJUYWdOYW1lID09ICcqJyAmJiBvRWxtLmFsbCApID8gb0VsbS5h
bGwgOiBvRWxtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzdHJUYWdOYW1lICk7Cgl2
YXIgYXJyUmVnRXhwQ2xhc3NOYW1lcyA9IG5ldyBBcnJheSgpOwoJaWYoIHR5cGVv
ZiBvQ2xhc3NOYW1lcyA9PSAnb2JqZWN0JyApIHsKCQlmb3IoIHZhciBpID0gMDsg
aSA8IG9DbGFzc05hbWVzLmxlbmd0aDsgaSsrICkgewoJCQlhcnJSZWdFeHBDbGFz
c05hbWVzW2FyclJlZ0V4cENsYXNzTmFtZXMubGVuZ3RoXSA9CgkJCQluZXcgUmVn
RXhwKCIoXnxcXHMpIiArIG9DbGFzc05hbWVzW2ldLnJlcGxhY2UoL1wtL2csICJc
XC0iKSArICIoXFxzfCQpIik7CgkJfQoJfSBlbHNlIHsKCQlhcnJSZWdFeHBDbGFz
c05hbWVzW2FyclJlZ0V4cENsYXNzTmFtZXMubGVuZ3RoXSA9CgkJCW5ldyBSZWdF
eHAoIihefFxccykiICsgb0NsYXNzTmFtZXMucmVwbGFjZSgvXC0vZywgIlxcLSIp
ICsgIihcXHN8JCkiKTsKCX0KCXZhciBvRWxlbWVudDsKCXZhciBiTWF0Y2hlc0Fs
bDsKCWZvciggdmFyIGogPSAwOyBqIDwgYXJyRWxlbWVudHMubGVuZ3RoOyBqKysg
KSB7CgkJb0VsZW1lbnQgPSBhcnJFbGVtZW50c1tqXTsKCQliTWF0Y2hlc0FsbCA9
IHRydWU7CgkJZm9yKCB2YXIgayA9IDA7IGsgPCBhcnJSZWdFeHBDbGFzc05hbWVz
Lmxlbmd0aDsgaysrICkgewoJCQlpZiggIWFyclJlZ0V4cENsYXNzTmFtZXNba10u
dGVzdCggb0VsZW1lbnQuY2xhc3NOYW1lICkgKSB7CgkJCQliTWF0Y2hlc0FsbCA9
IGZhbHNlOwoJCQkJYnJlYWs7CgkJCX0KCQl9CgkJaWYoIGJNYXRjaGVzQWxsICkg
ewoJCQlhcnJSZXR1cm5FbGVtZW50c1thcnJSZXR1cm5FbGVtZW50cy5sZW5ndGhd
ID0gb0VsZW1lbnQ7CgkJfQoJfQoJcmV0dXJuICggYXJyUmV0dXJuRWxlbWVudHMg
KTsKfQoKZnVuY3Rpb24gcmVkaXJlY3RUb0ZyYWdtZW50KCBmcmFnbWVudCApIHsK
CXZhciBtYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2Vi
S2l0XC8oXGQrKS8pOwoJaWYgKCBtYXRjaCApIHsKCQl2YXIgd2ViS2l0VmVyc2lv
biA9IHBhcnNlSW50KCBtYXRjaFsxXSApOwoJCWlmICggd2ViS2l0VmVyc2lvbiA8
IDQyMCApIHsKCQkJLy8gUmVsZWFzZWQgU2FmYXJpIHcvIFdlYktpdCA0MTguOS4x
IG1lc3NlcyB1cCBob3JyaWJseQoJCQkvLyBOaWdodGxpZXMgb2YgNDIwKyBhcmUg
b2sKCQkJcmV0dXJuOwoJCX0KCX0KCWlmICggaXNfZ2Vja28gKSB7CgkJLy8gTW96
aWxsYSBuZWVkcyB0byB3YWl0IHVudGlsIGFmdGVyIGxvYWQsIG90aGVyd2lzZSB0
aGUgd2luZG93IGRvZXNuJ3Qgc2Nyb2xsCgkJYWRkT25sb2FkSG9vayhmdW5jdGlv
bigpIHsKCQkJaWYgKCB3aW5kb3cubG9jYXRpb24uaGFzaCA9PSAnJyApIHsKCQkJ
CXdpbmRvdy5sb2NhdGlvbi5oYXNoID0gZnJhZ21lbnQ7CgkJCX0KCQl9KTsKCX0g
ZWxzZSB7CgkJaWYgKCB3aW5kb3cubG9jYXRpb24uaGFzaCA9PSAnJyApIHsKCQkJ
d2luZG93LmxvY2F0aW9uLmhhc2ggPSBmcmFnbWVudDsKCQl9Cgl9Cn0KCi8qCiAq
IFRhYmxlIHNvcnRpbmcgc2NyaXB0IGJhc2VkIG9uIG9uZSAoYykgMTk5Ny0yMDA2
IFN0dWFydCBMYW5ncmlkZ2UgYW5kIEpvb3N0CiAqIGRlIFZhbGs6CiAqIGh0dHA6
Ly93d3cuam9vc3RkZXZhbGsubmwvY29kZS9zb3J0YWJsZS10YWJsZS8KICogaHR0
cDovL3d3dy5rcnlvZ2VuaXgub3JnL2NvZGUvYnJvd3Nlci9zb3J0dGFibGUvCiAq
CiAqIEB0b2RvIGRvbid0IGJyZWFrIG9uIGNvbHNwYW5zL3Jvd3NwYW5zIChidWcg
ODAyOCkKICogQHRvZG8gbGFuZ3VhZ2Utc3BlY2lmaWMgZGlnaXQgZ3JvdXBpbmcv
ZGVjaW1hbHMgKGJ1ZyA4MDYzKQogKiBAdG9kbyBzdXBwb3J0IGFsbCBhY2NlcHRl
ZCBkYXRlIGZvcm1hdHMgKGJ1ZyA4MjI2KQogKi8KCnZhciB0c19pbWFnZV9wYXRo
ID0gc3R5bGVwYXRoICsgJy9jb21tb24vaW1hZ2VzLyc7CnZhciB0c19pbWFnZV91
cCA9ICdzb3J0X3VwLmdpZic7CnZhciB0c19pbWFnZV9kb3duID0gJ3NvcnRfZG93
bi5naWYnOwp2YXIgdHNfaW1hZ2Vfbm9uZSA9ICdzb3J0X25vbmUuZ2lmJzsKdmFy
IHRzX2V1cm9wZWFuZGF0ZSA9IHdnQ29udGVudExhbmd1YWdlICE9ICdlbic7IC8v
IFRoZSBub24tQW1lcmljYW4taW5jbGluZWQgY2FuIGNoYW5nZSB0byAidHJ1ZSIK
dmFyIHRzX2FsdGVybmF0ZV9yb3dfY29sb3JzID0gZmFsc2U7CnZhciB0c19udW1i
ZXJfdHJhbnNmb3JtX3RhYmxlID0gbnVsbDsKdmFyIHRzX251bWJlcl9yZWdleCA9
IG51bGw7CgpmdW5jdGlvbiBzb3J0YWJsZXNfaW5pdCgpIHsKCXZhciBpZG51bSA9
IDA7CgkvLyBGaW5kIGFsbCB0YWJsZXMgd2l0aCBjbGFzcyBzb3J0YWJsZSBhbmQg
bWFrZSB0aGVtIHNvcnRhYmxlCgl2YXIgdGFibGVzID0gZ2V0RWxlbWVudHNCeUNs
YXNzTmFtZSggZG9jdW1lbnQsICd0YWJsZScsICdzb3J0YWJsZScgKTsKCWZvciAo
IHZhciB0aSA9IDA7IHRpIDwgdGFibGVzLmxlbmd0aCA7IHRpKysgKSB7CgkJaWYg
KCAhdGFibGVzW3RpXS5pZCApIHsKCQkJdGFibGVzW3RpXS5zZXRBdHRyaWJ1dGUo
ICdpZCcsICdzb3J0YWJsZV90YWJsZV9pZF8nICsgaWRudW0gKTsKCQkJKytpZG51
bTsKCQl9CgkJdHNfbWFrZVNvcnRhYmxlKCB0YWJsZXNbdGldICk7Cgl9Cn0KCmZ1
bmN0aW9uIHRzX21ha2VTb3J0YWJsZSggdGFibGUgKSB7Cgl2YXIgZmlyc3RSb3c7
CglpZiAoIHRhYmxlLnJvd3MgJiYgdGFibGUucm93cy5sZW5ndGggPiAwICkgewoJ
CWlmICggdGFibGUudEhlYWQgJiYgdGFibGUudEhlYWQucm93cy5sZW5ndGggPiAw
ICkgewoJCQlmaXJzdFJvdyA9IHRhYmxlLnRIZWFkLnJvd3NbdGFibGUudEhlYWQu
cm93cy5sZW5ndGgtMV07CgkJfSBlbHNlIHsKCQkJZmlyc3RSb3cgPSB0YWJsZS5y
b3dzWzBdOwoJCX0KCX0KCWlmICggIWZpcnN0Um93ICkgewoJCXJldHVybjsKCX0K
CgkvLyBXZSBoYXZlIGEgZmlyc3Qgcm93OiBhc3N1bWUgaXQncyB0aGUgaGVhZGVy
LCBhbmQgbWFrZSBpdHMgY29udGVudHMgY2xpY2thYmxlIGxpbmtzCglmb3IgKCB2
YXIgaSA9IDA7IGkgPCBmaXJzdFJvdy5jZWxscy5sZW5ndGg7IGkrKyApIHsKCQl2
YXIgY2VsbCA9IGZpcnN0Um93LmNlbGxzW2ldOwoJCWlmICggKCcgJyArIGNlbGwu
Y2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgdW5zb3J0YWJsZSAnKSA9PSAtMSAp
IHsKCQkJY2VsbC5pbm5lckhUTUwgKz0gJzxhIGhyZWY9IiMiIGNsYXNzPSJzb3J0
aGVhZGVyIiAnCgkJCQkrICdvbmNsaWNrPSJ0c19yZXNvcnRUYWJsZSh0aGlzKTty
ZXR1cm4gZmFsc2U7Ij4nCgkJCQkrICc8c3BhbiBjbGFzcz0ic29ydGFycm93Ij4n
CgkJCQkrICc8aW1nIHNyYz0iJwoJCQkJKyB0c19pbWFnZV9wYXRoCgkJCQkrIHRz
X2ltYWdlX25vbmUKCQkJCSsgJyIgYWx0PSImZGFycjsiLz48L3NwYW4+PC9hPic7
CgkJfQoJfQoJaWYgKCB0c19hbHRlcm5hdGVfcm93X2NvbG9ycyApIHsKCQl0c19h
bHRlcm5hdGUoIHRhYmxlICk7Cgl9Cn0KCmZ1bmN0aW9uIHRzX2dldElubmVyVGV4
dCggZWwgKSB7CglyZXR1cm4gZ2V0SW5uZXJUZXh0KCBlbCApOwp9CgpmdW5jdGlv
biB0c19yZXNvcnRUYWJsZSggbG5rICkgewoJLy8gZ2V0IHRoZSBzcGFuCgl2YXIg
c3BhbiA9IGxuay5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3BhbicpWzBdOwoKCXZh
ciB0ZCA9IGxuay5wYXJlbnROb2RlOwoJdmFyIHRyID0gdGQucGFyZW50Tm9kZTsK
CXZhciBjb2x1bW4gPSB0ZC5jZWxsSW5kZXg7CgoJdmFyIHRhYmxlID0gdHIucGFy
ZW50Tm9kZTsKCXdoaWxlICggdGFibGUgJiYgISggdGFibGUudGFnTmFtZSAmJiB0
YWJsZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ3RhYmxlJyApICkgewoJCXRh
YmxlID0gdGFibGUucGFyZW50Tm9kZTsKCX0KCWlmICggIXRhYmxlICkgewoJCXJl
dHVybjsKCX0KCglpZiAoIHRhYmxlLnJvd3MubGVuZ3RoIDw9IDEgKSB7CgkJcmV0
dXJuOwoJfQoKCS8vIEdlbmVyYXRlIHRoZSBudW1iZXIgdHJhbnNmb3JtIHRhYmxl
IGlmIGl0J3Mgbm90IGRvbmUgYWxyZWFkeQoJaWYgKCB0c19udW1iZXJfdHJhbnNm
b3JtX3RhYmxlID09PSBudWxsICkgewoJCXRzX2luaXRUcmFuc2Zvcm1UYWJsZSgp
OwoJfQoKCS8vIFdvcmsgb3V0IGEgdHlwZSBmb3IgdGhlIGNvbHVtbgoJLy8gU2tp
cCB0aGUgZmlyc3Qgcm93IGlmIHRoYXQncyB3aGVyZSB0aGUgaGVhZGluZ3MgYXJl
Cgl2YXIgcm93U3RhcnQgPSAoIHRhYmxlLnRIZWFkICYmIHRhYmxlLnRIZWFkLnJv
d3MubGVuZ3RoID4gMCA/IDAgOiAxICk7CgoJdmFyIGl0bSA9ICcnOwoJZm9yICgg
dmFyIGkgPSByb3dTdGFydDsgaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyBpKysgKSB7
CgkJaWYgKCB0YWJsZS5yb3dzW2ldLmNlbGxzLmxlbmd0aCA+IGNvbHVtbiApIHsK
CQkJaXRtID0gdHNfZ2V0SW5uZXJUZXh0KHRhYmxlLnJvd3NbaV0uY2VsbHNbY29s
dW1uXSk7CgkJCWl0bSA9IGl0bS5yZXBsYWNlKC9eW1xzXHhhMF0rLywgJycpLnJl
cGxhY2UoL1tcc1x4YTBdKyQvLCAnJyk7CgkJCWlmICggaXRtICE9ICcnICkgewoJ
CQkJYnJlYWs7CgkJCX0KCQl9Cgl9CgoJLy8gVE9ETzogYnVnIDgyMjYsIGxvY2Fs
aXNlZCBkYXRlIGZvcm1hdHMKCXZhciBzb3J0Zm4gPSB0c19zb3J0X2dlbmVyaWM7
Cgl2YXIgcHJlcHJvY2Vzc29yID0gdHNfdG9Mb3dlckNhc2U7CglpZiAoIC9eXGRc
ZFtcLy4gLV1bYS16QS1aXXszfVtcLy4gLV1cZFxkXGRcZCQvLnRlc3QoIGl0bSAp
ICkgewoJCXByZXByb2Nlc3NvciA9IHRzX2RhdGVUb1NvcnRLZXk7Cgl9IGVsc2Ug
aWYgKCAvXlxkXGRbXC8uLV1cZFxkW1wvLi1dXGRcZFxkXGQkLy50ZXN0KCBpdG0g
KSApIHsKCQlwcmVwcm9jZXNzb3IgPSB0c19kYXRlVG9Tb3J0S2V5OwoJfSBlbHNl
IGlmICggL15cZFxkW1wvLi1dXGRcZFtcLy4tXVxkXGQkLy50ZXN0KCBpdG0gKSAp
IHsKCQlwcmVwcm9jZXNzb3IgPSB0c19kYXRlVG9Tb3J0S2V5OwoJCS8vIChtaW51
cyBzaWduKShbcG91bmQgZG9sbGFyIGV1cm8geWVuIGN1cnJlbmN5XXxjZW50cykK
CX0gZWxzZSBpZiAoIC8oXihbLVx1MjIxMl0gKik/W1x1MDBhMyRcdTIwYWNcdTAw
YTRcdTAwYTVdfFx1MDBhMiQpLy50ZXN0KCBpdG0gKSApIHsKCQlwcmVwcm9jZXNz
b3IgPSB0c19jdXJyZW5jeVRvU29ydEtleTsKCX0gZWxzZSBpZiAoIHRzX251bWJl
cl9yZWdleC50ZXN0KCBpdG0gKSApIHsKCQlwcmVwcm9jZXNzb3IgPSB0c19wYXJz
ZUZsb2F0OwoJfQoKCXZhciByZXZlcnNlID0gKCBzcGFuLmdldEF0dHJpYnV0ZSgg
J3NvcnRkaXInICkgPT0gJ2Rvd24nICk7CgoJdmFyIG5ld1Jvd3MgPSBuZXcgQXJy
YXkoKTsKCXZhciBzdGF0aWNSb3dzID0gbmV3IEFycmF5KCk7Cglmb3IgKCB2YXIg
aiA9IHJvd1N0YXJ0OyBqIDwgdGFibGUucm93cy5sZW5ndGg7IGorKyApIHsKCQl2
YXIgcm93ID0gdGFibGUucm93c1tqXTsKCQlpZiggKCcgJyArIHJvdy5jbGFzc05h
bWUgKyAnICcpLmluZGV4T2YoJyB1bnNvcnRhYmxlICcpIDwgMCApIHsKCQkJdmFy
IGtleVRleHQgPSB0c19nZXRJbm5lclRleHQoIHJvdy5jZWxsc1tjb2x1bW5dICk7
CgkJCWlmKCBrZXlUZXh0ID09PSB1bmRlZmluZWQgKSB7CgkJCQlrZXlUZXh0ID0g
Jyc7IAoJCQl9CgkJCXZhciBvbGRJbmRleCA9ICggcmV2ZXJzZSA/IC1qIDogaiAp
OwoJCQl2YXIgcHJlcHJvY2Vzc2VkID0gcHJlcHJvY2Vzc29yKCBrZXlUZXh0LnJl
cGxhY2UoL15bXHNceGEwXSsvLCAnJykucmVwbGFjZSgvW1xzXHhhMF0rJC8sICcn
KSApOwoKCQkJbmV3Um93c1tuZXdSb3dzLmxlbmd0aF0gPSBuZXcgQXJyYXkoIHJv
dywgcHJlcHJvY2Vzc2VkLCBvbGRJbmRleCApOwoJCX0gZWxzZSB7CgkJCXN0YXRp
Y1Jvd3Nbc3RhdGljUm93cy5sZW5ndGhdID0gbmV3IEFycmF5KCByb3csIGZhbHNl
LCBqLXJvd1N0YXJ0ICk7CgkJfQoJfQoKCW5ld1Jvd3Muc29ydCggc29ydGZuICk7
CgoJdmFyIGFycm93SFRNTDsKCWlmICggcmV2ZXJzZSApIHsKCQlhcnJvd0hUTUwg
PSAnPGltZyBzcmM9IicgKyB0c19pbWFnZV9wYXRoICsgdHNfaW1hZ2VfZG93biAr
ICciIGFsdD0iJmRhcnI7Ii8+JzsKCQluZXdSb3dzLnJldmVyc2UoKTsKCQlzcGFu
LnNldEF0dHJpYnV0ZSggJ3NvcnRkaXInLCAndXAnICk7Cgl9IGVsc2UgewoJCWFy
cm93SFRNTCA9ICc8aW1nIHNyYz0iJyArIHRzX2ltYWdlX3BhdGggKyB0c19pbWFn
ZV91cCArICciIGFsdD0iJnVhcnI7Ii8+JzsKCQlzcGFuLnNldEF0dHJpYnV0ZSgg
J3NvcnRkaXInLCAnZG93bicgKTsKCX0KCglmb3IgKCB2YXIgaSA9IDA7IGkgPCBz
dGF0aWNSb3dzLmxlbmd0aDsgaSsrICkgewoJCXZhciByb3cgPSBzdGF0aWNSb3dz
W2ldOwoJCW5ld1Jvd3Muc3BsaWNlKCByb3dbMl0sIDAsIHJvdyApOwoJfQoKCS8v
IFdlIGFwcGVuZENoaWxkIHJvd3MgdGhhdCBhbHJlYWR5IGV4aXN0IHRvIHRoZSB0
Ym9keSwgc28gaXQgbW92ZXMgdGhlbSByYXRoZXIgdGhhbiBjcmVhdGluZyBuZXcg
b25lcwoJLy8gZG9uJ3QgZG8gc29ydGJvdHRvbSByb3dzCglmb3IgKCB2YXIgaSA9
IDA7IGkgPCBuZXdSb3dzLmxlbmd0aDsgaSsrICkgewoJCWlmICggKCAnICcgKyBu
ZXdSb3dzW2ldWzBdLmNsYXNzTmFtZSArICcgJykuaW5kZXhPZignIHNvcnRib3R0
b20gJykgPT0gLTEgKSB7CgkJCXRhYmxlLnRCb2RpZXNbMF0uYXBwZW5kQ2hpbGQo
IG5ld1Jvd3NbaV1bMF0gKTsKCQl9Cgl9CgkvLyBkbyBzb3J0Ym90dG9tIHJvd3Mg
b25seQoJZm9yICggdmFyIGkgPSAwOyBpIDwgbmV3Um93cy5sZW5ndGg7IGkrKyAp
IHsKCQlpZiAoICggJyAnICsgbmV3Um93c1tpXVswXS5jbGFzc05hbWUgKyAnICcp
LmluZGV4T2YoJyBzb3J0Ym90dG9tICcpICE9IC0xICkgewoJCQl0YWJsZS50Qm9k
aWVzWzBdLmFwcGVuZENoaWxkKCBuZXdSb3dzW2ldWzBdICk7CgkJfQoJfQoKCS8v
IERlbGV0ZSBhbnkgb3RoZXIgYXJyb3dzIHRoZXJlIG1heSBiZSBzaG93aW5nCgl2
YXIgc3BhbnMgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCB0ciwgJ3NwYW4nLCAn
c29ydGFycm93JyApOwoJZm9yICggdmFyIGkgPSAwOyBpIDwgc3BhbnMubGVuZ3Ro
OyBpKysgKSB7CgkJc3BhbnNbaV0uaW5uZXJIVE1MID0gJzxpbWcgc3JjPSInICsg
dHNfaW1hZ2VfcGF0aCArIHRzX2ltYWdlX25vbmUgKyAnIiBhbHQ9IiZkYXJyOyIv
Pic7Cgl9CglzcGFuLmlubmVySFRNTCA9IGFycm93SFRNTDsKCglpZiAoIHRzX2Fs
dGVybmF0ZV9yb3dfY29sb3JzICkgewoJCXRzX2FsdGVybmF0ZSggdGFibGUgKTsK
CX0KfQoKZnVuY3Rpb24gdHNfaW5pdFRyYW5zZm9ybVRhYmxlKCkgewoJaWYgKCB0
eXBlb2Ygd2dTZXBhcmF0b3JUcmFuc2Zvcm1UYWJsZSA9PSAndW5kZWZpbmVkJwoJ
CQl8fCAoIHdnU2VwYXJhdG9yVHJhbnNmb3JtVGFibGVbMF0gPT0gJycgJiYgd2dE
aWdpdFRyYW5zZm9ybVRhYmxlWzJdID09ICcnICkgKQoJewoJCWRpZ2l0Q2xhc3Mg
PSAiWzAtOSwuXSI7CgkJdHNfbnVtYmVyX3RyYW5zZm9ybV90YWJsZSA9IGZhbHNl
OwoJfSBlbHNlIHsKCQl0c19udW1iZXJfdHJhbnNmb3JtX3RhYmxlID0ge307CgkJ
Ly8gVW5wYWNrIHRoZSB0cmFuc2Zvcm0gdGFibGUKCQkvLyBTZXBhcmF0b3JzCgkJ
YXNjaWkgPSB3Z1NlcGFyYXRvclRyYW5zZm9ybVRhYmxlWzBdLnNwbGl0KCJcdCIp
OwoJCWxvY2FsaXNlZCA9IHdnU2VwYXJhdG9yVHJhbnNmb3JtVGFibGVbMV0uc3Bs
aXQoIlx0Iik7CgkJZm9yICggdmFyIGkgPSAwOyBpIDwgYXNjaWkubGVuZ3RoOyBp
KysgKSB7CgkJCXRzX251bWJlcl90cmFuc2Zvcm1fdGFibGVbbG9jYWxpc2VkW2ld
XSA9IGFzY2lpW2ldOwoJCX0KCQkvLyBEaWdpdHMKCQlhc2NpaSA9IHdnRGlnaXRU
cmFuc2Zvcm1UYWJsZVswXS5zcGxpdCgiXHQiKTsKCQlsb2NhbGlzZWQgPSB3Z0Rp
Z2l0VHJhbnNmb3JtVGFibGVbMV0uc3BsaXQoIlx0Iik7CgkJZm9yICggdmFyIGkg
PSAwOyBpIDwgYXNjaWkubGVuZ3RoOyBpKysgKSB7CgkJCXRzX251bWJlcl90cmFu
c2Zvcm1fdGFibGVbbG9jYWxpc2VkW2ldXSA9IGFzY2lpW2ldOwoJCX0KCgkJLy8g
Q29uc3RydWN0IHJlZ2V4IGZvciBudW1iZXIgaWRlbnRpZmljYXRpb24KCQlkaWdp
dHMgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4
JywgJzknLCAnLCcsICdcXC4nXTsKCQltYXhEaWdpdExlbmd0aCA9IDE7CgkJZm9y
ICggdmFyIGRpZ2l0IGluIHRzX251bWJlcl90cmFuc2Zvcm1fdGFibGUgKSB7CgkJ
CS8vIEVzY2FwZSByZWdleCBtZXRhY2hhcmFjdGVycwoJCQlkaWdpdHMucHVzaCgK
CQkJCWRpZ2l0LnJlcGxhY2UoIC9bXFxcXCRcKlwrXD9cLlwoXClcfFx7XH1cW1xd
XC1dLywKCQkJCQlmdW5jdGlvbiggcyApIHsgcmV0dXJuICdcXCcgKyBzOyB9ICkK
CQkJKTsKCQkJaWYgKCBkaWdpdC5sZW5ndGggPiBtYXhEaWdpdExlbmd0aCApIHsK
CQkJCW1heERpZ2l0TGVuZ3RoID0gZGlnaXQubGVuZ3RoOwoJCQl9CgkJfQoJCWlm
ICggbWF4RGlnaXRMZW5ndGggPiAxICkgewoJCQlkaWdpdENsYXNzID0gJ1snICsg
ZGlnaXRzLmpvaW4oICcnLCBkaWdpdHMgKSArICddJzsKCQl9IGVsc2UgewoJCQlk
aWdpdENsYXNzID0gJygnICsgZGlnaXRzLmpvaW4oICd8JywgZGlnaXRzICkgKyAn
KSc7CgkJfQoJfQoKCS8vIFdlIGFsbG93IGEgdHJhaWxpbmcgcGVyY2VudCBzaWdu
LCB3aGljaCB3ZSBqdXN0IHN0cmlwLiAgVGhpcyB3b3JrcyBmaW5lCgkvLyBpZiBw
ZXJjZW50cyBhbmQgcmVndWxhciBudW1iZXJzIGFyZW4ndCBiZWluZyBtaXhlZC4K
CXRzX251bWJlcl9yZWdleCA9IG5ldyBSZWdFeHAoCgkJIl4oIiArCgkJCSJbLStc
dTIyMTJdP1swLTldWzAtOSxdKihcXC5bMC05LF0qKT8oRVstK1x1MjIxMl0/WzAt
OV1bMC05LF0qKT8iICsgLy8gRm9ydHJhbi1zdHlsZSBzY2llbnRpZmljCgkJCSJ8
IiArCgkJCSJbLStcdTIyMTJdPyIgKyBkaWdpdENsYXNzICsgIislPyIgKyAvLyBH
ZW5lcmljIGxvY2FsaXNlZAoJCSIpJCIsICJpIgoJKTsKfQoKZnVuY3Rpb24gdHNf
dG9Mb3dlckNhc2UoIHMgKSB7CglyZXR1cm4gcy50b0xvd2VyQ2FzZSgpOwp9Cgpm
dW5jdGlvbiB0c19kYXRlVG9Tb3J0S2V5KCBkYXRlICkgewoJLy8geTJrIG5vdGVz
OiB0d28gZGlnaXQgeWVhcnMgbGVzcyB0aGFuIDUwIGFyZSB0cmVhdGVkIGFzIDIw
WFgsIGdyZWF0ZXIgdGhhbiA1MCBhcmUgdHJlYXRlZCBhcyAxOVhYCglpZiAoIGRh
dGUubGVuZ3RoID09IDExICkgewoJCXN3aXRjaCAoIGRhdGUuc3Vic3RyKCAzLCAz
ICkudG9Mb3dlckNhc2UoKSApIHsKCQkJY2FzZSAnamFuJzoKCQkJCXZhciBtb250
aCA9ICcwMSc7CgkJCQlicmVhazsKCQkJY2FzZSAnZmViJzoKCQkJCXZhciBtb250
aCA9ICcwMic7CgkJCQlicmVhazsKCQkJY2FzZSAnbWFyJzoKCQkJCXZhciBtb250
aCA9ICcwMyc7CgkJCQlicmVhazsKCQkJY2FzZSAnYXByJzoKCQkJCXZhciBtb250
aCA9ICcwNCc7CgkJCQlicmVhazsKCQkJY2FzZSAnbWF5JzoKCQkJCXZhciBtb250
aCA9ICcwNSc7CgkJCQlicmVhazsKCQkJY2FzZSAnanVuJzoKCQkJCXZhciBtb250
aCA9ICcwNic7CgkJCQlicmVhazsKCQkJY2FzZSAnanVsJzoKCQkJCXZhciBtb250
aCA9ICcwNyc7CgkJCQlicmVhazsKCQkJY2FzZSAnYXVnJzoKCQkJCXZhciBtb250
aCA9ICcwOCc7CgkJCQlicmVhazsKCQkJY2FzZSAnc2VwJzoKCQkJCXZhciBtb250
aCA9ICcwOSc7CgkJCQlicmVhazsKCQkJY2FzZSAnb2N0JzoKCQkJCXZhciBtb250
aCA9ICcxMCc7CgkJCQlicmVhazsKCQkJY2FzZSAnbm92JzoKCQkJCXZhciBtb250
aCA9ICcxMSc7CgkJCQlicmVhazsKCQkJY2FzZSAnZGVjJzoKCQkJCXZhciBtb250
aCA9ICcxMic7CgkJCQlicmVhazsKCQkJLy8gZGVmYXVsdDogdmFyIG1vbnRoID0g
JzAwJzsKCQl9CgkJcmV0dXJuIGRhdGUuc3Vic3RyKCA3LCA0ICkgKyBtb250aCAr
IGRhdGUuc3Vic3RyKCAwLCAyICk7Cgl9IGVsc2UgaWYgKCBkYXRlLmxlbmd0aCA9
PSAxMCApIHsKCQlpZiAoIHRzX2V1cm9wZWFuZGF0ZSA9PSBmYWxzZSApIHsKCQkJ
cmV0dXJuIGRhdGUuc3Vic3RyKCA2LCA0ICkgKyBkYXRlLnN1YnN0ciggMCwgMiAp
ICsgZGF0ZS5zdWJzdHIoIDMsIDIgKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0
ZS5zdWJzdHIoIDYsIDQgKSArIGRhdGUuc3Vic3RyKCAzLCAyICkgKyBkYXRlLnN1
YnN0ciggMCwgMiApOwoJCX0KCX0gZWxzZSBpZiAoIGRhdGUubGVuZ3RoID09IDgg
KSB7CgkJeXIgPSBkYXRlLnN1YnN0ciggNiwgMiApOwoJCWlmICggcGFyc2VJbnQo
IHlyICkgPCA1MCApIHsKCQkJeXIgPSAnMjAnICsgeXI7CgkJfSBlbHNlIHsKCQkJ
eXIgPSAnMTknICsgeXI7CgkJfQoJCWlmICggdHNfZXVyb3BlYW5kYXRlID09IHRy
dWUgKSB7CgkJCXJldHVybiB5ciArIGRhdGUuc3Vic3RyKCAzLCAyICkgKyBkYXRl
LnN1YnN0ciggMCwgMiApOwoJCX0gZWxzZSB7CgkJCXJldHVybiB5ciArIGRhdGUu
c3Vic3RyKCAwLCAyICkgKyBkYXRlLnN1YnN0ciggMywgMiApOwoJCX0KCX0KCXJl
dHVybiAnMDAwMDAwMDAnOwp9CgpmdW5jdGlvbiB0c19wYXJzZUZsb2F0KCBzICkg
ewoJaWYgKCAhcyApIHsKCQlyZXR1cm4gMDsKCX0KCWlmICggdHNfbnVtYmVyX3Ry
YW5zZm9ybV90YWJsZSAhPSBmYWxzZSApIHsKCQl2YXIgbmV3TnVtID0gJycsIGM7
CgoJCWZvciAoIHZhciBwID0gMDsgcCA8IHMubGVuZ3RoOyBwKysgKSB7CgkJCWMg
PSBzLmNoYXJBdCggcCApOwoJCQlpZiAoIGMgaW4gdHNfbnVtYmVyX3RyYW5zZm9y
bV90YWJsZSApIHsKCQkJCW5ld051bSArPSB0c19udW1iZXJfdHJhbnNmb3JtX3Rh
YmxlW2NdOwoJCQl9IGVsc2UgewoJCQkJbmV3TnVtICs9IGM7CgkJCX0KCQl9CgkJ
cyA9IG5ld051bTsKCX0KCW51bSA9IHBhcnNlRmxvYXQoIHMucmVwbGFjZSgvWywg
XS9nLCAnJykucmVwbGFjZSgiXHUyMjEyIiwgJy0nKSApOwoJcmV0dXJuICggaXNO
YU4oIG51bSApID8gLUluZmluaXR5IDogbnVtICk7Cn0KCmZ1bmN0aW9uIHRzX2N1
cnJlbmN5VG9Tb3J0S2V5KCBzICkgewoJcmV0dXJuIHRzX3BhcnNlRmxvYXQocy5y
ZXBsYWNlKC9bXi1cdTIyMTIwLTkuLF0vZywnJykpOwp9CgpmdW5jdGlvbiB0c19z
b3J0X2dlbmVyaWMoIGEsIGIgKSB7CglyZXR1cm4gYVsxXSA8IGJbMV0gPyAtMSA6
IGFbMV0gPiBiWzFdID8gMSA6IGFbMl0gLSBiWzJdOwp9CgpmdW5jdGlvbiB0c19h
bHRlcm5hdGUoIHRhYmxlICkgewoJLy8gVGFrZSBvYmplY3QgdGFibGUgYW5kIGdl
dCBhbGwgaXQncyB0Ym9kaWVzLgoJdmFyIHRhYmxlQm9kaWVzID0gdGFibGUuZ2V0
RWxlbWVudHNCeVRhZ05hbWUoICd0Ym9keScgKTsKCS8vIExvb3AgdGhyb3VnaCB0
aGVzZSB0Ym9kaWVzCglmb3IgKCB2YXIgaSA9IDA7IGkgPCB0YWJsZUJvZGllcy5s
ZW5ndGg7IGkrKyApIHsKCQkvLyBUYWtlIHRoZSB0Ym9keSwgYW5kIGdldCBhbGwg
aXQncyByb3dzCgkJdmFyIHRhYmxlUm93cyA9IHRhYmxlQm9kaWVzW2ldLmdldEVs
ZW1lbnRzQnlUYWdOYW1lKCAndHInICk7CgkJLy8gTG9vcCB0aHJvdWdoIHRoZXNl
IHJvd3MKCQkvLyBTdGFydCBhdCAxIGJlY2F1c2Ugd2Ugd2FudCB0byBsZWF2ZSB0
aGUgaGVhZGluZyByb3cgdW50b3VjaGVkCgkJZm9yICggdmFyIGogPSAwOyBqIDwg
dGFibGVSb3dzLmxlbmd0aDsgaisrICkgewoJCQkvLyBDaGVjayBpZiBqIGlzIGV2
ZW4sIGFuZCBhcHBseSBjbGFzc2VzIGZvciBib3RoIHBvc3NpYmxlIHJlc3VsdHMK
CQkJdmFyIG9sZENsYXNzZXMgPSB0YWJsZVJvd3Nbal0uY2xhc3NOYW1lLnNwbGl0
KCcgJyk7CgkJCXZhciBuZXdDbGFzc05hbWUgPSAnJzsKCQkJZm9yICggdmFyIGsg
PSAwOyBrIDwgb2xkQ2xhc3Nlcy5sZW5ndGg7IGsrKyApIHsKCQkJCWlmICggb2xk
Q2xhc3Nlc1trXSAhPSAnJyAmJiBvbGRDbGFzc2VzW2tdICE9ICdldmVuJyAmJiBv
bGRDbGFzc2VzW2tdICE9ICdvZGQnICkgewoJCQkJCW5ld0NsYXNzTmFtZSArPSBv
bGRDbGFzc2VzW2tdICsgJyAnOwoJCQkJfQoJCQl9CgkJCXRhYmxlUm93c1tqXS5j
bGFzc05hbWUgPSBuZXdDbGFzc05hbWUgKyAoIGogJSAyID09IDAgPyAnZXZlbicg
OiAnb2RkJyApOwoJCX0KCX0KfQoKLyoKICogRW5kIG9mIHRhYmxlIHNvcnRpbmcg
Y29kZQogKi8KCgovKioKICogQWRkIGEgY3V0ZSBsaXR0bGUgYm94IGF0IHRoZSB0
b3Agb2YgdGhlIHNjcmVlbiB0byBpbmZvcm0gdGhlIHVzZXIgb2YKICogc29tZXRo
aW5nLCByZXBsYWNpbmcgYW55IHByZWV4aXN0aW5nIG1lc3NhZ2UuCiAqCiAqIEBw
YXJhbSBTdHJpbmcgLW9yLSBEb20gT2JqZWN0IG1lc3NhZ2UgSFRNTCB0byBiZSBw
dXQgaW5zaWRlIHRoZSByaWdodCBkaXYKICogQHBhcmFtIFN0cmluZyBjbGFzc05h
bWUgICBVc2VkIGluIGFkZGluZyBhIGNsYXNzOyBzaG91bGQgYmUgZGlmZmVyZW50
IGZvciBlYWNoCiAqICAgY2FsbCB0byBhbGxvdyBDU1MvSlMgdG8gaGlkZSBkaWZm
ZXJlbnQgYm94ZXMuICBudWxsID0gbm8gY2xhc3MgdXNlZC4KICogQHJldHVybiBC
b29sZWFuICAgICAgIFRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZQog
Ki8KZnVuY3Rpb24ganNNc2coIG1lc3NhZ2UsIGNsYXNzTmFtZSApIHsKCWlmICgg
IWRvY3VtZW50LmdldEVsZW1lbnRCeUlkICkgewoJCXJldHVybiBmYWxzZTsKCX0K
CS8vIFdlIHNwZWNpYWwtY2FzZSBza2luIHN0cnVjdHVyZXMgcHJvdmlkZWQgYnkg
dGhlIHNvZnR3YXJlLiAgU2tpbnMgdGhhdAoJLy8gY2hvb3NlIHRvIGFiYW5kb24g
b3Igc2lnbmlmaWNhbnRseSBtb2RpZnkgb3VyIGZvcm1hdHRpbmcgY2FuIGp1c3Qg
ZGVmaW5lCgkvLyBhbiBtdy1qcy1tZXNzYWdlIGRpdiB0byBzdGFydCB3aXRoLgoJ
dmFyIG1lc3NhZ2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ213LWpz
LW1lc3NhZ2UnICk7CglpZiAoICFtZXNzYWdlRGl2ICkgewoJCW1lc3NhZ2VEaXYg
PSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApOwoJCWlmICggZG9jdW1l
bnQuZ2V0RWxlbWVudEJ5SWQoICdjb2x1bW4tY29udGVudCcgKQoJCSYmIGRvY3Vt
ZW50LmdldEVsZW1lbnRCeUlkKCAnY29udGVudCcgKSApIHsKCQkJLy8gTW9ub0Jv
b2ssIHByZXN1bWFibHkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdjb250
ZW50JyApLmluc2VydEJlZm9yZSgKCQkJCW1lc3NhZ2VEaXYsCgkJCQlkb2N1bWVu
dC5nZXRFbGVtZW50QnlJZCggJ2NvbnRlbnQnICkuZmlyc3RDaGlsZAoJCQkpOwoJ
CX0gZWxzZSBpZiAoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnY29udGVudCcg
KQoJCSYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnYXJ0aWNsZScgKSApIHsK
CQkJLy8gTm9uLU1vbm9ib29rIGJ1dCBzdGlsbCByZWNvZ25pemFibGUgKG9sZC1z
dHlsZSkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdhcnRpY2xlJykuaW5z
ZXJ0QmVmb3JlKAoJCQkJbWVzc2FnZURpdiwKCQkJCWRvY3VtZW50LmdldEVsZW1l
bnRCeUlkKCAnYXJ0aWNsZScgKS5maXJzdENoaWxkCgkJCSk7CgkJfSBlbHNlIHsK
CQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCgltZXNzYWdlRGl2LnNldEF0dHJpYnV0
ZSggJ2lkJywgJ213LWpzLW1lc3NhZ2UnICk7CgltZXNzYWdlRGl2LnN0eWxlLmRp
c3BsYXkgPSAnYmxvY2snOwoJaWYoIGNsYXNzTmFtZSApIHsKCQltZXNzYWdlRGl2
LnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ213LWpzLW1lc3NhZ2UtJyArIGNsYXNz
TmFtZSApOwoJfQoKCWlmICggdHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnICkg
ewoJCXdoaWxlICggbWVzc2FnZURpdi5oYXNDaGlsZE5vZGVzKCkgKSB7IC8vIFJl
bW92ZSBvbGQgY29udGVudAoJCQltZXNzYWdlRGl2LnJlbW92ZUNoaWxkKCBtZXNz
YWdlRGl2LmZpcnN0Q2hpbGQgKTsKCQl9CgkJbWVzc2FnZURpdi5hcHBlbmRDaGls
ZCggbWVzc2FnZSApOyAvLyBBcHBlbmQgbmV3IGNvbnRlbnQKCX0gZWxzZSB7CgkJ
bWVzc2FnZURpdi5pbm5lckhUTUwgPSBtZXNzYWdlOwoJfQoJcmV0dXJuIHRydWU7
Cn0KCi8qKgogKiBJbmplY3QgYSBjdXRlIGxpdHRsZSBwcm9ncmVzcyBzcGlubmVy
IGFmdGVyIHRoZSBzcGVjaWZpZWQgZWxlbWVudAogKgogKiBAcGFyYW0gZWxlbWVu
dCBFbGVtZW50IHRvIGluamVjdCBhZnRlcgogKiBAcGFyYW0gaWQgSWRlbnRpZmll
ciBzdHJpbmcgKGZvciB1c2Ugd2l0aCByZW1vdmVTcGlubmVyKCksIGJlbG93KQog
Ki8KZnVuY3Rpb24gaW5qZWN0U3Bpbm5lciggZWxlbWVudCwgaWQgKSB7Cgl2YXIg
c3Bpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbWcnICk7CglzcGlu
bmVyLmlkID0gJ213LXNwaW5uZXItJyArIGlkOwoJc3Bpbm5lci5zcmMgPSBzdHls
ZXBhdGggKyAnL2NvbW1vbi9pbWFnZXMvc3Bpbm5lci5naWYnOwoJc3Bpbm5lci5h
bHQgPSBzcGlubmVyLnRpdGxlID0gJy4uLic7CglpZiggZWxlbWVudC5uZXh0U2li
bGluZyApIHsKCQllbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBzcGlu
bmVyLCBlbGVtZW50Lm5leHRTaWJsaW5nICk7Cgl9IGVsc2UgewoJCWVsZW1lbnQu
cGFyZW50Tm9kZS5hcHBlbmRDaGlsZCggc3Bpbm5lciApOwoJfQp9CgovKioKICog
UmVtb3ZlIGEgcHJvZ3Jlc3Mgc3Bpbm5lciBhZGRlZCB3aXRoIGluamVjdFNwaW5u
ZXIoKQogKgogKiBAcGFyYW0gaWQgSWRlbnRpZmllciBzdHJpbmcKICovCmZ1bmN0
aW9uIHJlbW92ZVNwaW5uZXIoIGlkICkgewoJdmFyIHNwaW5uZXIgPSBkb2N1bWVu
dC5nZXRFbGVtZW50QnlJZCggJ213LXNwaW5uZXItJyArIGlkICk7CglpZiggc3Bp
bm5lciApIHsKCQlzcGlubmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNwaW5u
ZXIgKTsKCX0KfQoKZnVuY3Rpb24gcnVuT25sb2FkSG9vaygpIHsKCS8vIGRvbid0
IHJ1biBhbnl0aGluZyBiZWxvdyB0aGlzIGZvciBub24tZG9tIGJyb3dzZXJzCglp
ZiAoIGRvbmVPbmxvYWRIb29rIHx8ICEoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlk
ICYmIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lICkgKSB7CgkJcmV0dXJu
OwoJfQoKCS8vIHNldCB0aGlzIGJlZm9yZSBydW5uaW5nIGFueSBob29rcywgc2lu
Y2UgYW55IGVycm9ycyBiZWxvdwoJLy8gbWlnaHQgY2F1c2UgdGhlIGZ1bmN0aW9u
IHRvIHRlcm1pbmF0ZSBwcmVtYXR1cmVseQoJZG9uZU9ubG9hZEhvb2sgPSB0cnVl
OwoKCXVwZGF0ZVRvb2x0aXBBY2Nlc3NLZXlzKCBudWxsICk7CglzZXR1cENoZWNr
Ym94U2hpZnRDbGljaygpOwoJc29ydGFibGVzX2luaXQoKTsKCgkvLyBSdW4gYW55
IGFkZGVkLW9uIGZ1bmN0aW9ucwoJZm9yICggdmFyIGkgPSAwOyBpIDwgb25sb2Fk
RnVuY3RzLmxlbmd0aDsgaSsrICkgewoJCW9ubG9hZEZ1bmN0c1tpXSgpOwoJfQp9
CgovKioKICogQWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW4gZWxlbWVudAogKgog
KiBAcGFyYW0gRWxlbWVudCBlbGVtZW50IEVsZW1lbnQgdG8gYWRkIGhhbmRsZXIg
dG8KICogQHBhcmFtIFN0cmluZyBhdHRhY2ggRXZlbnQgdG8gYXR0YWNoIHRvCiAq
IEBwYXJhbSBjYWxsYWJsZSBoYW5kbGVyIEV2ZW50IGhhbmRsZXIgY2FsbGJhY2sK
ICovCmZ1bmN0aW9uIGFkZEhhbmRsZXIoIGVsZW1lbnQsIGF0dGFjaCwgaGFuZGxl
ciApIHsKCWlmKCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHsKCQllbGVtZW50
LmFkZEV2ZW50TGlzdGVuZXIoIGF0dGFjaCwgaGFuZGxlciwgZmFsc2UgKTsKCX0g
ZWxzZSBpZiggd2luZG93LmF0dGFjaEV2ZW50ICkgewoJCWVsZW1lbnQuYXR0YWNo
RXZlbnQoICdvbicgKyBhdHRhY2gsIGhhbmRsZXIgKTsKCX0KfQoKLyoqCiAqIEFk
ZCBhIGNsaWNrIGV2ZW50IGhhbmRsZXIgdG8gYW4gZWxlbWVudAogKgogKiBAcGFy
YW0gRWxlbWVudCBlbGVtZW50IEVsZW1lbnQgdG8gYWRkIGhhbmRsZXIgdG8KICog
QHBhcmFtIGNhbGxhYmxlIGhhbmRsZXIgRXZlbnQgaGFuZGxlciBjYWxsYmFjawog
Ki8KZnVuY3Rpb24gYWRkQ2xpY2tIYW5kbGVyKCBlbGVtZW50LCBoYW5kbGVyICkg
ewoJYWRkSGFuZGxlciggZWxlbWVudCwgJ2NsaWNrJywgaGFuZGxlciApOwp9Cgov
KioKICogUmVtb3ZlcyBhbiBldmVudCBoYW5kbGVyIGZyb20gYW4gZWxlbWVudAog
KgogKiBAcGFyYW0gRWxlbWVudCBlbGVtZW50IEVsZW1lbnQgdG8gcmVtb3ZlIGhh
bmRsZXIgZnJvbQogKiBAcGFyYW0gU3RyaW5nIHJlbW92ZSBFdmVudCB0byByZW1v
dmUKICogQHBhcmFtIGNhbGxhYmxlIGhhbmRsZXIgRXZlbnQgaGFuZGxlciBjYWxs
YmFjayB0byByZW1vdmUKICovCmZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoIGVsZW1l
bnQsIHJlbW92ZSwgaGFuZGxlciApIHsKCWlmKCB3aW5kb3cucmVtb3ZlRXZlbnRM
aXN0ZW5lciApIHsKCQllbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHJlbW92
ZSwgaGFuZGxlciwgZmFsc2UgKTsKCX0gZWxzZSBpZiggd2luZG93LmRldGFjaEV2
ZW50ICkgewoJCWVsZW1lbnQuZGV0YWNoRXZlbnQoICdvbicgKyByZW1vdmUsIGhh
bmRsZXIgKTsKCX0KfQovLyBub3RlOiBhbGwgc2tpbnMgc2hvdWxkIGNhbGwgcnVu
T25sb2FkSG9vaygpIGF0IHRoZSBlbmQgb2YgaHRtbCBvdXRwdXQsCi8vICAgICAg
c28gdGhlIGJlbG93IHNob3VsZCBiZSByZWR1bmRhbnQuIEl0J3MgdGhlcmUganVz
dCBpbiBjYXNlLgpob29rRXZlbnQoICdsb2FkJywgcnVuT25sb2FkSG9vayApOwoK
aWYgKCBpZTZfYnVncyApIHsKCWltcG9ydFNjcmlwdFVSSSggc3R5bGVwYXRoICsg
Jy9jb21tb24vSUVGaXhlcy5qcycgKTsKfQoKLy8gRm9yIGZ1dHVyZSB1c2UuCm13
ID0ge307CgoK

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=ajax.js
Content-Type: application/x-javascript; charset=UTF-8; name=ajax.js
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/common/ajax.js?270
Content-Transfer-Encoding: Base64

Ly8gcmVtb3RlIHNjcmlwdGluZyBsaWJyYXJ5Ci8vIChjKSBjb3B5cmlnaHQgMjAw
NSBtb2Rlcm5tZXRob2QsIGluYwp2YXIgc2FqYXhfZGVidWdfbW9kZSA9IGZhbHNl
Owp2YXIgc2FqYXhfcmVxdWVzdF90eXBlID0gIkdFVCI7CgovKioKKiBpZiBzYWph
eF9kZWJ1Z19tb2RlIGlzIHRydWUsIHRoaXMgZnVuY3Rpb24gb3V0cHV0cyBnaXZl
biB0aGUgbWVzc2FnZSBpbnRvIAoqIHRoZSBlbGVtZW50IHdpdGggaWQgPSBzYWph
eF9kZWJ1ZzsgaWYgbm8gc3VjaCBlbGVtZW50IGV4aXN0cyBpbiB0aGUgZG9jdW1l
bnQsIAoqIGl0IGlzIGluamVjdGVkLgoqLwpmdW5jdGlvbiBzYWpheF9kZWJ1Zyh0
ZXh0KSB7CglpZiAoIXNhamF4X2RlYnVnX21vZGUpIHJldHVybiBmYWxzZTsKCgl2
YXIgZT0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhamF4X2RlYnVnJyk7CgoJ
aWYgKCFlKSB7CgkJZT0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgicCIpOwoJCWUu
Y2xhc3NOYW1lPSAnc2FqYXhfZGVidWcnOwoJCWUuaWQ9ICdzYWpheF9kZWJ1Zyc7
CgoJCXZhciBiPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIp
WzBdOwoKCQlpZiAoYi5maXJzdENoaWxkKSBiLmluc2VydEJlZm9yZShlLCBiLmZp
cnN0Q2hpbGQpOwoJCWVsc2UgYi5hcHBlbmRDaGlsZChlKTsKCX0KCgl2YXIgbT0g
ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgltLmFwcGVuZENoaWxkKCBk
b2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggdGV4dCApICk7CgoJZS5hcHBlbmRDaGls
ZCggbSApOwoKCXJldHVybiB0cnVlOwp9CgovKioKKiBjb21wYXRpYmlsaXR5IHdy
YXBwZXIgZm9yIGNyZWF0aW5nIGEgbmV3IFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4K
Ki8KZnVuY3Rpb24gc2FqYXhfaW5pdF9vYmplY3QoKSB7CglzYWpheF9kZWJ1Zygi
c2FqYXhfaW5pdF9vYmplY3QoKSBjYWxsZWQuLiIpCgl2YXIgQTsKCXRyeSB7CgkJ
Ly8gVHJ5IHRoZSBuZXcgc3R5bGUgYmVmb3JlIEFjdGl2ZVggc28gd2UgZG9uJ3QK
CQkvLyB1bm5lY2Vzc2FyaWx5IHRyaWdnZXIgd2FybmluZ3MgaW4gSUUgNyB3aGVu
CgkJLy8gc2V0IHRvIHByb21wdCBhYm91dCBBY3RpdmVYIHVzYWdlCgkJQSA9IG5l
dyBYTUxIdHRwUmVxdWVzdCgpOwoJfSBjYXRjaCAoZSkgewoJCXRyeSB7CgkJCUE9
bmV3IEFjdGl2ZVhPYmplY3QoIk1zeG1sMi5YTUxIVFRQIik7CgkJfSBjYXRjaCAo
ZSkgewoJCQl0cnkgewoJCQkJQT1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0
LlhNTEhUVFAiKTsKCQkJfSBjYXRjaCAob2MpIHsKCQkJCUE9bnVsbDsKCQkJfQoJ
CX0KCX0KCWlmICghQSkKCQlzYWpheF9kZWJ1ZygiQ291bGQgbm90IGNyZWF0ZSBj
b25uZWN0aW9uIG9iamVjdC4iKTsKCglyZXR1cm4gQTsKfQoKLyoqCiogUGVyZm9y
bSBhbiBhamF4IGNhbGwgdG8gbWVkaWF3aWtpLiBDYWxscyBhcmUgaGFuZGVsZWQg
YnkgQWpheERpc3BhdGNoZXIucGhwCiogICBmdW5jX25hbWUgLSB0aGUgbmFtZSBv
ZiB0aGUgZnVuY3Rpb24gdG8gY2FsbC4gTXVzdCBiZSByZWdpc3RlcmVkIGluICR3
Z0FqYXhFeHBvcnRMaXN0CiogICBhcmdzIC0gYW4gYXJyYXkgb2YgYXJndW1lbnRz
IHRvIHRoYXQgZnVuY3Rpb24KKiAgIHRhcmdldCAtIHRoZSB0YXJnZXQgdGhhdCB3
aWxsIGhhbmRsZSB0aGUgcmVzdWx0IG9mIHRoZSBjYWxsLiBJZiB0aGlzIGlzIGEg
ZnVuY3Rpb24sCiogICAgICAgICAgICBpZiB3aWxsIGJlIGNhbGxlZCB3aXRoIHRo
ZSBYTUxIdHRwUmVxdWVzdCBhcyBhIHBhcmFtZXRlcjsgaWYgaXQncyBhbiBpbnB1
dAoqICAgICAgICAgICAgZWxlbWVudCwgaXRzIHZhbHVlIHdpbGwgYmUgc2V0IHRv
IHRoZSByZXN1bHRUZXh0OyBpZiBpdCdzIGFub3RoZXIgdHlwZSBvZgoqICAgICAg
ICAgICAgZWxlbWVudCwgaXRzIGlubmVySFRNTCB3aWxsIGJlIHNldCB0byB0aGUg
cmVzdWx0VGV4dC4KKgoqIEV4YW1wbGU6CiogICAgc2FqYXhfZG9fY2FsbCgnZG9G
b28nLCBbMSwgMiwgM10sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzaG93Rm9v
IikpOwoqCiogVGhpcyB3aWxsIGNhbGwgdGhlIGRvRm9vIGZ1bmN0aW9uIHZpYSBN
ZWRpYVdpa2kncyBBamF4RGlzcGF0Y2hlciwgd2l0aAoqICgxLCAyLCAzKSBhcyB0
aGUgcGFyYW1ldGVyIGxpc3QsIGFuZCB3aWxsIHNob3cgdGhlIHJlc3VsdCBpbiB0
aGUgZWxlbWVudAoqIHdpdGggaWQgPSBzaG93Rm9vCiovCmZ1bmN0aW9uIHNhamF4
X2RvX2NhbGwoZnVuY19uYW1lLCBhcmdzLCB0YXJnZXQpIHsKCXZhciBpLCB4LCBu
OwoJdmFyIHVyaTsKCXZhciBwb3N0X2RhdGE7Cgl1cmkgPSB3Z1NlcnZlciArCgkJ
KCh3Z1NjcmlwdCA9PSBudWxsKSA/ICh3Z1NjcmlwdFBhdGggKyAiL2luZGV4LnBo
cCIpIDogd2dTY3JpcHQpICsKCQkiP2FjdGlvbj1hamF4IjsKCWlmIChzYWpheF9y
ZXF1ZXN0X3R5cGUgPT0gIkdFVCIpIHsKCQlpZiAodXJpLmluZGV4T2YoIj8iKSA9
PSAtMSkKCQkJdXJpID0gdXJpICsgIj9ycz0iICsgZW5jb2RlVVJJQ29tcG9uZW50
KGZ1bmNfbmFtZSk7CgkJZWxzZQoJCQl1cmkgPSB1cmkgKyAiJnJzPSIgKyBlbmNv
ZGVVUklDb21wb25lbnQoZnVuY19uYW1lKTsKCQlmb3IgKGkgPSAwOyBpIDwgYXJn
cy5sZW5ndGg7IGkrKykKCQkJdXJpID0gdXJpICsgIiZyc2FyZ3NbXT0iICsgZW5j
b2RlVVJJQ29tcG9uZW50KGFyZ3NbaV0pOwoJCS8vdXJpID0gdXJpICsgIiZyc3Ju
ZD0iICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7CgkJcG9zdF9kYXRhID0gbnVsbDsK
CX0gZWxzZSB7CgkJcG9zdF9kYXRhID0gInJzPSIgKyBlbmNvZGVVUklDb21wb25l
bnQoZnVuY19uYW1lKTsKCQlmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkr
KykKCQkJcG9zdF9kYXRhID0gcG9zdF9kYXRhICsgIiZyc2FyZ3NbXT0iICsgZW5j
b2RlVVJJQ29tcG9uZW50KGFyZ3NbaV0pOwoJfQoJeCA9IHNhamF4X2luaXRfb2Jq
ZWN0KCk7CglpZiAoIXgpIHsKCQlhbGVydCgiQUpBWCBub3Qgc3VwcG9ydGVkIik7
CgkJcmV0dXJuIGZhbHNlOwoJfQoKCXRyeSB7CgkJeC5vcGVuKHNhamF4X3JlcXVl
c3RfdHlwZSwgdXJpLCB0cnVlKTsKCX0gY2F0Y2ggKGUpIHsKCQlpZiAod2luZG93
LmxvY2F0aW9uLmhvc3RuYW1lID09ICJsb2NhbGhvc3QiKSB7CgkJCWFsZXJ0KCJZ
b3VyIGJyb3dzZXIgYmxvY2tzIFhNTEh0dHBSZXF1ZXN0IHRvICdsb2NhbGhvc3Qn
LCB0cnkgdXNpbmcgYSByZWFsIGhvc3RuYW1lIGZvciBkZXZlbG9wbWVudC90ZXN0
aW5nLiIpOwoJCX0KCQl0aHJvdyBlOwoJfQoJaWYgKHNhamF4X3JlcXVlc3RfdHlw
ZSA9PSAiUE9TVCIpIHsKCQl4LnNldFJlcXVlc3RIZWFkZXIoIk1ldGhvZCIsICJQ
T1NUICIgKyB1cmkgKyAiIEhUVFAvMS4xIik7CgkJeC5zZXRSZXF1ZXN0SGVhZGVy
KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNv
ZGVkIik7Cgl9Cgl4LnNldFJlcXVlc3RIZWFkZXIoIlByYWdtYSIsICJjYWNoZT15
ZXMiKTsKCXguc2V0UmVxdWVzdEhlYWRlcigiQ2FjaGUtQ29udHJvbCIsICJuby10
cmFuc2Zvcm0iKTsKCXgub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7
CgkJaWYgKHgucmVhZHlTdGF0ZSAhPSA0KQoJCQlyZXR1cm47CgoJCXNhamF4X2Rl
YnVnKCJyZWNlaXZlZCAoIiArIHguc3RhdHVzICsgIiAiICsgeC5zdGF0dXNUZXh0
ICsgIikgIiArIHgucmVzcG9uc2VUZXh0KTsKCgkJLy9pZiAoeC5zdGF0dXMgIT0g
MjAwKQoJCS8vCWFsZXJ0KCJFcnJvcjogIiArIHguc3RhdHVzICsgIiAiICsgeC5z
dGF0dXNUZXh0ICsgIjogIiArIHgucmVzcG9uc2VUZXh0KTsKCQkvL2Vsc2UKCgkJ
aWYgKCB0eXBlb2YoIHRhcmdldCApID09ICdmdW5jdGlvbicgKSB7CgkJCXRhcmdl
dCggeCApOwoJCX0KCQllbHNlIGlmICggdHlwZW9mKCB0YXJnZXQgKSA9PSAnb2Jq
ZWN0JyApIHsKCQkJaWYgKCB0YXJnZXQudGFnTmFtZSA9PSAnSU5QVVQnICkgewoJ
CQkJaWYgKHguc3RhdHVzID09IDIwMCkgdGFyZ2V0LnZhbHVlPSB4LnJlc3BvbnNl
VGV4dDsKCQkJCS8vZWxzZSBhbGVydCgiRXJyb3I6ICIgKyB4LnN0YXR1cyArICIg
IiArIHguc3RhdHVzVGV4dCArICIgKCIgKyB4LnJlc3BvbnNlVGV4dCArICIpIik7
CgkJCX0KCQkJZWxzZSB7CgkJCQlpZiAoeC5zdGF0dXMgPT0gMjAwKSB0YXJnZXQu
aW5uZXJIVE1MID0geC5yZXNwb25zZVRleHQ7CgkJCQllbHNlIHRhcmdldC5pbm5l
ckhUTUw9ICI8ZGl2IGNsYXNzPSdlcnJvcic+RXJyb3I6ICIgKyB4LnN0YXR1cyAr
ICIgIiArIHguc3RhdHVzVGV4dCArICIgKCIgKyB4LnJlc3BvbnNlVGV4dCArICIp
PC9kaXY+IjsKCQkJfQoJCX0KCQllbHNlIHsKCQkJYWxlcnQoImJhZCB0YXJnZXQg
Zm9yIHNhamF4X2RvX2NhbGw6IG5vdCBhIGZ1bmN0aW9uIG9yIG9iamVjdDogIiAr
IHRhcmdldCk7CgkJfQoKCQlyZXR1cm47Cgl9CgoJc2FqYXhfZGVidWcoZnVuY19u
YW1lICsgIiB1cmkgPSAiICsgdXJpICsgIiAvIHBvc3QgPSAiICsgcG9zdF9kYXRh
KTsKCXguc2VuZChwb3N0X2RhdGEpOwoJc2FqYXhfZGVidWcoZnVuY19uYW1lICsg
IiB3YWl0aW5nLi4iKTsKCWRlbGV0ZSB4OwoKCXJldHVybiB0cnVlOwp9CgovKioK
ICogQHJldHVybiBib29sZWFuIHdoZXRoZXIgdGhlIGJyb3dzZXIgc3VwcG9ydHMg
WE1MSHR0cFJlcXVlc3QKICovCmZ1bmN0aW9uIHdmU3VwcG9ydHNBamF4KCkgewoJ
dmFyIHJlcXVlc3QgPSBzYWpheF9pbml0X29iamVjdCgpOwoJdmFyIHN1cHBvcnRz
QWpheCA9IHJlcXVlc3QgPyB0cnVlIDogZmFsc2U7CglkZWxldGUgcmVxdWVzdDsK
CXJldHVybiBzdXBwb3J0c0FqYXg7Cn0KCg==

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=index.js
Content-Type: text/javascript; charset=UTF-8; name=index.js
Content-Location: http://roguebasin.roguelikedevelopment.org/index.php?title=-&action=raw&gen=js&useskin=monobook&270
Content-Transfer-Encoding: 8bit

/* generated javascript */
var skin = 'monobook';
var stylepath = '/skins';

/* MediaWiki:Common.js */
/* Any JavaScript here will be loaded for all users on every page load. */

/* MediaWiki:Monobook.js */
/* Any JavaScript here will be loaded for users using the MonoBook skin */
------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline
Content-Type: image/png
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/roguebasin/RogueBasin_logo.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAIcAAAB5CAYAAAATfzJjAAAACXBIWXMAAC4jAAAu
IwF4pT92AAAKTWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVN3WJP3Fj7f
92UPVkLY8LGXbIEAIiOsCMgQWaIQkgBhhBASQMWFiApWFBURnEhVxILVCkidiOKg
KLhnQYqIWotVXDjuH9yntX167+3t+9f7vOec5/zOec8PgBESJpHmomoAOVKFPDrY
H49PSMTJvYACFUjgBCAQ5svCZwXFAADwA3l4fnSwP/wBr28AAgBw1S4kEsfh/4O6
UCZXACCRAOAiEucLAZBSAMguVMgUAMgYALBTs2QKAJQAAGx5fEIiAKoNAOz0ST4F
ANipk9wXANiiHKkIAI0BAJkoRyQCQLsAYFWBUiwCwMIAoKxAIi4EwK4BgFm2MkcC
gL0FAHaOWJAPQGAAgJlCLMwAIDgCAEMeE80DIEwDoDDSv+CpX3CFuEgBAMDLlc2X
S9IzFLiV0Bp38vDg4iHiwmyxQmEXKRBmCeQinJebIxNI5wNMzgwAABr50cH+OD+Q
5+bk4eZm52zv9MWi/mvwbyI+IfHf/ryMAgQAEE7P79pf5eXWA3DHAbB1v2upWwDa
VgBo3/ldM9sJoFoK0Hr5i3k4/EAenqFQyDwdHAoLC+0lYqG9MOOLPv8z4W/gi372
/EAe/tt68ABxmkCZrcCjg/1xYW52rlKO58sEQjFu9+cj/seFf/2OKdHiNLFcLBWK
8ViJuFAiTcd5uVKRRCHJleIS6X8y8R+W/QmTdw0ArIZPwE62B7XLbMB+7gECiw5Y
0nYAQH7zLYwaC5EAEGc0Mnn3AACTv/mPQCsBAM2XpOMAALzoGFyolBdMxggAAESg
gSqwQQcMwRSswA6cwR28wBcCYQZEQAwkwDwQQgbkgBwKoRiWQRlUwDrYBLWwAxqg
EZrhELTBMTgN5+ASXIHrcBcGYBiewhi8hgkEQcgIE2EhOogRYo7YIs4IF5mOBCJh
SDSSgKQg6YgUUSLFyHKkAqlCapFdSCPyLXIUOY1cQPqQ28ggMor8irxHMZSBslED
1AJ1QLmoHxqKxqBz0XQ0D12AlqJr0Rq0Hj2AtqKn0UvodXQAfYqOY4DRMQ5mjNlh
XIyHRWCJWBomxxZj5Vg1Vo81Yx1YN3YVG8CeYe8IJAKLgBPsCF6EEMJsgpCQR1hM
WEOoJewjtBK6CFcJg4Qxwicik6hPtCV6EvnEeGI6sZBYRqwm7iEeIZ4lXicOE1+T
SCQOyZLkTgohJZAySQtJa0jbSC2kU6Q+0hBpnEwm65Btyd7kCLKArCCXkbeQD5BP
kvvJw+S3FDrFiOJMCaIkUqSUEko1ZT/lBKWfMkKZoKpRzame1AiqiDqfWkltoHZQ
L1OHqRM0dZolzZsWQ8ukLaPV0JppZ2n3aC/pdLoJ3YMeRZfQl9Jr6Afp5+mD9HcM
DYYNg8dIYigZaxl7GacYtxkvmUymBdOXmchUMNcyG5lnmA+Yb1VYKvYqfBWRyhKV
OpVWlX6V56pUVXNVP9V5qgtUq1UPq15WfaZGVbNQ46kJ1Bar1akdVbupNq7OUndS
j1DPUV+jvl/9gvpjDbKGhUaghkijVGO3xhmNIRbGMmXxWELWclYD6yxrmE1iW7L5
7Ex2Bfsbdi97TFNDc6pmrGaRZp3mcc0BDsax4PA52ZxKziHODc57LQMtPy2x1mqt
Zq1+rTfaetq+2mLtcu0W7eva73VwnUCdLJ31Om0693UJuja6UbqFutt1z+o+02Pr
eekJ9cr1Dund0Uf1bfSj9Rfq79bv0R83MDQINpAZbDE4Y/DMkGPoa5hpuNHwhOGo
EctoupHEaKPRSaMnuCbuh2fjNXgXPmasbxxirDTeZdxrPGFiaTLbpMSkxeS+Kc2U
a5pmutG003TMzMgs3KzYrMnsjjnVnGueYb7ZvNv8jYWlRZzFSos2i8eW2pZ8ywWW
TZb3rJhWPlZ5VvVW16xJ1lzrLOtt1ldsUBtXmwybOpvLtqitm63Edptt3xTiFI8p
0in1U27aMez87ArsmuwG7Tn2YfYl9m32zx3MHBId1jt0O3xydHXMdmxwvOuk4TTD
qcSpw+lXZxtnoXOd8zUXpkuQyxKXdpcXU22niqdun3rLleUa7rrStdP1o5u7m9yt
2W3U3cw9xX2r+00umxvJXcM970H08PdY4nHM452nm6fC85DnL152Xlle+70eT7Oc
Jp7WMG3I28Rb4L3Le2A6Pj1l+s7pAz7GPgKfep+Hvqa+It89viN+1n6Zfgf8nvs7
+sv9j/i/4XnyFvFOBWABwQHlAb2BGoGzA2sDHwSZBKUHNQWNBbsGLww+FUIMCQ1Z
H3KTb8AX8hv5YzPcZyya0RXKCJ0VWhv6MMwmTB7WEY6GzwjfEH5vpvlM6cy2CIjg
R2yIuB9pGZkX+X0UKSoyqi7qUbRTdHF09yzWrORZ+2e9jvGPqYy5O9tqtnJ2Z6xq
bFJsY+ybuIC4qriBeIf4RfGXEnQTJAntieTE2MQ9ieNzAudsmjOc5JpUlnRjruXc
orkX5unOy553PFk1WZB8OIWYEpeyP+WDIEJQLxhP5aduTR0T8oSbhU9FvqKNolGx
t7hKPJLmnVaV9jjdO31D+miGT0Z1xjMJT1IreZEZkrkj801WRNberM/ZcdktOZSc
lJyjUg1plrQr1zC3KLdPZisrkw3keeZtyhuTh8r35CP5c/PbFWyFTNGjtFKuUA4W
TC+oK3hbGFt4uEi9SFrUM99m/ur5IwuCFny9kLBQuLCz2Lh4WfHgIr9FuxYji1MX
dy4xXVK6ZHhp8NJ9y2jLspb9UOJYUlXyannc8o5Sg9KlpUMrglc0lamUycturvRa
uWMVYZVkVe9ql9VbVn8qF5VfrHCsqK74sEa45uJXTl/VfPV5bdra3kq3yu3rSOuk
626s91m/r0q9akHV0IbwDa0b8Y3lG19tSt50oXpq9Y7NtM3KzQM1YTXtW8y2rNvy
oTaj9nqdf13LVv2tq7e+2Sba1r/dd3vzDoMdFTve75TsvLUreFdrvUV99W7S7oLd
jxpiG7q/5n7duEd3T8Wej3ulewf2Re/ranRvbNyvv7+yCW1SNo0eSDpw5ZuAb9qb
7Zp3tXBaKg7CQeXBJ9+mfHvjUOihzsPcw83fmX+39QjrSHkr0jq/dawto22gPaG9
7+iMo50dXh1Hvrf/fu8x42N1xzWPV56gnSg98fnkgpPjp2Snnp1OPz3Umdx590z8
mWtdUV29Z0PPnj8XdO5Mt1/3yfPe549d8Lxw9CL3Ytslt0utPa49R35w/eFIr1tv
62X3y+1XPK509E3rO9Hv03/6asDVc9f41y5dn3m978bsG7duJt0cuCW69fh29u0X
dwruTNxdeo94r/y+2v3qB/oP6n+0/rFlwG3g+GDAYM/DWQ/vDgmHnv6U/9OH4dJH
zEfVI0YjjY+dHx8bDRq98mTOk+GnsqcTz8p+Vv9563Or59/94vtLz1j82PAL+YvP
v655qfNy76uprzrHI8cfvM55PfGm/K3O233vuO+638e9H5ko/ED+UPPR+mPHp9BP
9z7nfP78L/eE8/sl0p8zAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMA
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
qLAAAAAASUVORK5CYII=

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=guardianOfRogueBasin.png
Content-Type: image/png; name=guardianOfRogueBasin.png
Content-Location: http://www.roguebasin.com/skins/roguebasin/guardianOfRogueBasin.png
Content-Transfer-Encoding: Base64

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
ejSaqMhIWXAwZRfCw8Nfe/XVtra29PT0Rx55hLpbf+SRTqfHx8UlJib6+/lRnDIY
DAaD0V83cCsEUVNb63A40lJTURptFHqWsQMEQU6n88aNG3V1dTqd7tNPP62srHz8
iSdioqIcTifFSHh4OLjFbD8oUaSkpISGhYlFoiFGbh0dHfn5+fHx8dHDCx2OJx0A
gMLCwr379jU2NnK5XJ6X17miIpIkX3nlFRqNdhsFA0Gn0/18fcEgCaMQBFksluPH
j9us1kULF/rfaRg5ECOPht0PIAhCEOTwN9/s2bPH6XTCMJyamvriiy/iOP7jjz/G
xsWFhoTcZ1icsikEQSQlJc2bN++u5FIYn/wOBEGuXbv2zeHDEyIili9bRp1BK/X3
T0lOptFovT099x9JIUmSRqNNmTJl7ty5ww84j0NjQRCkp6fnyJEjfWbz8uXLIQhy
OhxBQUE8Hm/ixIkvvPBCbEwM5YA/eIyDOqjR/fWqqkmTJkVHRcnlchuGBQYEUAGO
3JwcPz+/sZuFHRrjQAcEQTYMs9vt4WFhWr2+4MwZPz+/sLCw8aLAFePQWAiCoAIZ
x0+cOF9aqtVqly1bFhQU9GugYxx6FpIkeTxeUFCQSqUy9/UtXLBg/vz5TCbz1xCU
H5MTR+/+VAgiCILKpbv//LZRxPi4YZRbyePxxuXpQ+Ce6aBi5cXFxR2dnSiCJCQk
pKSkQBBUVVX1040bNpvNRyKZMmWKTCYrLCxsbWvLmDx5woQJvb29Z3/4gc1izZw5
s6Wlpay83Gq10un0yenpUVFR1dXVly9fBhAUEhKSNXUqNdKnpm+vX79+7fp1u90u
8vbOycnx8fG5cePG+dJSAAAEQVGRkdnZ2SqVqqi4WKfTIQgSGRk5JTNzxCedjoSO
H8+d2717NwLDNgzLLyh49513uFzurl27Ojo7ERi22Wx6vX7Lli0XL13Kz89HYDg6
OrqlpeXgwYMBUunUqVPr6uu//ve/aXS6t7d3WGgoi8ncuXNnY2MjnU6nMxgkSS5+
7DGr1YqiaGNT0+7du1vkcjabbbFYrFbr0qVLa+vq9u7d6+Pj09fXJxGLqRSq7777
zmAw+Pv7QwBMTk8fMR331tFCEGQxmxvq6wEAH3/88csvvaTX6zUaTWtra0dn58qV
K7/55hs/f/9upZJK6zFbLJ2dnRAENbe09Oe3EQTB8/LasH79/3z++cyZM3V6fVd3
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
C74yZPhyCpAGAAAAAElFTkSuQmCC

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=poweredby_mediawiki_88x31.png
Content-Type: image/png; name=poweredby_mediawiki_88x31.png
Content-Location: http://roguebasin.roguelikedevelopment.org/skins/common/images/poweredby_mediawiki_88x31.png
Content-Transfer-Encoding: Base64

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
RU5ErkJggg==

------------RPkjCkfDWDAV4LCyfrdDEV
Content-Disposition: inline; filename=favicon.htm
Content-Type: text/html; name=favicon.htm
Content-Location: http://roguebasin.roguelikedevelopment.org/favicon.ico
Content-Transfer-Encoding: 8bit

<html>
<head><title> 404 Not Found
</title></head>
<body><h1> 404 Not Found
</h1>
The resource requested could not be found on this server!<hr />
Powered By <a href='http://www.litespeedtech.com'>LiteSpeed Web Server</a><br />
<font face="Verdana, Arial, Helvetica" size=-1>LiteSpeed Technologies is not responsible for administration and contents of this web site!</font></body></html>

------------RPkjCkfDWDAV4LCyfrdDEV--
